namespace protocol
{

	struct T0
	{
		enum class enum_t : unsigned char
		{
			PC_DEFAULT_UPDATE = 0x00,

			PC_CONNECT = 0x10,
			FN_CONNECT = 0x11,

			FC_BATTLE = 0x12,

			FP_CONNECT = 0x13,
			IP_CONNECT = 0x14,
			FI_CONNECT = 0x15,
			IC_CONNECT = 0x16,
			PM_CONNECT = 0x17,
			FM_CONNECT = 0x18,
			LM_CONNECT = 0x19,
			IM_CONNECT = 0x1A,
			NM_CONNECT = 0x1B,
			PL_CONNECT = 0x1C,
			IL_CONNECT = 0x1D,
			FL_CONNECT = 0x1E,
			NL_CONNECT = 0x1F,

			MF_TO_AF = 0x20,

			PP_CONNECT = 0x21,

			FC_ADMIN = 0x30,
			FC_CONNECT = 0x31,
			FC_CHARACTER = 0x32,
			FC_CHAT = 0x33,
			FC_CITY = 0x34,
			FC_CLIENT_REPORT = 0x35,
			FC_EVENT = 0x36,
			FC_GUILD = 0x37,
			FC_INFO = 0x38,
			FC_ITEM = 0x39,
			FC_MONSTER = 0x3A,
			FC_MOVE = 0x3B,
			FC_PARTY = 0x3C,
			FC_QUEST = 0x3D,
			FC_RACING = 0x3E,
			FC_REQUEST = 0x3F,
			FC_SHOP = 0x40,
			FC_SKILL = 0x41,
			FC_STORE = 0x42,
			FC_STRING = 0x43,
			FC_TIMER = 0x44,
			FC_TRADE = 0x45,
			FC_COUNTDOWN = 0x46,
			FC_OBJECT = 0x47,
			FC_AUCTION = 0x48,
			FC_CITYWAR = 0x49,
			FC_WAR = 0x4A,
			FC_BAZAAR = 0x4B,
			FC_ARENA = 0x4C,
			FC_TUTORIAL = 0x4D,
			FC_OUTPOST = 0x4E,
			FC_INFINITY = 0x4F,

			FI_ADMIN = 0x50,
			FI_CHARACTER = 0x51,
			FI_CHAT = 0x52,
			FI_EVENT = 0x53,
			FI_GUILD = 0x54,
			FI_PARTY = 0x55,
			FI_CASH = 0x57,
			FI_INFO = 0x58,

			FN_BATTLE = 0x60,
			FN_CHARACTER = 0x61,
			FN_EVENT = 0x62,
			FN_MONSTER = 0x63,
			FN_MOVE = 0x64,
			FN_SKILL = 0x65,
			FN_CITYWAR = 0x66,
			FN_NPCSERVER = 0x67,

			FP_EVENT = 0x70,
			FP_MONITOR = 0x71,
			FP_CASH = 0x72,
			FP_ADMIN = 0x73,
			FP_GLOG = 0x74,

			IC_ADMIN = 0x80,
			IC_CHAT = 0x81,
			IC_GUILD = 0x82,
			IC_PARTY = 0x83,
			IC_STRING = 0x84,
			IC_COUNTDOWN = 0x85,
			//IC_VOIP = 0x87,
			IC_CHATROOM = 0x88,
			IC_INFO = 0x89,

			FL_LOG = 0x90,

			//PRE_TOOL = 0x98,

			PAUTH_CONNECT = 0x99,

			PM_MONITOR = 0xA0,
			IM_MONITOR = 0xA1,
			FM_MONITOR = 0xA3,
			NM_MONITOR = 0xA4,
			PA_ADMIN = 0xB0,
			IA_ADMIN = 0xB1,
			FA_ADMIN = 0xB2,
			PRE = 0xC0,
			IM = 0xC1,
			FIELD = 0xC2,
			NPC = 0xC3,
			FC_TRIGGER = 0xD1,
			FC_COLLECTION = 0xD2,
			TIMER = 0xE0,
			DB = 0xE1,
			ATUMERROR = 0xFE,
			NA = 0xFF,
		};
	};


	template<T0::enum_t> struct T1;


	template<> struct T1<T0::enum_t::PC_DEFAULT_UPDATE>
	{
		enum class enum_t : unsigned char
		{
			PC_DEFAULT_UPDATE_LAUNCHER_VERSION = 0x01,
			PC_DEFAULT_UPDATE_LAUNCHER_UPDATE_INFO = 0x02,
			PC_DEFAULT_UPDATE_LAUNCHER_VERSION_OK = 0x03,
			PC_DEFAULT_NEW_UPDATE_LAUNCHER_VERSION = 0x10,
			PC_DEFAULT_NEW_UPDATE_LAUNCHER_UPDATE_INFO = 0x11,
		};
	};

	template<> struct T1<T0::enum_t::PC_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			PC_CONNECT = 0x00,
			PC_CONNECT_OK = 0x01,
			PC_CONNECT_CLOSE = 0x02,
			PC_CONNECT_ALIVE = 0x03,
			PC_CONNECT_VERSION = 0x04,
			PC_CONNECT_UPDATE_INFO = 0x05,
			PC_CONNECT_VERSION_OK = 0x06,
			PC_CONNECT_REINSTALL_CLIENT = 0x07,
			PC_CONNECT_LOGIN = 0x08,
			PC_CONNECT_LOGIN_OK = 0x09,
			PC_CONNECT_SINGLE_FILE_VERSION_CHECK = 0x10,
			PC_CONNECT_SINGLE_FILE_VERSION_CHECK_OK = 0x11,
			PC_CONNECT_SINGLE_FILE_UPDATE_INFO = 0x12,
			PC_CONNECT_GET_SERVER_GROUP_LIST = 0x13,
			PC_CONNECT_GET_SERVER_GROUP_LIST_OK = 0x14,
			PC_CONNECT_GET_GAME_SERVER_GROUP_LIST = 0x20,
			PC_CONNECT_GET_GAME_SERVER_GROUP_LIST_OK = 0x21,
			PC_CONNECT_NETWORK_CHECK = 0x22,
			PC_CONNECT_NETWORK_CHECK_OK = 0x23,
			PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST = 0x24,
			PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST_OK = 0x25,
			PC_CONNECT_LOGIN_BLOCKED = 0xF0,
			PC_CONNECT_MAC_BLOCKED = 0xF1,
		};
	};

	template<> struct T1<T0::enum_t::FN_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			FN_CONNECT = 0x00,
			FN_CONNECT_OK = 0x01,
			FN_CONNECT_CLOSE = 0x02,
			FN_CONNECT_ALIVE = 0x03,
			FN_CONNECT_INCREASE_CHANNEL = 0x04,
			FN_CONNECT_SET_CHANNEL_STATE = 0x05,
		};
	};

	template<> struct T1<T0::enum_t::FC_BATTLE>
	{
		enum class enum_t : unsigned char
		{
			FC_BATTLE_ATTACK = 0x00,
			FC_BATTLE_ATTACK_OK = 0x01,
			FC_BATTLE_ATTACK_FIND = 0x02,
			FC_BATTLE_ATTACK_FIND_OK = 0x03,
			FC_BATTLE_DROP_MINE = 0x04,
			FC_BATTLE_DROP_MINE_OK = 0x05,
			FC_BATTLE_MINE_ATTACK = 0x06,
			FC_BATTLE_MINE_ATTACK_OK = 0x07,
			FC_BATTLE_MINE_ATTACK_FIND = 0x08,
			FC_BATTLE_MINE_ATTACK_FIND_OK = 0x09,
			FC_BATTLE_REQUEST_PK = 0x0A,
			FC_BATTLE_REQUEST_PK_OK = 0x0B,
			FC_BATTLE_CANCEL_PK = 0x0C,
			FC_BATTLE_REQUEST_P2P_PK = 0x0D,
			FC_BATTLE_REQUEST_P2P_PK_OK = 0x0E,
			FC_BATTLE_ACCEPT_REQUEST_P2P_PK = 0x0F,
			FC_BATTLE_ACCEPT_REQUEST_P2P_PK_OK = 0x10,
			FC_BATTLE_REJECT_REQUEST_P2P_PK = 0x11,
			FC_BATTLE_REJECT_REQUEST_P2P_PK_OK = 0x12,
			FC_BATTLE_SURRENDER_P2P_PK = 0x13,
			FC_BATTLE_SURRENDER_P2P_PK_OK = 0x14,
			FC_BATTLE_ACCEPT_SURRENDER_P2P_PK = 0x15,
			FC_BATTLE_REJECT_SURRENDER_P2P_PK = 0x16,
			FC_BATTLE_REJECT_SURRENDER_P2P_PK_OK = 0x17,
			FC_BATTLE_END_P2P_PK = 0x18,
			FC_BATTLE_ATTACK_EXPLODE_ITEM = 0x19,
			FC_BATTLE_ATTACK_HIDE_ITEM = 0x1A,
			FC_BATTLE_ATTACK_EXPLODE_ITEM_W_KIND = 0x1B,
			FC_BATTLE_ATTACK_HIDE_ITEM_W_KIND = 0x1C,
			FC_BATTLE_TOGGLE_SHIELD = 0x1D,
			FC_BATTLE_TOGGLE_SHIELD_RESULT = 0x1E,
			FC_BATTLE_DROP_DUMMY = 0x1F,
			FC_BATTLE_DROP_DUMMY_OK = 0x20,
			FC_BATTLE_DROP_FIXER = 0x21,
			FC_BATTLE_DROP_FIXER_OK = 0x22,
			FC_BATTLE_PRI_BULLET_RELOADED = 0x23,
			FC_BATTLE_SEC_BULLET_RELOADED = 0x24,
			FC_BATTLE_SHIELD_DAMAGE = 0x25,
			FC_BATTLE_TOGGLE_DECOY = 0x26,
			FC_BATTLE_TOGGLE_DECOY_OK = 0x27,
			FC_BATTLE_SHOW_DAMAGE = 0x28,
			FC_BATTLE_ATTACK_EVASION = 0x29,
			FC_BATTLE_ATTACK_EVASION_OK = 0x2A,
			FC_BATTLE_DELETE_DUMMY_OK = 0x30,
			FC_BATTLE_EXPLODE_DUMMY_OK = 0x31,
			FC_BATTLE_MONSTER_BARRIER_USING = 0x32,
			FC_BATTLE_MONSTER_BARRIER_USE = 0x33,
		};
	};

	template<> struct T1<T0::enum_t::FP_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			FP_CONNECT = 0x00,
			FP_CONNECT_OK = 0x01,
			FP_CONNECT_CLOSE = 0x02,
			FP_CONNECT_ALIVE = 0x03,
			FP_CONNECT_AUTH_USER = 0x04,
			FP_CONNECT_AUTH_USER_OK = 0x05,
			FP_CONNECT_FIELD_CONNECT = 0x06,
			FP_CONNECT_FIELD_CONNECT_OK = 0x07,
			FP_CONNECT_NOTIFY_CLOSE = 0x08,
			FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE = 0x09,
			FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE_OK = 0x0A,
			FP_CONNECT_PREPARE_SHUTDOWN = 0x0B,
			FP_CONNECT_UPDATE_DBSERVER_GROUP = 0x10,
			FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT = 0x11,
			FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT_OK = 0x12,
			FP_ADMIN_RELOAD_WORLDRANKING = 0x13,
			FP_ADMIN_RELOAD_INFLUENCERATE = 0x14,
			FP_AUTHENTICATION_SHUTDOWN = 0x15,
		};
	};

	template<> struct T1<T0::enum_t::IP_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			IP_CONNECT = 0x00,
			IP_CONNECT_OK = 0x01,
			IP_CONNECT_CLOSE = 0x02,
			IP_CONNECT_ALIVE = 0x03,
			IP_CONNECT_IM_CONNECT = 0x04,
			IP_CONNECT_IM_CONNECT_OK = 0x05,
			IP_GET_SERVER_GROUP_INFO = 0x06,
			IP_GET_SERVER_GROUP_INFO_ACK = 0x07,
			IP_ADMIN_PETITION_SET_PERIOD = 0x08,
			IP_ADMIN_RELOAD_ADMIN_NOTICE_SYSTEM = 0x09,
			IP_AUTHENTICATION_SHUTDOWN = 0x0A,
			IP_SELECTIVE_SHUTDOWN_NOTICE = 0x0B,
		};
	};

	template<> struct T1<T0::enum_t::FI_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			FI_CONNECT = 0x00,
			FI_CONNECT_OK = 0x01,
			FI_CONNECT_CLOSE = 0x02,
			FI_CONNECT_ALIVE = 0x03,
			FI_NOTIFY_FIELDSERVER_IP = 0x04,
			FI_NOTIFY_GAMEEND = 0x05,
			FI_CONNECT_NOTIFY_DEAD = 0x07,
			FI_GET_FIELD_USER_COUNTS = 0x08,
			FI_GET_FIELD_USER_COUNTS_ACK = 0x09,
			FI_CONNECT_NOTIFY_GAMESTART = 0x0A,
			FI_CONNECT_NOTIFY_DEAD_GAMESTART = 0x0B,
			FI_CONNECT_PREPARE_SHUTDOWN = 0x10,
		};
	};

	template<> struct T1<T0::enum_t::IC_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			IC_CONNECT = 0x00,
			IC_CONNECT_OK = 0x01,
			IC_CONNECT_CLOSE = 0x02,
			IC_CONNECT_ALIVE = 0x03,
			IC_CONNECT_LOGIN = 0x04,
			IC_CONNECT_LOGIN_OK = 0x05,
			IC_CONNECT_FM_TO_IM_OK = 0x06,
		};
	};

	template<> struct T1<T0::enum_t::PM_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			PM_CONNECT = 0x00,
			PM_CONNECT_OK = 0x01,
			PM_CONNECT_CLOSE = 0x02,
			PM_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::FM_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			FM_CONNECT = 0x00,
			FM_CONNECT_OK = 0x01,
			FM_CONNECT_CLOSE = 0x02,
			FM_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::LM_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			LM_CONNECT = 0x00,
			LM_CONNECT_OK = 0x01,
			LM_CONNECT_CLOSE = 0x02,
			LM_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::IM_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			IM_CONNECT = 0x00,
			IM_CONNECT_OK = 0x01,
			IM_CONNECT_CLOSE = 0x02,
			IM_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::NM_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			NM_CONNECT = 0x00,
			NM_CONNECT_OK = 0x01,
			NM_CONNECT_CLOSE = 0x02,
			NM_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::PL_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			PL_CONNECT = 0x00,
			PL_CONNECT_OK = 0x01,
			PL_CONNECT_CLOSE = 0x02,
			PL_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::IL_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			IL_CONNECT = 0x00,
			IL_CONNECT_OK = 0x01,
			IL_CONNECT_CLOSE = 0x02,
			IL_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::FL_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			FL_CONNECT = 0x00,
			FL_CONNECT_OK = 0x01,
			FL_CONNECT_CLOSE = 0x02,
			FL_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::NL_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			NL_CONNECT = 0x00,
			NL_CONNECT_OK = 0x01,
			NL_CONNECT_CLOSE = 0x02,
			NL_CONNECT_ALIVE = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::MF_TO_AF>
	{
		enum class enum_t : unsigned char
		{
			FtoA_MFSINFO = 0x00,
			FtoA_MFSINFO_OK = 0x01,
			FtoA_ALIVE = 0x02,
			FtoA_AUTH_CHARACTER = 0x03,
			FtoA_AUTH_CHARACTER_OK = 0x04,
			FtoA_ARENA_STATE_CHANGE = 0x05,
			FtoA_ARENA_STATE_CHANGE_OK = 0x06,
			FtoA_ARENA_TEAM_MATCHING = 0x07,
			FtoA_ARENA_TEAM_MATCHING_OK = 0x08,
			FtoA_ARENA_SERVER_PAY = 0x09,
			FtoA_ARENA_CHARACTER_PAY = 0x0A,
			FtoA_ARENA_CHARACTER_DISCONNECT = 0x0B,
			FtoA_ARENA_CHARACTERARENAINFO_UPDATA = 0x0C,
			FtoA_ARENA_CHARACTER_RESET_RELOAD = 0x0D,
			FtoA_INFINITY_IMPUTE_LIST = 0x30,
			FtoA_INFINITY_START = 0x31,
			FtoA_INFINITY_START_OK = 0x32,
			FtoA_INFINITY_IMPUTE = 0x33,
			FtoA_INFINITY_UPDATE_ALL_ITEM_COUNT = 0x34,
			FtoA_INFINITY_INSERT_ITEM_HEADER = 0x35,
			FtoA_INFINITY_INSERT_ITEM = 0x36,
			FtoA_INFINITY_INSERT_ITEM_DONE = 0x37,
			FtoA_INFINITY_UPDATE_ITEM_HEADER = 0x38,
			FtoA_INFINITY_UPDATE_ITEM = 0x39,
			FtoA_INFINITY_UPDATE_ITEM_DONE = 0x3A,
			FtoA_INFINITY_DELETE_ITEM = 0x3B,
			FtoA_INFINITY_UPDATE_USER_INFO = 0x3C,
			FtoA_INFINITY_READY_FINISH_MAINSVR_START = 0x3D,
			FtoA_INFINITY_LOG = 0x3E,
			FtoA_USING_TIME_LIMIT_ITEM = 0x3F,
			FtoA_INFINITY_STATE_CHANGE = 0x40,
			FtoA_INFINITY_START_CHECK = 0x41,
			FtoA_INFINITY_START_CHECK_ACK = 0x42,
			FtoA_UPDATE_ITEM_NOTI = 0x43,
			FtoA_INFINITY_UPDATE_USER_MAP_INFO = 0x44,
			FtoA_LOG_INFINITYUSER_GET_TENDERITEM = 0x45,
			FtoA_INFINITY_COME_BACK_PREWORK = 0x46,
			FtoA_INFINITY_UPDATE_ITEM_PET = 0x47,
			FtoA_INFINITY_COME_BACK_POSTWORK = 0x48,
		};
	};

	template<> struct T1<T0::enum_t::PP_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			PP_CONNECT = 0x00,
			PP_CONNECT_OK = 0x01,
			PP_CONNECT_DO_CLOSE = 0x02,
		};
	};

	template<> struct T1<T0::enum_t::FC_ADMIN>
	{
		enum class enum_t : unsigned char
		{
			FC_ADMIN_GET_SERVER_STAT = 0x00,
			FC_ADMIN_GET_SERVER_STAT_OK = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::FC_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			FC_CONNECT = 0x00,
			FC_CONNECT_OK = 0x01,
			FC_CONNECT_CLOSE = 0x02,
			FC_CONNECT_ALIVE = 0x03,
			FC_CONNECT_LOGIN = 0x04,
			FC_CONNECT_LOGIN_OK = 0x05,
			FC_CONNECT_SYNC_TIME = 0x06,
			FC_CONNECT_NOTIFY_SERVER_SHUTDOWN = 0x07,
			FC_CONNECT_NETWORK_CHECK = 0x09,
			FC_CONNECT_NETWORK_CHECK_OK = 0x0A,
			FC_CONNECT_ARENASERVER_INFO = 0x0B,
			FC_CONNECT_ARENASERVER_LOGIN = 0x0C,
			FC_CONNECT_ARENASERVER_LOGIN_OK = 0x0D,
			FC_CONNECT_ARENASERVER_SSERVER_GROUP_FOR_CLIENT = 0x0E,
			FC_CONNECT_ARENASERVER_TO_IMSERVER = 0x0F,
			FC_CONNECT_SHUTDOWNMINS_USER_ALTER = 0x10,
			FC_CONNECT_SHUTDOWNMINS_USER_ENDGAME = 0x11,
		};
	};

	template<> struct T1<T0::enum_t::FC_CHARACTER>
	{
		enum class enum_t : unsigned char
		{
			FC_CHARACTER_CREATE = 0x00,
			FC_CHARACTER_CREATE_OK = 0x01,
			FC_CHARACTER_DELETE = 0x02,
			FC_CHARACTER_DELETE_OK = 0x03,
			FC_CHARACTER_GET_CHARACTER = 0x04,
			FC_CHARACTER_GET_CHARACTER_OK = 0x05,
			FC_CHARACTER_GAMESTART = 0x06,
			FC_CHARACTER_GAMESTART_OK = 0x07,
			FC_CHARACTER_CONNECT_GAMESTART = 0x08,
			FC_CHARACTER_CONNECT_GAMESTART_OK = 0x09,
			FC_CHARACTER_GAMEEND = 0x0A,
			FC_CHARACTER_GAMEEND_OK = 0x0B,
			FC_CHARACTER_REPAIR = 0x0C,
			FC_CHARACTER_REPAIR_OK = 0x0D,
			FC_CHARACTER_REPAIR_ERR = 0x0E,
			FC_CHARACTER_DOCKING = 0x0F,
			FC_CHARACTER_UNDOCKING = 0x10,
			FC_CHARACTER_DOCKING_ERR = 0x11,
			FC_CHARACTER_GET_OTHER_INFO = 0x12,
			FC_CHARACTER_GET_OTHER_INFO_OK = 0x13,
			FC_CHARACTER_GET_MONSTER_INFO_OK = 0x14,
			FC_CHARACTER_CHANGE_UNITKIND = 0x15,
			FC_CHARACTER_CHANGE_STAT = 0x16,
			FC_CHARACTER_CHANGE_TOTALGEAR_STAT = 0x17,
			FC_CHARACTER_CHANGE_FRIEND = 0x18,
			FC_CHARACTER_CHANGE_EXP = 0x19,
			FC_CHARACTER_CHANGE_BODYCONDITION = 0x1A,
			FC_CHARACTER_CHANGE_BODYCONDITION_SKILL = 0x1B,
			FC_CHARACTER_CHANGE_INFLUENCE_TYPE = 0x1C,
			FC_CHARACTER_CHANGE_STATUS = 0x1D,
			FC_CHARACTER_CHANGE_PKPOINT = 0x1E,
			FC_CHARACTER_CHANGE_CURRENTHPDPSPEP = 0x1F,
			FC_CHARACTER_CHANGE_CURRENTHP = 0x20,
			FC_CHARACTER_CHANGE_CURRENTDP = 0x21,
			FC_CHARACTER_CHANGE_CURRENTSP = 0x22,
			FC_CHARACTER_CHANGE_CURRENTEP = 0x23,
			FC_CHARACTER_CHANGE_MAPNAME = 0x24,
			FC_CHARACTER_CHANGE_PETINFO = 0x25,
			FC_CHARACTER_CHANGE_POSITION = 0x26,
			FC_CHARACTER_CHANGE_LEVEL = 0x27,
			FC_CHARACTER_USE_BONUSSTAT = 0x28,
			FC_CHARACTER_DEAD_NOTIFY = 0x29,
			FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER = 0x2A,
			FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER_OK = 0x2B,
			FC_CHARACTER_APPLY_COLLISION_DAMAGE = 0x2C,
			FC_CHARACTER_GET_OTHER_MOVE = 0x2D,
			FC_CHARACTER_DELETE_OTHER_INFO = 0x2E,
			FC_CHARACTER_DEAD_GAMESTART = 0x2F,
			FC_CHARACTER_OTHER_REVIVED = 0x30,
			FC_CHARACTER_GET_OTHER_RENDER_INFO = 0x31,
			FC_CHARACTER_GET_OTHER_RENDER_INFO_OK = 0x32,
			FC_CHARACTER_CHANGE_BODYCONDITION_ALL = 0x33,
			FC_CHARACTER_CHANGE_PROPENSITY = 0x34,
			FC_CHARACTER_CHANGE_HPDPSPEP = 0x35,
			FC_CHARACTER_SHOW_EFFECT = 0x36,
			FC_CHARACTER_SHOW_EFFECT_OK = 0x37,
			FC_CHARACTER_GET_OTHER_PARAMFACTOR = 0x38,
			FC_CHARACTER_GET_OTHER_PARAMFACTOR_OK = 0x39,
			FC_CHARACTER_SEND_PARAMFACTOR_IN_RANGE = 0x3A,
			FC_CHARACTER_GET_OTHER_SKILL_INFO = 0x3B,
			FC_CHARACTER_GET_OTHER_SKILL_INFO_OK = 0x3C,
			FC_CHARACTER_SPEED_HACK_USER = 0x3D,
			FC_CHARACTER_CHANGE_CHARACTER_MENT = 0x3E,
			FC_CHARACTER_GET_CASH_MONEY_COUNT = 0x3F,
			FC_CHARACTER_GET_CASH_MONEY_COUNT_OK = 0x40,
			FC_CHARACTER_CASH_PREMIUM_CARD_INFO = 0x41,
			FC_CHARACTER_TUTORIAL_SKIP = 0x42,
			FC_CHARACTER_TUTORIAL_SKIP_OK = 0x43,
			FC_CHARACTER_CHANGE_CHARACTER_MODE = 0x50,
			FC_CHARACTER_CHANGE_CHARACTER_MODE_OK = 0x51,
			FC_CHARACTER_FALLING_BY_FUEL_ALLIN = 0x52,
			FC_CHARACTER_WARP_BY_AGEAR_LANDING_FUEL_ALLIN = 0x53,
			FC_CHARACTER_GET_REAL_WEAPON_INFO = 0x60,
			FC_CHARACTER_GET_REAL_WEAPON_INFO_OK = 0x61,
			FC_CHARACTER_GET_REAL_ENGINE_INFO = 0x62,
			FC_CHARACTER_GET_REAL_ENGINE_INFO_OK = 0x63,
			FC_CHARACTER_GET_REAL_TOTAL_WEIGHT = 0x64,
			FC_CHARACTER_GET_REAL_TOTAL_WEIGHT_OK = 0x65,
			FC_CHARACTER_MEMORY_HACK_USER = 0x66,
			FC_CHARACTER_USE_BONUSSTAT_OK = 0x67,
			FC_CHARACTER_UPDATE_SUBLEADER = 0x68,
			FC_CHARACTER_OBSERVER_START = 0x69,
			FC_CHARACTER_UPDATE_SUBLEADER_OK = 0x6A,
			FC_CHARACTER_OBSERVER_START_OK = 0x70,
			FC_CHARACTER_OBSERVER_END = 0x71,
			FC_CHARACTER_OBSERVER_END_OK = 0x72,
			FC_CHARACTER_OBSERVER_INFO = 0x73,
			FC_CHARACTER_OBSERVER_REG = 0x74,
			FC_CHARACTER_SHOW_MAP_EFFECT = 0x75,
			FC_CHARACTER_SHOW_MAP_EFFECT_OK = 0x76,
			FC_CHARACTER_PAY_WARPOINT = 0x77,
			FC_CHARACTER_WATCH_INFO = 0x78,
			FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER = 0x79,
			FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER_OK = 0x7A,
			FC_CHARACTER_GAMESTART_FROM_ARENA_TO_MAINSERVER = 0x7B,
			FC_CHARACTER_GET_USER_INFO = 0x7C,
			FC_CHARACTER_GET_USER_INFO_OK = 0x7D,
			FC_CHARACTER_CHANGE_INFO_OPTION_SECRET = 0x7E,
			FC_CHARACTER_CHANGE_INFO_OPTION_SECRET_OK = 0x7F,
			FC_CHARACTER_CHANGE_NICKNAME = 0x80,
			FC_CHARACTER_CHANGE_NICKNAME_OK = 0x81,
			FC_CHARACTER_CHANGE_START_CITY_MAPINDEX = 0x82,
			FC_CHARACTER_CHANGE_START_CITY_MAPINDEX_OK = 0x83,
			FC_CHARACTER_CHANGE_ADDED_INVENTORY_COUNT = 0x84,
			FC_CHARACTER_DEBUFF_DOT_INFO = 0x90,
			FC_CHARACTER_DEBUFF_DOT_INFO_OK = 0x91,
			FC_CHARACTER_DEBUFF_DOT_APPLYING = 0x92,
			FC_CHARACTER_DEBUFF_DOT_RELEASE = 0x93,
			FC_CHARACTER_GET_USER_ITEM_INFO = 0x94,
			FC_CHARACTER_GET_USER_ITEM_INFO_OK = 0x95,
			FC_CHARACTER_GET_USER_ITEM_INFO_OK_DONE = 0x96,
			FC_CHARACTER_GET_USER_ITEM_INFO_SECRET = 0x97,
			FC_CHARACTER_GET_USER_ITEM_INFO_SECRET_OK = 0x98,
			FC_CHARACTER_KILLCOUNT = 0x99,
			FC_CHARACTER_RESTCOUNT = 0x9A,
			FC_CHARACTER_BONUS_EXP_RATE = 0x9B,
		};
	};

	template<> struct T1<T0::enum_t::FC_CHAT>
	{
		enum class enum_t : unsigned char
		{
			FC_CHAT_MAP = 0x00,
			FC_CHAT_REGION = 0x01,
			FC_CHAT_CASH_ALL = 0x02,
			FC_CHAT_ARENA = 0x03,
			FC_CHAT_CNC = 0x04,
			FC_CHAT_ALL_INFLUENCE = 0x10,
			FC_CHAT_OUTPOST_GUILD = 0x11,
			FC_CHAT_INFINITY = 0x12,
			FC_CHAT_LETTER_REQUEST_TITLE = 0x21,
			FC_CHAT_LETTER_REQUEST_TITLE_OK_HEADER = 0x22,
			FC_CHAT_LETTER_REQUEST_TITLE_OK = 0x23,
			FC_CHAT_LETTER_REQUEST_TITLE_OK_DONE = 0x24,
			FC_CHAT_LETTER_READ = 0x25,
			FC_CHAT_LETTER_READ_OK = 0x26,
			FC_CHAT_LETTER_DELETE = 0x27,
			FC_CHAT_LETTER_DELETE_OK = 0x28,
			FC_CHAT_LETTER_SEND = 0x29,
			FC_CHAT_LETTER_SEND_OK = 0x2A,
			FC_CHAT_LETTER_RECEIVE = 0x2B,
			FC_CHAT_ALLLETTER_REQUEST_TITLE = 0x31,
			FC_CHAT_ALLLETTER_REQUEST_TITLE_OK_HEADER = 0x32,
			FC_CHAT_ALLLETTER_REQUEST_TITLE_OK = 0x33,
			FC_CHAT_ALLLETTER_REQUEST_TITLE_OK_DONE = 0x34,
			FC_CHAT_ALLLETTER_READ = 0x35,
			FC_CHAT_ALLLETTER_READ_OK = 0x36,
			FC_CHAT_ALLLETTER_DELETE = 0x37,
			FC_CHAT_ALLLETTER_DELETE_OK = 0x38,
			FC_CHAT_ALLLETTER_SEND = 0x39,
			FC_CHAT_ALLLETTER_SEND_OK = 0x3A,
			FC_CHAT_ALLLETTER_RECEIVE = 0x3B,
		};
	};

	template<> struct T1<T0::enum_t::FC_CITY>
	{
		enum class enum_t : unsigned char
		{
			FC_CITY_GET_BUILDING_LIST = 0x00,
			FC_CITY_GET_BUILDING_LIST_OK = 0x01,
			FC_CITY_GET_WARP_TARGET_MAP_LIST = 0x02,
			FC_CITY_GET_WARP_TARGET_MAP_LIST_OK = 0x03,
			FC_CITY_REQUEST_ENTER_BUILDING = 0x04,
			FC_CITY_REQUEST_ENTER_BUILDING_OK = 0x05,
			FC_CITY_REQUEST_WARP = 0x06,
			FC_CITY_CHECK_WARP_STATE = 0x07,
			FC_CITY_CHECK_WARP_STATE_OK = 0x08,
			FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST = 0x10,
			FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_HEADER = 0x11,
			FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK = 0x12,
			FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_DONE = 0x13,
			FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO = 0x14,
			FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK = 0x15,
			FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK_GUILDMARK = 0x16,
			FC_CITY_POLL_REG_LEADER_CANDIDATE = 0x17,
			FC_CITY_POLL_REG_LEADER_CANDIDATE_OK = 0x18,
			FC_CITY_POLL_DELETE_LEADER_CANDIDATE = 0x19,
			FC_CITY_POLL_DELETE_LEADER_CANDIDATE_OK = 0x1A,
			FC_CITY_POLL_VOTE = 0x1B,
			FC_CITY_POLL_VOTE_OK = 0x1C,
			FC_CITY_POLL_REQUEST_POLL_DATE = 0x1D,
			FC_CITY_POLL_REQUEST_POLL_DATE_OK = 0x1E,
			FC_CITY_POLL_LEADER_ELECTION_INFO = 0x1F,
			FC_CITY_WARINFO_INFLUENCE = 0x20,
			FC_CITY_WARINFO_INFLUENCE_OK = 0x21,
			FC_CITY_WARINFO_OUTPOST = 0x22,
			FC_CITY_WARINFO_OUTPOST_OK = 0x23,
		};
	};

	template<> struct T1<T0::enum_t::FC_CLIENT_REPORT>
	{
		enum class enum_t : unsigned char
		{
			FC_CLIENT_REPORT = 0x00,
		};
	};

	template<> struct T1<T0::enum_t::FC_EVENT>
	{
		enum class enum_t : unsigned char
		{
			FC_EVENT_WARP = 0x00,
			FC_EVENT_WARP_SAME_MAP = 0x01,
			FC_EVENT_WARP_SAME_MAP_DONE = 0x02,
			FC_EVENT_WARP_SAME_FIELD_SERVER = 0x03,
			FC_EVENT_WARP_SAME_FIELD_SERVER_DONE = 0x04,
			FC_EVENT_OTHER_WARPED = 0x05,
			FC_EVENT_WARP_CONNECT = 0x06,
			FC_EVENT_WARP_CONNECT_OK = 0x07,
			FC_EVENT_ENTER_BUILDING = 0x08,
			FC_EVENT_ENTER_BUILDING_OK = 0x09,
			FC_EVENT_LEAVE_BUILDING = 0x0A,
			FC_EVENT_LEAVE_BUILDING_OK = 0x0B,
			FC_EVENT_REQUEST_WARP = 0x0C,
			FC_EVENT_REJECT_WARP = 0x0D,
			FC_EVENT_REQUEST_OBJECT_EVENT = 0x0E,
			FC_EVENT_CHANGE_WEATHER = 0x0F,
			FC_EVENT_SUGGEST_CHANNELS = 0x10,
			FC_EVENT_SELECT_CHANNEL = 0x11,
			FC_EVENT_SELECT_CHANNEL_WITH_PARTY = 0x12,
			FC_EVENT_REQUEST_RACING_WARP = 0x13,
			FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST = 0x14,
			FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST_OK = 0x15,
			FC_EVENT_REQUEST_SHOP_WARP = 0x16,
			FC_EVENT_CHARACTERMODE_ENTER_BUILDING = 0x17,
			FC_EVENT_CALL_WARP_EVENT_REQUEST = 0x20,
			FC_EVENT_CALL_WARP_EVENT_REQUEST_ACK = 0x21,
			FC_EVENT_CLICK_TELEPORT = 0x22,
			FC_EVENT_CLICK_TELEPORT_OK = 0x23,
			FC_EVENT_TELEPORT_BUILDCOMPLETE = 0x24,
			FC_EVENT_TELEPORT_DESTROY = 0x25,
			FC_EVENT_NOTIFY_MSG_GET = 0x30,
			FC_EVENT_NOTIFY_MSG_GET_OK = 0x31,
			FC_EVENT_NOTIFY_MSG_DELETE = 0x32,
			FC_EVENT_COUPON_EVENT_INFO = 0x36,
			FC_EVENT_COUPON_EVENT_USE_COUPON = 0x37,
			FC_EVENT_COUPON_EVENT_USE_COUPON_OK = 0x38,
			FC_EVENT_INFLUENCEMARK = 0x3A,
			FC_EVENT_INFLUENCEMARKEND = 0x3B,
		};
	};

	template<> struct T1<T0::enum_t::FC_GUILD>
	{
		enum class enum_t : unsigned char
		{
			FC_GUILD_GET_MAP_OWNER_INFO = 0x00,
			FC_GUILD_GET_MAP_OWNER_INFO_OK = 0x01,
			FC_GUILD_REQUEST_GUILD_WAR = 0x02,
			FC_GUILD_REQUEST_GUILD_WAR_RESULT = 0x03,
			FC_GUILD_GET_CHALLENGER_GUILD = 0x04,
			FC_GUILD_GET_CHALLENGER_GUILD_OK = 0x05,
			FC_GUILD_GET_WAR_INFO = 0x06,
			FC_GUILD_GET_WAR_INFO_OK = 0x07,
			FC_GUILD_SURRENDER_GUILD_WAR = 0x08,
			FC_GUILD_SUMMON_MEMBER = 0x09,
			FC_GUILD_SUMMON_MEMBER_OK = 0x0A,
			FC_GUILD_DISMEMBER = 0x0B,
		};
	};

	template<> struct T1<T0::enum_t::FC_INFO>
	{
		enum class enum_t : unsigned char
		{
			FC_INFO_GET_MONSTER_INFO = 0x00,
			FC_INFO_GET_MONSTER_INFO_OK = 0x01,
			FC_INFO_GET_MAPOBJECT_INFO = 0x02,
			FC_INFO_GET_MAPOBJECT_INFO_OK = 0x03,
			FC_INFO_GET_ITEM_INFO = 0x04,
			FC_INFO_GET_ITEM_INFO_OK = 0x05,
			FC_INFO_GET_RARE_ITEM_INFO = 0x06,
			FC_INFO_GET_RARE_ITEM_INFO_OK = 0x07,
			FC_INFO_GET_BUILDINGNPC_INFO = 0x08,
			FC_INFO_GET_BUILDINGNPC_INFO_OK = 0x09,
			FC_INFO_GET_SIMPLE_ITEM_INFO = 0x0A,
			FC_INFO_GET_SIMPLE_ITEM_INFO_OK = 0x0B,
			FC_INFO_GET_ENCHANT_COST = 0x0C,
			FC_INFO_GET_ENCHANT_COST_OK = 0x0D,
			FC_INFO_GET_CURRENT_MAP_INFO = 0x10,
			FC_INFO_GET_CURRENT_MAP_INFO_OK = 0x11,
			FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_OK = 0x12,
			FC_INFO_GET_GAME_EVENT_INFO_OK = 0x13,
			FC_INFO_GET_SERVER_DATE_TIME = 0x14,
			FC_INFO_GET_SERVER_DATE_TIME_OK = 0x15,
			FC_INFO_GET_HAPPY_HOUR_EVENT_INFO = 0x16,
			FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_BY_LEVEL = 0x17,
			FC_INFO_CHECK_RESOBJ_CHECKSUM = 0x20,
			FC_INFO_NOTICE_REQUEST = 0x30,
			FC_INFO_NOTICE_REQUEST_OK = 0x31,
			FC_INFO_NOTICE_REG = 0x32,
			FC_INFO_NOTICE_REG_OK = 0x33,
			FC_INFO_NOTICE_MODIFY = 0x34,
			FC_INFO_NOTICE_MODIFY_OK = 0x35,
			FC_INFO_EXPEDIENCYFUND_REQUEST = 0x36,
			FC_INFO_EXPEDIENCYFUND_REQUEST_OK = 0x37,
			FC_INFO_EXPEDIENCYFUND_PAYBACK = 0x38,
			FC_INFO_EXPEDIENCYFUND_PAYBACK_OK = 0x39,
			FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD = 0x40,
			FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD_OK = 0x41,
			FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD = 0x42,
			FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD_OK = 0x43,
			FC_INFO_SECONDARYPASSWORD_LOCK = 0x44,
			FC_INFO_SECONDARYPASSWORD_LOCK_OK = 0x45,
			FC_INFO_GET_GUILDMARK = 0x46,
			FC_INFO_GET_GUILDMARK_OK = 0x47,
			FC_INFO_MSWARINFO_DISPLAY = 0x48,
			FC_INFO_MSWARINFO_DISPLAY_OPTION = 0x49,
			FC_INFO_MSWARINFO_DISPLAY_OPTION_OK = 0x4A,
			FC_INFO_MSWARINFO_RESULT = 0x4B,
			FC_INFO_MSWARINFO_RESULT_OK = 0x4C,
			FC_INFO_SPWARINFO_RESULT = 0x4D,
			FC_INFO_SPWARINFO_RESULT_OK_HEADER = 0x4E,
			FC_INFO_SPWARINFO_RESULT_OK = 0x4F,
			FC_INFO_SPWARINFO_RESULT_OK_DONE = 0x50,
			FC_INFO_DECLARATION_MSWAR_INFO = 0x51,
			FC_INFO_DECLARATION_MSWAR_INFO_OK = 0x52,
			FC_INFO_DECLARATION_MSWAR_SET = 0x53,
			FC_INFO_STRATEGICPOINTINFO_DISPLAY_LIST = 0x54,
			FC_INFO_STRATEGICPOINTINFO_DISPLAY = 0x55,
			FC_INFO_WRK_GET_SERVICE_INFO = 0x60,
			FC_INFO_WRK_GET_SERVICE_INFO_OK = 0x61,
			FC_INFO_WRK_GET_SERVICE_INFO_OK_IMAGE = 0x62,
			FC_INFO_WRK_GET_SERVICE_INFO_OK_DONE = 0x63,
			FC_INFO_WRK_GET_RANKER_LIST = 0x64,
			FC_INFO_WRK_GET_LEVEL_RANKER_LIST_OK = 0x65,
			FC_INFO_WRK_GET_FAME_RANKER_LIST_OK = 0x66,
			FC_INFO_WRK_GET_PVP_RANKER_LIST_OK = 0x67,
			FC_INFO_WRK_GET_SELF_RANKING = 0x68,
			FC_INFO_WRK_GET_SELF_RANKING_OK = 0x69,
			FC_INFO_APPLY_RESISTANCE_ITEM = 0x70,
			FC_INFO_APPLY_DESTPARAM = 0x71,
			FC_INFO_APPLY_DESTPARAM_LIST = 0x72,
		};
	};

	template<> struct T1<T0::enum_t::FC_ITEM>
	{
		enum class enum_t : unsigned char
		{
			FC_ITEM_SHOW_ITEM = 0x00,
			FC_ITEM_HIDE_ITEM = 0x01,
			FC_ITEM_GET_ITEM = 0x02,
			FC_ITEM_GET_ITEM_OK = 0x03,
			FC_ITEM_GET_ITEM_FAIL = 0x04,
			FC_ITEM_PUT_ITEM = 0x05,
			FC_ITEM_CHANGE_WINDOW_POSITION = 0x08,
			FC_ITEM_CHANGE_WINDOW_POSITION_OK = 0x09,
			FC_ITEM_UPDATE_WINDOW_ITEM_LIST = 0x0A,
			FC_ITEM_THROW_AWAY_ITEM = 0x0B,
			FC_ITEM_THROW_AWAY_ITEM_OK = 0x0C,
			FC_ITEM_USE_ENERGY = 0x0D,
			FC_ITEM_USE_ENERGY_OK = 0x0E,
			FC_ITEM_USE_ITEM = 0x0F,
			FC_ITEM_USE_ITEM_OK = 0x10,
			FC_ITEM_DELETE_ITEM_ADMIN = 0x11,
			FC_ITEM_RELOAD_ITEM_INFO = 0x12,
			FC_ITEM_USE_ENCHANT = 0x13,
			FC_ITEM_USE_ENCHANT_OK = 0x14,
			FC_ITEM_PUT_ENCHANT_HEADER = 0x15,
			FC_ITEM_PUT_ENCHANT = 0x16,
			FC_ITEM_PUT_ENCHANT_DONE = 0x17,
			FC_ITEM_DELETE_ALL_ENCHANT = 0x18,
			FC_ITEM_DELETE_DROP_ITEM = 0x19,
			FC_ITEM_UPDATE_ITEM_POS = 0x1A,
			FC_ITEM_MIX_ITEMS = 0x20,
			FC_ITEM_MIX_ITEMS_RESULT = 0x21,
			FC_ITEM_USE_CARDITEM_GUILDSUMMON = 0x22,
			FC_ITEM_USE_CARDITEM_GUILDSUMMON_NOTIFY = 0x23,
			FC_ITEM_USE_CARDITEM_RESTORE = 0x24,
			FC_ITEM_USE_CARDITEM_RESTORE_NOTIFY = 0x25,
			FC_ITEM_USE_CARDITEM_GUILD = 0x26,
			FC_ITEM_USE_CARDITEM_GUILD_NOTIFY = 0x27,
			FC_ITEM_USE_CARDITEM_MONSTERSUMMON = 0x28,
			FC_ITEM_USE_CARDITEM_MONSTERSUMMON_NOTIFY = 0x29,
			FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME = 0x2A,
			FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME_NOTIFY = 0x2B,
			FC_ITEM_USE_CARDITEM_SKILLINITIALIZE = 0x2C,
			FC_ITEM_USE_CARDITEM_SKILLINITIALIZE_NOTIFY = 0x2D,
			FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE = 0x2E,
			FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE_NOTIFY = 0x2F,
			FC_ITEM_USE_INFLUENCE_BUFF = 0x30,
			FC_ITEM_USE_INFLUENCE_BUFF_OK = 0x31,
			FC_ITEM_USE_INFLUENCE_GAMEEVENT = 0x32,
			FC_ITEM_USE_INFLUENCE_GAMEEVENT_OK = 0x33,
			FC_ITEM_USE_RANDOMBOX = 0x34,
			FC_ITEM_USE_RANDOMBOX_OK = 0x35,
			FC_ITEM_USE_SKILL_SUPPORT_ITEM = 0x36,
			FC_ITEM_USE_SKILL_SUPPORT_ITEM_OK = 0x37,
			FC_ITEM_USE_RANDOMBOX_OK_DONE = 0x38,
			FC_ITEM_USE_LUCKY_ITEM = 0x39,
			FC_ITEM_USE_LUCKY_ITEM_OK = 0x3A,
			FC_ITEM_USE_LUCKY_ITEM_WIN = 0x3B,
			FC_ITEM_USE_LUCKY_ITEM_WIN_OK = 0x3C,
			FC_ITEM_CHANGED_SHAPEITEMNUM = 0x3D,
			FC_ITEM_CHANGED_EFFECTITEMNUM = 0x3E,
			FC_ITEM_USE_INVOKING_WEAR_ITEM = 0x40,
			FC_ITEM_EXPIRE_TIME_INVOKING_WEAR_ITEM = 0x41,
			FC_ITEM_END_COOLINGTIME_ITEM = 0x42,
			FC_ITEM_END_COOLINGTIME_ITEM_OK = 0x43,
			FC_ITEM_GET_COOLINGTIME_INFO = 0x44,
			FC_ITEM_GET_COOLINGTIME_INFO_OK = 0x45,
			FC_ITEM_USE_INVOKING_WEAR_ITEM_BUFF = 0x46,
			FC_ITEM_UPDATE_TRANSFORMER_OK = 0x47,
			FC_ITEM_HOMEPREMIUM_INFO = 0x48,
			FC_ITEM_PET_HEADER = 0x49,
			FC_ITEM_PET = 0x50,
			FC_ITEM_PET_BASEDATA_OK = 0x51,
			FC_ITEM_PET_SKILLDATA_OK = 0x52,
			FC_ITEM_PET_SOCKETDATA_OK = 0x53,
			FC_ITEM_PET_DONE = 0x54,
			FC_ITEM_DISSOLUTIONITEM = 0x55,
			FC_ITEM_DISSOLUTIONITEM_OK = 0x56,
			FC_ITEM_PET_SET_NAME = 0x57,
			FC_ITEM_PET_SET_NAME_OK = 0x58,
			FC_ITEM_PET_SET_EXP_RATIO = 0x59,
			FC_ITEM_PET_SET_EXP_RATIO_OK = 0x60,
			FC_ITEM_PET_CHANGE_LEVEL = 0x61,
			FC_ITEM_PET_CHANGE_EXP = 0x62,
			FC_ITEM_PET_SET_SOCKET = 0x63,
			FC_ITEM_PET_SET_SOCKET_OK = 0x64,
			FC_ITEM_PET_SET_KIT_SLOT = 0x65,
			FC_ITEM_PET_SET_KIT_SLOT_OK = 0x66,
			FC_ITEM_PET_SET_KIT_AUTOSKILL_SLOT = 0x67,
			FC_ITEM_PET_SET_KIT_AUTOSKILL_SLOT_OK = 0x68,
			FC_ITEM_USE_PET_SOCKET_ITEM = 0x69,
			FC_ITEM_USE_PET_SOCKET_ITEM_OK = 0x6a,
			FC_ITEM_CANCEL_PET_SOCKET_ITEM = 0x6b,
			FC_ITEM_CANCEL_PET_SOCKET_ITEM_OK = 0x6c,
			FC_ITEM_NOTIFY_WINDOW_POSITION = 0x6d,
			FC_ITEM_USE_CARDITEM_CHANGE_NATION_REQUEST = 0x70,
			FC_ITEM_USE_CARDITEM_CHANGE_NATION_CONFIRM = 0x71,
		};
	};

	template<> struct T1<T0::enum_t::FC_MONSTER>
	{
		enum class enum_t : unsigned char
		{
			FC_MONSTER_CREATED = 0x01,
			FC_MONSTER_MOVE_OK = 0x02,
			FC_MONSTER_HIDE = 0x03,
			FC_MONSTER_SHOW = 0x04,
			FC_MONSTER_CHANGE_HP = 0x05,
			FC_MONSTER_CHANGE_BODYCONDITION = 0x06,
			FC_MONSTER_SKILL_USE_SKILL = 0x07,
			FC_MONSTER_SKILL_END_SKILL = 0x08,
			FC_MONSTER_SUMMON_MONSTER = 0x09,
			FC_MONSTER_TUTORIAL_MONSTER_DEAD_NOTIFY = 0x0A,
			FC_MONSTER_TUTORIAL_MONSTER_DELETE = 0x0B,
			FC_MONSTER_HPTALK = 0x0C,
			FC_MONSTER_SKILL = 0x0D,
			FC_MONSTER_CREATED_ALIVE_FOR_GAMECLEAR = 0x0E,
			FC_MONSTER_SKILL_CANCEL = 0x0F,
			FC_MONSTER_CHANGE_INDEX = 0x10,
			FC_MONSTER_CINEMA_DELETE_NOTIFY = 0x11,
		};
	};

	template<> struct T1<T0::enum_t::FC_MOVE>
	{
		enum class enum_t : unsigned char
		{
			FC_MOVE = 0x00,
			FC_MOVE_OK = 0x01,
			FC_MOVE_LOCKON = 0x02,
			FC_MOVE_LOCKON_OK = 0x03,
			FC_MOVE_UNLOCKON = 0x04,
			FC_MOVE_UNLOCKON_OK = 0x05,
			FC_MOVE_LANDING = 0x06,
			FC_MOVE_LANDING_OK = 0x07,
			FC_MOVE_LANDING_DONE = 0x08,
			FC_MOVE_TAKEOFF = 0x09,
			FC_MOVE_TAKEOFF_OK = 0x0A,
			FC_MISSILE_MOVE_OK = 0x0B,
			FC_MOVE_TARGET = 0x0C,
			FC_MOVE_WEAPON_VEL = 0x0D,
			FC_MOVE_WEAPON_VEL_OK = 0x0E,
			FC_MOVE_ROLLING = 0x10,
			FC_MOVE_ROLLING_OK = 0x11,
			FC_MOVE_HACKSHIELD_GuidReqMsg = 0xA0,
			FC_MOVE_HACKSHIELD_GuidAckMsg = 0xA1,
			FC_MOVE_HACKSHIELD_CRCReqMsg = 0xA2,
			FC_MOVE_HACKSHIELD_CRCAckMsg = 0xA3,
			FC_MOVE_HACKSHIELD_HACKING_CLIENT = 0xA4,
		};
	};

	template<> struct T1<T0::enum_t::FC_PARTY>
	{
		enum class enum_t : unsigned char
		{
			FC_PARTY_CREATE_OK = 0x00,
			FC_PARTY_REQUEST_INVITE = 0x01,
			FC_PARTY_REQUEST_INVITE_QUESTION = 0x02,
			FC_PARTY_ACCEPT_INVITE = 0x03,
			FC_PARTY_REJECT_INVITE = 0x04,
			FC_PARTY_REJECT_INVITE_OK = 0x05,
			FC_PARTY_GET_MEMBER = 0x06,
			FC_PARTY_PUT_MEMBER = 0x07,
			FC_PARTY_GET_ALL_MEMBER = 0x08,
			FC_PARTY_PUT_ALL_MEMBER = 0x09,
			FC_PARTY_UPDATE_MEMBER_INFO_ALL = 0x0A,
			FC_PARTY_UPDATE_MEMBER_INFO_LEVEL = 0x0B,
			FC_PARTY_UPDATE_MEMBER_INFO_HP = 0x0C,
			FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_HP = 0x0D,
			FC_PARTY_UPDATE_MEMBER_INFO_DP = 0x0E,
			FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_DP = 0x0F,
			FC_PARTY_UPDATE_MEMBER_INFO_SP = 0x10,
			FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_SP = 0x11,
			FC_PARTY_UPDATE_MEMBER_INFO_EP = 0x12,
			FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_EP = 0x13,
			FC_PARTY_UPDATE_MEMBER_INFO_BODYCONDITION = 0x14,
			FC_PARTY_REQUEST_PARTY_WARP = 0x15,
			FC_PARTY_REQUEST_PARTY_WARP_WITH_MAP_NAME = 0x16,
			FC_PARTY_REQUEST_PARTY_OBJECT_EVENT = 0x17,
			FC_PARTY_GET_OTHER_MOVE = 0x18,
			FC_PARTY_BATTLE_START = 0x19,
			FC_PARTY_BATTLE_END = 0x20,
			FC_PARTY_PUT_ITEM_OTHER = 0x21,
			FC_PARTY_AUTO_CREATED = 0x30,
			FC_PARTY_AUTO_CREATED_THE_ARENA = 0x31,
			FC_PARTY_REQUEST_INVITE_QUESTION_THE_ARENA = 0x32,
		};
	};

	template<> struct T1<T0::enum_t::FC_QUEST>
	{
		enum class enum_t : unsigned char
		{
			FC_QUEST_REQUEST_START = 0x00,
			FC_QUEST_REQUEST_START_RESULT = 0x01,
			FC_QUEST_ACCEPT_QUEST = 0x02,
			FC_QUEST_CANCEL_QUEST = 0x03,
			FC_QUEST_REQUEST_SUCCESS = 0x04,
			FC_QUEST_REQUEST_SUCCESS_RESULT = 0x05,
			FC_QUEST_PUT_ALL_QUEST_HEADER = 0x06,
			FC_QUEST_PUT_ALL_QUEST = 0x07,
			FC_QUEST_PUT_ALL_QUEST_DONE = 0x08,
			FC_QUEST_DISCARD_QUEST = 0x09,
			FC_QUEST_DISCARD_QUEST_OK = 0x0A,
			FC_QUEST_MOVE_QUEST_MAP = 0x0B,
			FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT_HEADER = 0x0C,
			FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT = 0x0D,
			FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT_DONE = 0x0E,
			FC_QUEST_UPDATE_MONSTER_COUNT = 0x0F,
			FC_QUEST_REQUEST_SUCCESS_CHECK = 0x10,
			FC_QUEST_REQUEST_SUCCESS_CHECK_RESULT = 0x11,
			FC_QUEST_REQUEST_PARTY_WARP = 0x12,
			FC_QUEST_REQUEST_PARTY_WARP_ACK = 0x13,
			FC_QUEST_REQUEST_MISSIONMASTER_HELP = 0x14,
			FC_QUEST_REQUEST_MISSIONMASTER_HELP_INVITE = 0x15,
			FC_QUEST_MISSIONMASTER_HELP_INVITE = 0x16,
			FC_QUEST_MISSIONMASTER_HELP_INVITE_OK = 0x17,
			FC_QUEST_MISSIONMASTER_HELP_REJECT = 0x18,
			FC_QUEST_MISSIONMASTER_HELP_REJECT_OK = 0x19,
			FC_QUEST_INSERT_QUEST = 0x20,
			FC_QUEST_DELETE_QUEST = 0x21,
		};
	};

	template<> struct T1<T0::enum_t::FC_RACING>
	{
		enum class enum_t : unsigned char
		{
			FC_RACING_RACINGLIST_REQUEST = 0x00,
			FC_RACING_RACINGLIST_REQUEST_ACK = 0x01,
			FC_RACING_RACINGINFO_REQUEST = 0x02,
			FC_RACING_RACINGINFO_REQUEST_ACK = 0x03,
			FC_RACING_RACINGNOTIFY = 0x04,
			FC_RACING_JOIN_ENABLE = 0x05,
			FC_RACING_JOIN_REQUEST = 0x06,
			FC_RACING_JOIN_REQUEST_ACK = 0x07,
			FC_RACING_COUNTDOWN = 0x08,
			FC_RACING_CHECKPOINT_CHECK = 0x09,
			FC_RACING_CHECKPOINT_CHECK_ACK = 0x0A,
			FC_RACING_FINISHED = 0x0B,
			FC_RACING_OTHER_FINISHED = 0x0C,
			FC_RACING_FINALRANKING = 0x0D,
		};
	};

	template<> struct T1<T0::enum_t::FC_REQUEST>
	{
		enum class enum_t : unsigned char
		{
			FC_REQUEST_REQUEST = 0x00,
			FC_REQUEST_REQUEST_OK = 0x01,
			FC_REQUEST_ACCEPT_REQUEST = 0x02,
			FC_REQUEST_ACCEPT_REQUEST_OK = 0x03,
			FC_REQUEST_REJECT_REQUEST = 0x04,
			FC_REQUEST_REJECT_REQUEST_OK = 0x05,
			FC_REQUEST_CANCEL_REQUEST = 0x06,
		};
	};

	template<> struct T1<T0::enum_t::FC_SHOP>
	{
		enum class enum_t : unsigned char
		{
			FC_SHOP_PUT_ITEM_HEADER = 0x00,
			FC_SHOP_PUT_ITEM = 0x01,
			FC_SHOP_PUT_ITEM_DONE = 0x02,
			FC_SHOP_GET_ITEMINFO = 0x03,
			FC_SHOP_GET_ITEMINFO_OK = 0x04,
			FC_SHOP_BUY_ITEM = 0x05,
			FC_SHOP_BUY_ITEM_OK = 0x06,
			FC_SHOP_SELL_ITEM = 0x07,
			FC_SHOP_SELL_ITEM_OK = 0x08,
			FC_SHOP_GET_USED_ITEM_PRICE = 0x09,
			FC_SHOP_GET_USED_ITEM_PRICE_OK = 0x0A,
			FC_SHOP_GET_SHOP_ITEM_LIST = 0x0B,
			FC_SHOP_REQUEST_REPAIR = 0x0C,
			FC_SHOP_REQUEST_REPAIR_OK = 0x0D,
			FC_SHOP_BUY_CASH_ITEM = 0x0E,
			FC_SHOP_BUY_CASH_ITEM_OK = 0x0F,
			FC_SHOP_BUY_COLOR_ITEM = 0x10,
			FC_SHOP_BUY_COLOR_ITEM_OK = 0x11,
			FC_SHOP_BUY_WARPOINT_ITEM = 0x12,
			FC_SHOP_BUY_WARPOINT_ITEM_OK = 0x13,
			FC_SHOP_CHECK_GIVE_TARGET = 0x14,
			FC_SHOP_CHECK_GIVE_TARGET_OK = 0x15,
			FC_SHOP_INFINITY_ITEM_HEADER = 0x16,
			FC_SHOP_INFINITY_ITEM = 0x17,
			FC_SHOP_INFINITY_ITEM_DONE = 0x18,
			FC_SHOP_INFINITY_BUY_ITEM = 0x19,
			FC_SHOP_CLOSE = 0x1A,
			FC_SHOP_BUY_ITEM_UPDATE = 0x1B,
			FC_SHOP_AUTH_KEY = 0x1C,
			FC_SHOP_INFLUENCE_BUFF = 0x1D,
			FC_SHOP_INFLUENCE_BUFF_OK = 0x1E,
		};
	};

	template<> struct T1<T0::enum_t::FC_SKILL>
	{
		enum class enum_t : unsigned char
		{
			FC_SKILL_USE_SKILLPOINT = 0x00,
			FC_SKILL_USE_SKILLPOINT_OK = 0x01,
			FC_SKILL_SETUP_SKILL = 0x02,
			FC_SKILL_SETUP_SKILL_OK_HEADER = 0x03,
			FC_SKILL_SETUP_SKILL_OK = 0x04,
			FC_SKILL_SETUP_SKILL_OK_DONE = 0x05,
			FC_SKILL_USE_SKILL = 0x06,
			FC_SKILL_USE_SKILL_OK = 0x07,
			FC_SKILL_CANCEL_SKILL = 0x08,
			FC_SKILL_INVALIDATE_SKILL = 0x09,
			FC_SKILL_PREPARE_USE = 0x0A,
			FC_SKILL_PREPARE_USE_OK = 0x0B,
			FC_SKILL_CANCEL_PREPARE = 0x0C,
			FC_SKILL_CANCEL_PREPARE_OK = 0x0D,
			FC_SKILL_CONFIRM_USE = 0x0F,
			FC_SKILL_CONFIRM_USE_ACK = 0x10,
			FC_SKILL_CANCEL_SKILL_OK = 0x11,
		};
	};

	template<> struct T1<T0::enum_t::FC_STORE>
	{
		enum class enum_t : unsigned char
		{
			FC_STORE_GET_ITEM = 0x00,
			FC_STORE_PUT_ITEM_HEADER = 0x01,
			FC_STORE_PUT_ITEM = 0x02,
			FC_STORE_PUT_ITEM_DONE = 0x03,
			FC_STORE_MOVE_ITEM = 0x04,
			FC_STORE_MOVE_ITEM_OK = 0x05,
			FC_STORE_INSERT_ITEM = 0x06,
			FC_STORE_DELETE_ITEM = 0x07,
			FC_STORE_UPDATE_ITEM_COUNT = 0x08,
			FC_STORE_UPDATE_ENDURANCE = 0x09,
			FC_STORE_UPDATE_POSSESS = 0x0A,
			FC_STORE_UPDATE_RARE_FIX = 0x0B,
			FC_STORE_INSERT_USINGITEM = 0x0C,
			FC_STORE_DELETE_USINGITEM = 0x0D,
			FC_STORE_UPDATE_USINGITEM = 0x0E,
			FC_STORE_EXPIRE_USINGITEM = 0x0F,
			FC_STORE_UPDATE_ITEMSTORAGE = 0x10,
			FC_STORE_UPDATE_ITEMNUM = 0x11,
			FC_STORE_REQUEST_QUICKSLOT = 0x12,
			FC_STORE_REQUEST_QUICKSLOT_OK = 0x13,
			FC_STORE_SAVE_QUICKSLOT = 0x14,
			FC_STORE_LOG_GUILD_ITEM = 0x15,
			FC_STORE_LOG_GUILD_ITEM_OK = 0x16,
			FC_STORE_LOG_GUILD_ITEM_OK_HEADER = 0x17,
			FC_STORE_LOG_GUILD_ITEM_OK_DONE = 0x18,
			FC_STORE_UPDATE_ARMOR_ITEM_EVENT_INFO = 0x19,
		};
	};

	template<> struct T1<T0::enum_t::FC_STRING>
	{
		enum class enum_t : unsigned char
		{
			FC_STRING_128 = 0x01,
			FC_STRING_256 = 0x02,
			FC_STRING_512 = 0x03,
			FC_WORLD_NOTIFICATION = 0x04,
		};
	};

	template<> struct T1<T0::enum_t::FC_TIMER>
	{
		enum class enum_t : unsigned char
		{
			FC_TIMER_START_TIMER = 0x00,
			FC_TIMER_STOP_TIMER = 0x01,
			FC_TIMER_UPDATE_TIMER = 0x02,
			FC_TIMER_PAUSE_TIMER = 0x03,
			FC_TIMER_CONTINUE_TIMER = 0x04,
			FC_TIMER_TIMEOUT = 0x05,
		};
	};

	template<> struct T1<T0::enum_t::FC_TRADE>
	{
		enum class enum_t : unsigned char
		{
			FC_TRADE_REQUEST_TRADE = 0x00,
			FC_TRADE_REQUEST_TRADE_OK = 0x01,
			FC_TRADE_CANCEL_REQUEST = 0x02,
			FC_TRADE_CANCEL_REQUEST_OK = 0x03,
			FC_TRADE_ACCEPT_TRADE = 0x04,
			FC_TRADE_ACCEPT_TRADE_OK = 0x05,
			FC_TRADE_REJECT_TRADE = 0x06,
			FC_TRADE_REJECT_TRADE_OK = 0x07,
			FC_TRADE_REJECT_TRADING = 0x08,
			FC_TRADE_SHOW_TRADE_WINDOW = 0x09,
			FC_TRADE_TRANS_ITEM = 0x0A,
			FC_TRADE_TRANS_ITEM_OK = 0x0B,
			FC_TRADE_SEE_ITEM = 0x0C,
			FC_TRADE_SEE_ITEM_OK = 0x0D,
			FC_TRADE_OK_TRADE = 0x0E,
			FC_TRADE_OK_TRADE_OK = 0x0F,
			FC_TRADE_CANCEL_TRADE = 0x10,
			FC_TRADE_CANCEL_TRADE_OK = 0x11,
			FC_TRADE_INSERT_ITEM = 0x12,
			FC_TRADE_DELETE_ITEM = 0x13,
			FC_TRADE_UPDATE_ITEM_COUNT = 0x14,
			FC_TRADE_OK_TRADE_NOTIFY = 0x15,
			FC_TRADE_SEE_PET_DATA = 0x16,
			FC_TRADE_DELETE_CURRENT_PET_DATA = 0x17,
			FC_TRADE_INSERT_CURRENT_PET_DATA = 0x18,
		};
	};

	template<> struct T1<T0::enum_t::FC_COUNTDOWN>
	{
		enum class enum_t : unsigned char
		{
			FC_COUNTDOWN_START = 0x00,
			FC_COUNTDOWN_DONE = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::FC_OBJECT>
	{
		enum class enum_t : unsigned char
		{
			FC_OBJECT_CHANGE_BODYCONDITION = 0x00,
			FC_OBJECT_CHANGE_BODYCONDITION_OK = 0x01,
			FC_OBJECT_CHANGE = 0x02,
		};
	};

	template<> struct T1<T0::enum_t::FC_AUCTION>
	{
		enum class enum_t : unsigned char
		{
			FC_AUCTION_REGISTER_ITEM = 0x00,
			FC_AUCTION_REGISTER_ITEM_OK = 0x01,
			FC_AUCTION_CANCEL_REGISTER = 0x02,
			FC_AUCTION_CANCEL_REGISTER_OK = 0x03,
			FC_AUCTION_BUY_ITEM = 0x04,
			FC_AUCTION_BUY_ITEM_OK = 0x05,
			FC_AUCTION_GET_ITEM_LIST = 0x06,
			FC_AUCTION_INSERT_ITEM = 0x07,
			FC_AUCTION_PUT_ENCHANT = 0x08,
		};
	};

	template<> struct T1<T0::enum_t::FC_CITYWAR>
	{
		enum class enum_t : unsigned char
		{
			FC_CITYWAR_START_WAR = 0x01,
			FC_CITYWAR_MONSTER_CREATED = 0x02,
			FC_CITYWAR_MONSTER_DEAD = 0x03,
			FC_CITYWAR_END_WAR = 0x04,
			FC_CITYWAR_GET_OCCUPYINFO = 0x05,
			FC_CITYWAR_GET_OCCUPYINFO_OK = 0x06,
			FC_CITYWAR_SET_SETTINGTIME = 0x07,
			FC_CITYWAR_SET_TEX = 0x08,
			FC_CITYWAR_SET_BRIEFING = 0x09,
			FC_CITYWAR_BRING_SUMOFTEX = 0x0A,
			FC_CITYWAR_BRING_SUMOFTEX_OK = 0x0B,
		};
	};

	template<> struct T1<T0::enum_t::FC_WAR>
	{
		enum class enum_t : unsigned char
		{
			FC_WAR_NOTIFY_INVASION = 0x01,
			FC_WAR_NOTIFY_INFLUENCE_MONSTER_DEAD = 0x02,
			FC_WAR_NOTIFY_INFLUENCE_MONSTER_INVASION = 0x03,
			FC_WAR_NOTIFY_INFLUENCE_MONSTER_AUTO_DESTROYED = 0x04,
			FC_WAR_BOSS_MONSTER_SUMMON_DATA = 0x10,
			FC_WAR_JACO_MONSTER_SUMMON = 0x11,
			FC_WAR_STRATEGYPOINT_MONSTER_SUMMON = 0x12,
			FC_WAR_SIGN_BOARD_INSERT_STRING = 0x20,
			FC_WAR_SIGN_BOARD_DELETE_STRING = 0x21,
			FC_WAR_REQ_SIGN_BOARD_STRING_LIST = 0x22,
			FC_WAR_REQ_SIGN_BOARD_STRING_LIST_OK = 0x23,
			FC_WAR_UPDATE_CONTRIBUTION_POINT_OK = 0x24,
			FC_WAR_INFLUENCE_DATA = 0x25,
			FC_WAR_MONSTER_CREATED = 0x30,
			FC_WAR_MONSTER_AUTO_DESTROYED = 0x31,
			FC_WAR_MONSTER_DEAD = 0x32,
			FC_WAR_BOSS_CONTRIBUTION_GUILD = 0x33,
			FC_WAR_INFLUENCE_CONSECUTIVE_VICTORITES = 0x34,
			FC_WAR_INFLUENCE_CONSECUTIVE_POINT = 0x35,
		};
	};

	template<> struct T1<T0::enum_t::FC_BAZAAR>
	{
		enum class enum_t : unsigned char
		{
			FC_BAZAAR_CUSTOMER_INFO_OK = 0x01,
			FC_BAZAAR_INFO_OK = 0x02,
			FC_BAZAAR_SELL_PUT_ITEM = 0x03,
			FC_BAZAAR_SELL_PUT_ITEM_OK = 0x04,
			FC_BAZAAR_SELL_CANCEL_ITEM = 0x05,
			FC_BAZAAR_SELL_CANCEL_ITEM_OK = 0x06,
			FC_BAZAAR_SELL_START = 0x07,
			FC_BAZAAR_SELL_START_OK = 0x08,
			FC_BAZAAR_SELL_REQUEST_ITEMLIST = 0x09,
			FC_BAZAAR_SELL_REQUEST_ITEMLIST_OK = 0x0A,
			FC_BAZAAR_SELL_ITEM_ENCHANTLIST_OK = 0x0B,
			FC_BAZAAR_SELL_BUY_ITEM = 0x0C,
			FC_BAZAAR_SELL_BUY_ITEM_OK = 0x0D,
			FC_BAZAAR_BUY_PUT_ITEM = 0x23,
			FC_BAZAAR_BUY_PUT_ITEM_OK = 0x24,
			FC_BAZAAR_BUY_CANCEL_ITEM = 0x25,
			FC_BAZAAR_BUY_CANCEL_ITEM_OK = 0x26,
			FC_BAZAAR_BUY_START = 0x27,
			FC_BAZAAR_BUY_START_OK = 0x28,
			FC_BAZAAR_BUY_REQUEST_ITEMLIST = 0x29,
			FC_BAZAAR_BUY_REQUEST_ITEMLIST_OK = 0x2A,
			FC_BAZAAR_BUY_SELL_ITEM = 0x2B,
			FC_BAZAAR_BUY_SELL_ITEM_OK = 0x2C,
		};
	};

	template<> struct T1<T0::enum_t::FC_ARENA>
	{
		enum class enum_t : unsigned char
		{
			FC_ARENA_REQUEST_TEAM = 0x00,
			FC_ARENA_REQUEST_TEAM_OK = 0x01,
			FC_ARENA_CREATE_TEAM = 0x02,
			FC_ARENA_CREATE_TEAM_OK = 0x03,
			FC_ARENA_ENTER_TEAM = 0x04,
			FC_ARENA_ENTER_TEAM_OK = 0x05,
			FC_ARENA_TEAM_MEMBER_LIST = 0x06,
			FC_ARENA_REAVE_TEAM = 0x07,
			FC_ARENA_REAVE_TEAM_OK = 0x08,
			FC_ARENA_TEAM_READY = 0x09,
			FC_ARENA_TEAM_READY_FINISH = 0x0A,
			FC_ARENA_TEAM_READY_FINISH_CANCEL = 0x0B,
			FC_ARENA_TEAM_MATCHING = 0x0C,
			FC_ARENA_ENTER_ROOM = 0x0D,
			FC_ARENA_ENTER_ROOM_WARP = 0x0E,
			FC_ARENA_ROOM_WAR_START = 0x0F,
			FC_ARENA_ROOM_WAR_INFO = 0x10,
			FC_ARENA_ROOM_WAR_FINISH_HEADER = 0x11,
			FC_ARENA_ROOM_WAR_FINISH = 0x12,
			FC_ARENA_ROOM_WAR_FINISH_DONE = 0x13,
			FC_ARENA_ROOM_WAR_FINISH_DRAW = 0x14,
			FC_ARENA_FINISH_WARP = 0x15,
			FC_ARENA_FINISH_WARP_OK = 0x16,
			FC_ARENA_REQUEST_CREATE_TEAMINFO = 0x17,
			FC_ARENA_REQUEST_CREATE_TEAMINFO_OK = 0x18,
			FC_ARENA_BEFORE_ROOM_WAR_FINISH = 0x19,
			FC_ARENA_REQUEST_OTHER_TEAM_INFO = 0x1A,
			FC_ARENA_REQUEST_OTHER_TEAM_INFO_OK = 0x1B,
			FC_ARENA_GM_COMMAND_INFO_HEADER = 0x1C,
			FC_ARENA_GM_COMMAND_INFO = 0x1D,
			FC_ARENA_GM_COMMAND_INFO_DONE = 0x1E,
			FC_ARENA_QUICK_ENTER_TEAM = 0x1F,
			FC_ARENA_WATCH_READY = 0x20,
			FC_ARENA_WATCH_START = 0x21,
			FC_ARENA_WATCH_END = 0x22,
			FC_ARENA_WATCH_REMOVE_USER = 0x23,
			FC_ARENA_POSSIBLE_GAMESTART = 0x24,
			FC_ARENA_CHARACTER_GAMESTART = 0x25,
			FC_ARENA_CHARACTER_GAMESTART_OK = 0x26,
			FC_ARENA_USE_CITYWARPITEM = 0x27,
			FC_ARENA_PLAY_CHARACTER_TYPE = 0x28,
		};
	};

	template<> struct T1<T0::enum_t::FC_TUTORIAL>
	{
		enum class enum_t : unsigned char
		{
			FC_TUTORIAL_START = 0x00,
			FC_TUTORIAL_START_OK = 0x01,
			FC_TUTORIAL_COMPLETE = 0x02,
			FC_TUTORIAL_COMPLETE_OK = 0x03,
			FC_TUTORIAL_END = 0x04,
			FC_TUTORIAL_END_OK = 0x05,
			FC_TUTORIAL_WARP = 0x06,
		};
	};

	template<> struct T1<T0::enum_t::FC_OUTPOST>
	{
		enum class enum_t : unsigned char
		{
			FC_OUTPOST_WAR_BEFORE = 0x00,
			FC_OUTPOST_WAR_START = 0x01,
			FC_OUTPOST_PROTECTOR_DESTROY = 0x02,
			FC_OUTPOST_RESET_START = 0x05,
			FC_OUTPOST_RESET_START_OK = 0x06,
			FC_OUTPOST_RESET_DESTROY = 0x07,
			FC_OUTPOST_RESET_SUCCESS = 0x08,
			FC_OUTPOST_WAR_END = 0x09,
			FC_OUTPOST_NEXTWAR_INFO_REQUEST = 0x0A,
			FC_OUTPOST_NEXTWAR_INFO_REQUEST_OK = 0x0B,
			FC_OUTPOST_NEXTWAR_SET_TIME = 0x0C,
			FC_OUTPOST_NEXTWAR_SET_TIME_OK = 0x0D,
			FC_OUTPOST_WAR_INFO = 0x0E,
		};
	};

	template<> struct T1<T0::enum_t::FC_INFINITY>
	{
		enum class enum_t : unsigned char
		{
			FC_INFINITY_MODE_LIST = 0x00,
			FC_INFINITY_MODE_LIST_OK = 0x01,
			FC_INFINITY_READY_LIST = 0x02,
			FC_INFINITY_READY_LIST_OK = 0x03,
			FC_INFINITY_CREATE = 0x04,
			FC_INFINITY_CREATE_OK = 0x05,
			FC_INFINITY_JOIN = 0x06,
			FC_INFINITY_JOIN_REQUEST_MASTERUSER = 0x07,
			FC_INFINITY_JOIN_REQUEST_MASTERUSER_OK = 0x08,
			FC_INFINITY_JOIN_OK = 0x09,
			FC_INFINITY_MEMBER_INFO_LIST = 0x0A,
			FC_INFINITY_MEMBER_INFO_LIST_OK = 0x0B,
			FC_INFINITY_CHANGE_MASTER = 0x0C,
			FC_INFINITY_CHANGE_MASTER_OK = 0x0D,
			FC_INFINITY_LEAVE = 0x0E,
			FC_INFINITY_LEAVE_OK = 0x0F,
			FC_INFINITY_BAN = 0x10,
			FC_INFINITY_BAN_OK = 0x11,
			FC_INFINITY_READY = 0x12,
			FC_INFINITY_READY_OK = 0x13,
			FC_INFINITY_READY_CANCEL = 0x14,
			FC_INFINITY_READY_CANCEL_OK = 0x15,
			FC_INFINITY_START = 0x16,
			FC_INFINITY_MAP_LOADING = 0x17,
			FC_INFINITY_MAP_LOADED = 0x18,
			FC_INFINITY_ENTER = 0x19,
			FC_INFINITY_CINEMA = 0x1A,
			FC_INFINITY_SUCCESS_FIN = 0x1B,
			FC_INFINITY_FAIL_FIN = 0x1C,
			FC_INFINITY_FIN_OK = 0x1D,
			FC_INFINITY_READY_FINISH_MAINSVR_START = 0x1E,
			FC_INFINITY_TENDER_DROPITEM_INFO = 0x1F,
			FC_INFINITY_TENDER_START = 0x20,
			FC_INFINITY_TENDER_PUT_IN_TENDER = 0x21,
			FC_INFINITY_TENDER_PUT_IN_TENDER_OK = 0x22,
			FC_INFINITY_TENDER_RESULT = 0x23,
			FC_INFINITY_TENDER_TIMEOVER = 0x24,
			FC_INFINITY_TENDER_ALLGIVEUP = 0x25,
			FC_INFINITY_CHANGE_LIMITTIME = 0x26,
			FC_INFINITY_JOIN_CANCEL = 0x27,
			FC_INFINITY_JOIN_CANCEL_REQUEST_MASTERUSER = 0x28,
			FC_INFINITY_REQUEST_RESTART_BY_DISCONNECT = 0x29,
			FC_INFINITY_RESTART_BY_DISCONNECT = 0x2A,
			FC_INFINITY_MAP_LOADED_RESTART_BY_DISCONNECT = 0x2B,
			FC_INFINITY_DELETED_CINEMA_HEADER = 0x2C,
			FC_INFINITY_DELETED_CINEMA = 0x2D,
			FC_INFINITY_DELETED_CINEMA_DONE = 0x2E,
			FC_INFINITY_ENTER_BY_DISCONNECT = 0x2F,
			FC_INFINITY_CHANGE_ALIVE_FOR_GAMECLEAR_MONSTERHP = 0x30,
			FC_INFINITY_DIFFICULTY_LIST_OK = 0x31,
			FC_INFINITY_CHANGE_DIFFICULTY_LEVEL = 0x32,
			FC_INFINITY_CHANGE_DIFFICULTY_LEVEL_OK = 0x33,
			FC_INFINITY_READY_CANCEL_ALL_OK = 0x34,
			FC_INFINITY_SKIP_ENDING_CINEMA = 0x35,
			FC_INFINITY_SKIP_ENDING_CINEMA_OK = 0x36,
			FC_INFINITY_MOVIE = 0x37,
			FC_INFINITY_SET_LIMITTIME = 0x38,
		};
	};

	template<> struct T1<T0::enum_t::FI_ADMIN>
	{
		enum class enum_t : unsigned char
		{
			FI_ADMIN_GET_CHARACTER_INFO = 0x00,
			FI_ADMIN_GET_CHARACTER_INFO_OK = 0x01,
			FI_ADMIN_CALL_CHARACTER = 0x02,
			FI_ADMIN_MOVETO_CHARACTER = 0x03,
			FI_ADMIN_PRINT_DEBUG_MSG = 0x04,
			FI_ADMIN_CHANGE_WEATHER = 0x05,
		};
	};

	template<> struct T1<T0::enum_t::FI_CHARACTER>
	{
		enum class enum_t : unsigned char
		{
			FI_CHARACTER_DELETE_CHARACTER = 0x01,
			FI_CHARACTER_CHANGE_LEVEL = 0x02,
			FI_CHARACTER_UPDATE_GUILD_INFO = 0x03,
			FI_CHARACTER_UPDATE_MAP_CHANNEL = 0x04,
			FI_CHARACTER_CHANGE_INFLUENCE_TYPE = 0x05,
			FI_UPDATE_SUBLEADER = 0x06,
			FI_CREATE_GUILD_BY_SUBLEADER = 0x07,
		};
	};

	template<> struct T1<T0::enum_t::FI_CHAT>
	{
		enum class enum_t : unsigned char
		{
			FI_CHAT_MAP = 0x00,
			FI_CHAT_REGION = 0x01,
			FI_CHAT_CHANGE_CHAT_FLAG = 0x02,
			FI_CHAT_CASH_ALL = 0x03,
			FI_CHAT_ARENA = 0x04,
			FI_CHAT_OUTPOST_GUILD = 0x05,
			FI_CHAT_INFINITY = 0x06,
			FI_CHAT_CNC = 0x07,
			FI_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT_OK = 0x10,
			IC_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT = 0x11,
		};
	};

	template<> struct T1<T0::enum_t::FI_EVENT>
	{
		enum class enum_t : unsigned char
		{
			FI_EVENT_NOTIFY_WARP = 0x00,
			FI_EVENT_NOTIFY_WARP_OK = 0x01,
			FI_EVENT_GET_WARP_INFO = 0x02,
			FI_EVENT_GET_WARP_INFO_OK = 0x03,
			FI_EVENT_CHAT_BLOCK = 0x04,
		};
	};

	template<> struct T1<T0::enum_t::FI_GUILD>
	{
		enum class enum_t : unsigned char
		{
			FI_GUILD_NOTIFY_START_WAR = 0x00,
			FI_GUILD_NOTIFY_END_WAR = 0x01,
			FI_GUILD_DELETE_GUILD = 0x02,
			FI_GUILD_RANK_OK = 0x03,
			FI_GUILD_DELETE_INFO_OK = 0x04,
			FI_GUILD_ADD_GUILD_FAME = 0x10,
			FI_GUILD_REG_DELETE_GUILD = 0x11,
			FI_GUILD_DISMEMBER = 0x12,
			FI_GUILD_OUTPOST = 0x13,
			FI_GUILD_BONUS_EXP_RATE = 0x14,
		};
	};

	template<> struct T1<T0::enum_t::FI_PARTY>
	{
		enum class enum_t : unsigned char
		{
			FI_PARTY_CREATE_OK = 0x01,
			FI_PARTY_ACCEPT_INVITE_OK = 0x02,
			FI_PARTY_BAN_MEMBER_OK = 0x03,
			FI_PARTY_LEAVE_OK = 0x04,
			FI_PARTY_TRANSFER_MASTER_OK = 0x05,
			FI_PARTY_DISMEMBER_OK = 0x06,
			FI_PARTY_CHANGE_FLIGHT_FORMATION_OK = 0x07,
			FI_PARTY_CHANGE_FLIGHT_POSITION = 0x08,
			FI_PARTY_CANCEL_FLIGHT_POSITION = 0x09,
			FI_PARTY_NOTIFY_BATTLE_PARTY = 0x10,
			FI_PARTY_NOTIFY_BATTLE_PARTY_OK = 0x12,
			FI_PARTY_ADD_MEMBER = 0x13,
			FI_PARTY_DELETE_MEMBER = 0x14,
			FI_PARTY_UPDATE_ITEM_POS = 0x15,
			FI_PARTY_ALL_FLIGHT_POSITION = 0x16,
			FI_PARTY_UPDATE_PARTY_INFO = 0x17,
			FI_PARTY_CHANGE_EXP_DISTRIBUTE_TYPE = 0x18,
			FI_PARTY_CHANGE_ITEM_DISTRIBUTE_TYPE = 0x19,
			FI_PARTY_CHANGE_FORMATION_SKILL = 0x20,
			FI_PARTY_AUTO_CREATE = 0x30,
			FI_PARTY_AUTO_CREATE_OK = 0x31,
			FI_PARTY_DISCONNECT_LEAVE_OK = 0x32,
			FI_PARTY_UPDATE_ITEM_TRANSFORMER_OK = 0x33,
			FI_PARTY_ARENA_TEAM_NUM = 0x34,
		};
	};

	template<> struct T1<T0::enum_t::FI_CASH>
	{
		enum class enum_t : unsigned char
		{
			FI_CASH_USING_GUILD = 0x00,
			FI_CASH_USING_CHANGE_CHARACTERNAME = 0x01,
			FI_CASH_PREMIUM_CARD_INFO = 0x02,
		};
	};

	template<> struct T1<T0::enum_t::FI_INFO>
	{
		enum class enum_t : unsigned char
		{
			FI_INFO_DECLARATION_MSWAR_SET_OK = 0x00,
		};
	};

	template<> struct T1<T0::enum_t::FN_BATTLE>
	{
		enum class enum_t : unsigned char
		{
			FN_BATTLE_ATTACK_PRIMARY = 0x00,
			FN_BATTLE_ATTACK_RESULT_PRIMARY = 0x01,
			FN_BATTLE_ATTACK_SECONDARY = 0x02,
			FN_BATTLE_ATTACK_RESULT_SECONDARY = 0x03,
			FN_BATTLE_ATTACK_FIND = 0x04,
			FN_BATTLE_ATTACK_FIND_RESULT = 0x05,
			FN_BATTLE_SET_ATTACK_CHARACTER = 0x06,
			FN_BATTLE_DROP_FIXER = 0x07,
			FN_BATTLE_DROP_FIXER_OK = 0x08,
			FN_BATTLE_ATTACK_HIDE_ITEM_W_KIND = 0x09,
			FN_BATTLE_ATTACK_SKILL = 0x0A,
			FN_BATTLE_ATTACK_SKILL_CANCEL = 0x0B,
		};
	};

	template<> struct T1<T0::enum_t::FN_CHARACTER>
	{
		enum class enum_t : unsigned char
		{
			FN_CHARACTER_CHANGE_UNITKIND = 0x01,
			FN_CHARACTER_CHANGE_BODYCONDITION = 0x02,
			FN_CHARACTER_CHANGE_HPDPSPEP = 0x03,
			FN_CHARACTER_CHANGE_CURRENTHPDPSPEP = 0x04,
			FN_CHARACTER_CHANGE_MAPNAME = 0x05,
			FN_CHARACTER_CHANGE_POSITION = 0x06,
			FN_CHARACTER_CHANGE_STEALTHSTATE = 0x07,
			FN_CHARACTER_CHANGE_CHARACTER_MODE_OK = 0x08,
			FN_CHARACTER_CHANGE_INFLUENCE_TYPE = 0x09,
			FN_CHARACTER_CHANGE_INVISIBLE = 0x0A,
		};
	};

	template<> struct T1<T0::enum_t::FN_EVENT>
	{
		enum class enum_t : unsigned char
		{
			FN_EVENT_WARP = 0x00,
			FN_EVENT_OTHER_WARPED = 0x01,
			FN_EVENT_WARP_CONNECT_OK = 0x02,
			FN_EVENT_NEW_CHANGE_OBJECT = 0x10,
			FN_EVENT_RESET_CHANGE_OBJECT = 0x11,
		};
	};

	template<> struct T1<T0::enum_t::FN_MONSTER>
	{
		enum class enum_t : unsigned char
		{
			FN_MAPPROJECT_START = 0x02,
			FN_MAPPROJECT_START_OK = 0x03,
			FN_MAPPROJECT_START_OK_ACK = 0x04,
			FN_MONSTER_CREATE = 0x05,
			FN_MONSTER_CREATE_OK = 0x06,
			FN_MONSTER_DELETE = 0x07,
			FN_CLIENT_GAMESTART_OK = 0x08,
			FN_CLIENT_GAMEEND_OK = 0x09,
			FN_GET_CHARACTER_INFO = 0x0A,
			FN_GET_CHARACTER_INFO_OK = 0x0B,
			FN_ADMIN_SUMMON_MONSTER = 0x0C,
			FN_MONSTER_CHANGE_HP = 0x0D,
			FN_MONSTER_CHANGE_BODYCONDITION = 0x0E,
			FN_MONSTER_SKILL_USE_SKILL = 0x0F,
			FN_MONSTER_SKILL_END_SKILL = 0x10,
			FN_MONSTER_AUTO_DESTROYED = 0x20,
			FN_MONSTER_STRATEGYPOINT_INIT = 0x30,
			FN_MONSTER_STRATEGYPOINT_SUMMON = 0x31,
			FN_MONSTER_OUTPOST_INIT = 0x35,
			FN_MONSTER_OUTPOST_RESET_SUMMON = 0x36,
			FN_MONSTER_CREATE_IN_MAPCHANNEL_BYVALUE = 0x37,
			FN_MONSTER_TELEPORT_SUMMON = 0x38,
			FN_MONSTER_HPTALK = 0x39,
			FN_MONSTER_KEYMONSTER_CREATE = 0x50,
			FN_MONSTER_CHANGE_OK = 0x51,
		};
	};

	template<> struct T1<T0::enum_t::FN_MOVE>
	{
		enum class enum_t : unsigned char
		{
			FN_MONSTER_MOVE = 0x00,
			FN_MOVE_OK = 0x01,
			FN_MOVE_LOCKON = 0x02,
			FN_MOVE_LOCKON_OK = 0x03,
			FN_MOVE_LOCKON_AVOID = 0x04,
			FN_MOVE_LOCKON_AVOID_OK = 0x05,
			FN_MISSILE_MOVE = 0x06,
			FN_MONSTER_HPRECOVERY = 0x07,
			FN_MONSTER_HIDE = 0x08,
			FN_MONSTER_SHOW = 0x09,
		};
	};

	template<> struct T1<T0::enum_t::FN_SKILL>
	{
		enum class enum_t : unsigned char
		{
			FN_SKILL_USE_SKILL = 0x00,
			FN_SKILL_USE_SKILL_OK = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::FN_CITYWAR>
	{
		enum class enum_t : unsigned char
		{
			FN_CITYWAR_START_WAR = 0x00,
			FN_CITYWAR_END_WAR = 0x01,
			FN_CITYWAR_CHANGE_OCCUPY_INFO = 0x02,
		};
	};

	template<> struct T1<T0::enum_t::FN_NPCSERVER>
	{
		enum class enum_t : unsigned char
		{
			FN_NPCSERVER_START = 0xF0,
			FN_NPCSERVER_START_OK = 0x01,
			FN_NPCSERVER_SUMMON_JACO_MONSTER = 0x02,
			FN_NPCSERVER_DELETE_MONSTER_IN_MAPCHANNEL = 0x10,
			FN_NPCSERVER_CINEMA_MONSTER_CREATE = 0x11,
			FN_NPCSERVER_NEW_CHANGE_OBJECT = 0x12,
			FN_NPCSERVER_RESET_CHANGE_OBJECT = 0x13,
			FN_NPCSERVER_CINEMA_MONSTER_DESTROY = 0x14,
			FN_NPCSERVER_CINEMA_MONSTER_CHANGE = 0x15,
			FN_NPCSERVER_CINEMA_MONSTER_REGEN = 0x16,
		};
	};

	template<> struct T1<T0::enum_t::FP_EVENT>
	{
		enum class enum_t : unsigned char
		{
			FP_EVENT_NOTIFY_WARP = 0x00,
			FP_EVENT_NOTIFY_WARP_OK = 0x01,
			FP_EVENT_ENTER_SELECT_SCREEN = 0x02,
			FP_EVENT_GAME_STARTED = 0x03,
			FP_EVENT_MAP_CHANGED = 0x04,
			FP_EVENT_RELOAD_HAPPYEV = 0x05,
			FP_EVENT_RELOAD_ITEMEV = 0x06,
			FP_EVENT_UPDATE_PCBANGLIST = 0x07,
			FP_EVENT_UPDATE_STRATEGYPOINT_NOTSUMMONTIM = 0x08,
		};
	};

	template<> struct T1<T0::enum_t::FP_MONITOR>
	{
		enum class enum_t : unsigned char
		{
			FP_MONITOR_RELOAD_VERSION_INFO_OK = 0x02,
		};
	};

	template<> struct T1<T0::enum_t::FP_CASH>
	{
		enum class enum_t : unsigned char
		{
			FP_CASH_CHANGE_CHARACTERNAME = 0x00,
		};
	};

	template<> struct T1<T0::enum_t::FP_ADMIN>
	{
		enum class enum_t : unsigned char
		{
			FP_ADMIN_BLOCKACCOUNT = 0x00,
			FP_ADMIN_BLOCKACCOUNT_OK = 0x01,
			FP_ADMIN_UNBLOCKACCOUNT = 0x02,
			FP_ADMIN_UNBLOCKACCOUNT_OK = 0x03,
			FP_ADMIN_STRATRGYPOINT_INFO_CHANGE = 0x04,
		};
	};

	template<> struct T1<T0::enum_t::FP_GLOG>
	{
		enum class enum_t : unsigned char
		{
			FP_GLOG_CONNECT_USER_NEW = 0x00,
			FP_GLOG_CONNECT_USER_LOGIN = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::IC_ADMIN>
	{
		enum class enum_t : unsigned char
		{
			IC_ADMIN_CALL_CHARACTER = 0x01,
			IC_ADMIN_GET_SERVER_STAT = 0x02,
			IC_ADMIN_GET_SERVER_STAT_OK = 0x03,
			IC_ADMIN_CALL_GUILD = 0x04,
			IC_ADMIN_CALLGM_INFO_OK = 0x10,
			IC_ADMIN_CALLGM_VIEW_OK = 0x11,
			IC_ADMIN_CALLGM_BRING_OK = 0x12,
		};
	};

	template<> struct T1<T0::enum_t::IC_CHAT>
	{
		enum class enum_t : unsigned char
		{
			IC_CHAT_ALL = 0x00,
			IC_CHAT_MAP = 0x01,
			IC_CHAT_REGION = 0x02,
			IC_CHAT_PTOP = 0x03,
			IC_CHAT_PARTY = 0x04,
			IC_CHAT_GUILD = 0x05,
			IC_CHAT_GET_GUILD = 0x06,
			IC_CHAT_GET_GUILD_OK = 0x07,
			IC_CHAT_CHANGE_GUILD = 0x08,
			IC_CHAT_CHANGE_GUILD_OK = 0x09,
			IC_CHAT_CHANGE_PARTY = 0x0A,
			IC_CHAT_CHANGE_PARTY_OK = 0x0B,
			IC_CHAT_CHANGE_CHAT_FLAG = 0x0C,
			IC_CHAT_POSITION = 0x0D,
			IC_CHAT_BLOCK = 0x0E,
			IC_CHAT_GET_BLOCK = 0x0F,
			IC_CHAT_GET_BLOCK_OK = 0x10,
			IC_CHAT_BLOCK_YOU = 0x11,
			IC_CHAT_FRIENDLIST_AND_REJECTLIST_LOADING = 0x12,
			IC_CHAT_FRIENDLIST_LOADING_OK = 0x13,
			IC_CHAT_FRIENDLIST_INSERT = 0x14,
			IC_CHAT_FRIENDLIST_INSERT_OK = 0x15,
			IC_CHAT_FRIENDLIST_DELETE = 0x16,
			IC_CHAT_FRIENDLIST_DELETE_OK = 0x17,
			IC_CHAT_FRIENDLIST_REFRESH = 0x18,
			IC_CHAT_FRIENDLIST_REFRESH_OK = 0x19,
			IC_CHAT_REJECTLIST_LOADING_OK = 0x1A,
			IC_CHAT_REJECTLIST_INSERT = 0x1B,
			IC_CHAT_REJECTLIST_INSERT_OK = 0x1C,
			IC_CHAT_REJECTLIST_DELETE = 0x1D,
			IC_CHAT_REJECTLIST_DELETE_OK = 0x1E,
			IC_CHAT_FRIENDLIST_INSERT_NOTIFY = 0x1F,
			IC_CHAT_SELL_ALL = 0x30,
			IC_CHAT_CASH_ALL = 0x31,
			IC_CHAT_INFLUENCE_ALL = 0x32,
			IC_CHAT_ARENA = 0x33,
			IC_CHAT_WAR = 0x34,
			IC_CHAT_CHATROOM = 0x35,
			IC_CHAT_INFINITY = 0x36,
			IC_CHAT_CNC = 0x37,
		};
	};

	template<> struct T1<T0::enum_t::IC_GUILD>
	{
		enum class enum_t : unsigned char
		{
			IC_GUILD_CREATE = 0x00,
			IC_GUILD_CREATE_OK = 0x01,
			IC_GUILD_GET_GUILD_INFO = 0x02,
			IC_GUILD_GET_GUILD_INFO_OK = 0x03,
			IC_GUILD_GET_OTHER_GUILD_INFO = 0x04,
			IC_GUILD_GET_OTHER_GUILD_INFO_OK = 0x05,
			IC_GUILD_REQUEST_INVITE = 0x06,
			IC_GUILD_REQUEST_INVITE_QUESTION = 0x07,
			IC_GUILD_ACCEPT_INVITE = 0x08,
			IC_GUILD_ACCEPT_INVITE_OK = 0x09,
			IC_GUILD_REJECT_INVITE = 0x0A,
			IC_GUILD_REJECT_INVITE_OK = 0x0B,
			IC_GUILD_BAN_MEMBER = 0x0C,
			IC_GUILD_BAN_MEMBER_OK = 0x0D,
			IC_GUILD_LEAVE = 0x0E,
			IC_GUILD_LEAVE_OK = 0x0F,
			IC_GUILD_DISMEMBER_OK = 0x11,
			IC_GUILD_SET_MEMBER_STATE = 0x12,
			IC_GUILD_CANCEL_DISMEMBER = 0x13,
			IC_GUILD_CANCEL_DISMEMBER_OK = 0x14,
			IC_GUILD_GET_DISMEMBER_DATE = 0x15,
			IC_GUILD_GET_DISMEMBER_DATE_OK = 0x16,
			IC_GUILD_CHANGE_GUILD_NAME = 0x17,
			IC_GUILD_CHANGE_GUILD_NAME_OK = 0x18,
			IC_GUILD_GET_GUILD_MARK = 0x19,
			IC_GUILD_GET_GUILD_MARK_OK = 0x1A,
			IC_GUILD_SET_GUILD_MARK = 0x1B,
			IC_GUILD_SET_GUILD_MARK_OK = 0x1C,
			IC_GUILD_SET_RANK = 0x1D,
			IC_GUILD_SET_RANK_OK = 0x1E,
			IC_GUILD_CHANGE_GUILD_STATE = 0x1F,
			IC_GUILD_LOADING_GUILD_DONE = 0x20,
			IC_GUILD_WAR_READY = 0x21,
			IC_GUILD_START_WAR = 0x22,
			IC_GUILD_END_WAR = 0x23,
			IC_GUILD_UPDATE_WAR_POINT = 0x24,
			IC_GUILD_SURRENDER_GUILD_WAR = 0x25,
			IC_GUILD_CHANGE_MEMBER_CAPACITY = 0x26,
			IC_GUILD_GET_GUILD_MEMBER_LIST_OK = 0x27,
			IC_GUILD_END_WAR_ADMIN_NOTIFY = 0x28,
			IC_GUILD_MEMBER_LEVEL_UP = 0x29,
			IC_GUILD_NEW_COMMANDER = 0x2A,
			IC_GUILD_NOTICE_WRITE = 0x2B,
			IC_GUILD_NOTICE_WRITE_OK = 0x2C,
			IC_GUILD_GET_APPLICANT = 0x2D,
			IC_GUILD_GET_APPLICANT_OK_HEADER = 0x2E,
			IC_GUILD_GET_APPLICANT_OK = 0x2F,
			IC_GUILD_GET_APPLICANT_OK_DONE = 0x30,
			IC_GUILD_GET_INTRODUCTION = 0x31,
			IC_GUILD_GET_INTRODUCTION_OK = 0x32,
			IC_GUILD_GET_SELF_INTRODUCTION = 0x33,
			IC_GUILD_GET_SELF_INTRODUCTION_OK = 0x34,
			IC_GUILD_SEARCH_INTRODUCTION = 0x35,
			IC_GUILD_SEARCH_INTRODUCTION_OK_HEADER = 0x36,
			IC_GUILD_SEARCH_INTRODUCTION_OK = 0x37,
			IC_GUILD_SEARCH_INTRODUCTION_OK_DONE = 0x38,
			IC_GUILD_UPDATE_INTRODUCTION = 0x39,
			IC_GUILD_UPDATE_INTRODUCTION_OK = 0x3A,
			IC_GUILD_DELETE_INTRODUCTION = 0x3B,
			IC_GUILD_DELETE_INTRODUCTION_OK = 0x3C,
			IC_GUILD_UPDATE_SELFINTRODUCTION = 0x3D,
			IC_GUILD_UPDATE_SELFINTRODUCTION_OK = 0x3E,
			IC_GUILD_DELETE_SELFINTRODUCTION = 0x3F,
			IC_GUILD_DELETE_SELFINTRODUCTION_OK = 0x40,
			IC_GUILD_CHANGE_FAME_RANK = 0x41,
			IC_GUILD_APPLICANT_INVITE = 0x42,
			IC_GUILD_APPLICANT_INVITE_OK = 0x43,
			IC_GUILD_APPLICANT_REJECT_INVITE = 0x44,
			IC_GUILD_APPLICANT_REJECT_INVITE_OK = 0x45,
			IC_GUILD_CHANGE_MEMBERSHIP = 0x46,
		};
	};

	template<> struct T1<T0::enum_t::IC_PARTY>
	{
		enum class enum_t : unsigned char
		{
			IC_PARTY_CREATE = 0x00,
			IC_PARTY_ACCEPT_INVITE_OK = 0x01,
			IC_PARTY_GET_MEMBER = 0x02,
			IC_PARTY_PUT_MEMBER = 0x03,
			IC_PARTY_GET_ALL_MEMBER = 0x04,
			IC_PARTY_PUT_ALL_MEMBER = 0x05,
			IC_PARTY_BAN_MEMBER = 0x06,
			IC_PARTY_BAN_MEMBER_OK = 0x07,
			IC_PARTY_LEAVE = 0x08,
			IC_PARTY_LEAVE_OK = 0x09,
			IC_PARTY_TRANSFER_MASTER = 0x0A,
			IC_PARTY_TRANSFER_MASTER_OK = 0x0B,
			IC_PARTY_DISMEMBER = 0x0C,
			IC_PARTY_DISMEMBER_OK = 0x0D,
			IC_PARTY_CHANGE_FLIGHT_FORMATION = 0x0E,
			IC_PARTY_CHANGE_FLIGHT_FORMATION_OK = 0x0F,
			IC_PARTY_GET_FLIGHT_POSITION = 0x10,
			IC_PARTY_CHANGE_FLIGHT_POSITION = 0x11,
			IC_PARTY_CANCEL_FLIGHT_POSITION = 0x12,
			IC_PARTY_PUT_LAST_PARTY_INFO = 0x13,
			IC_PARTY_UPDATE_MEMBER_INFO_MAPNAME = 0x14,
			IC_PARTY_MEMBER_INVALIDATED = 0x15,
			IC_PARTY_MEMBER_REJOINED = 0x16,
			IC_PARTY_UPDATE_ITEM_POS = 0x17,
			IC_PARTY_ALL_FLIGHT_POSITION = 0x18,
			IC_PARTY_REQUEST_PARTYINFO_FROM_A_TO_M = 0x19,
			IC_PARTY_LEAVE_FROM_M_TO_A = 0x1A,
			IC_PARTY_LEAVE_FROM_A_TO_M = 0x1B,
			IC_PARTY_LIST_INFO = 0x1C,
			IC_PARTY_LIST_INFO_OK = 0x1D,
			IC_PARTY_JOIN_FREE = 0x1E,
			IC_PARTY_JOIN_FREE_OK = 0x1F,
			IC_PARTY_CHANGE_INFO = 0x20,
			IC_PARTY_CHANGE_INFO_OK = 0x21,
			IC_PARTY_RECOMMENDATION_MEMBER = 0x22,
			IC_PARTY_RECOMMENDATION_MEMBER_OK = 0x23,
			IC_PARTY_INFO = 0x24,
			IC_PARTY_GET_AUTO_PARTY_INFO = 0x30,
			IC_PARTY_GET_AUTO_PARTY_INFO_OK = 0x31,
			IC_PARTY_UPDATE_ITEM_TRANSFORMER_OK = 0x32,
		};
	};

	template<> struct T1<T0::enum_t::IC_STRING>
	{
		enum class enum_t : unsigned char
		{
			IC_STRING_128 = 0x01,
			IC_STRING_256 = 0x02,
			IC_STRING_512 = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::IC_COUNTDOWN>
	{
		enum class enum_t : unsigned char
		{
			IC_COUNTDOWN_START = 0x00,
			IC_COUNTDOWN_DONE = 0x01,
		};
	};

	//template<> struct T1<T0::enum_t::IC_VOIP>
	//{
	//	enum class enum_t : unsigned char
	//	{
	//		IC_VOIP_SET = 0x00,
	//		IC_VOIP_SET_OK = 0x01,
	//	};
	//};

	template<> struct T1<T0::enum_t::IC_CHATROOM>
	{
		enum class enum_t : unsigned char
		{
			IC_CHATROOM_CREATE = 0x00,
			IC_CHATROOM_CREATE_OK = 0x01,
			IC_CHATROOM_LIST_INFO = 0x02,
			IC_CHATROOM_LIST_INFO_OK = 0x03,
			IC_CHATROOM_REQUEST_INVITE = 0x04,
			IC_CHATROOM_REQUEST_INVITE_QUESTION = 0x05,
			IC_CHATROOM_JOIN = 0x06,
			IC_CHATROOM_JOIN_OK = 0x07,
			IC_CHATROOM_ACCEPT_INVITE = 0x08,
			IC_CHATROOM_ACCEPT_INVITE_OK = 0x09,
			IC_CHATROOM_REJECT_INVITE = 0x0A,
			IC_CHATROOM_REJECT_INVITE_OK = 0x0B,
			IC_CHATROOM_LEAVE = 0x0C,
			IC_CHATROOM_LEAVE_OK = 0x0D,
			IC_CHATROOM_BAN = 0x0E,
			IC_CHATROOM_BAN_OK = 0x0F,
			IC_CHATROOM_CHANGE_NAME = 0x10,
			IC_CHATROOM_CHANGE_NAME_OK = 0x11,
			IC_CHATROOM_CHANGE_MASTER = 0x12,
			IC_CHATROOM_CHANGE_MASTER_OK = 0x13,
			IC_CHATROOM_CHANGE_LOCK_PW = 0x14,
			IC_CHATROOM_CHANGE_LOCK_PW_OK = 0x15,
			IC_CHATROOM_CHANGE_MAX_MEMBER = 0x16,
			IC_CHATROOM_CHANGE_MAX_MEMBER_OK = 0x17,
			IC_CHATROOM_MEMBER_INFO = 0x18,
			IC_CHATROOM_MEMBER_INFO_OK = 0x19,
			IC_CHATROOM_OTHER_MEMBER_INFO = 0x1A,
			IC_CHATROOM_OTHER_MEMBER_INFO_OK = 0x1B,
		};
	};

	template<> struct T1<T0::enum_t::IC_INFO>
	{
		enum class enum_t : unsigned char
		{
			IC_INFO_DECLARATION_MSWAR_SET_OK = 0x00,
		};
	};

	template<> struct T1<T0::enum_t::FL_LOG>
	{
		enum class enum_t : unsigned char
		{
			FL_LOG_LOGIN = 0x00,
			FL_LOG_LOGOUT = 0x01,
			FL_LOG_LEVEL = 0x10,
			FL_LOG_EXP = 0x11,
			FL_LOG_STAT = 0x12,
			FL_LOG_GAME_START = 0x13,
			FL_LOG_GAME_END = 0x14,
			FL_LOG_QUEST_COMPLETION = 0x15,
			FL_LOG_PKWIN = 0x16,
			FL_LOG_PKLOSS = 0x17,
			FL_LOG_DEAD = 0x18,
			FL_LOG_WARP = 0x19,
			FL_LOG_SPEED_HACK = 0x1A,
			FL_LOG_CREATE_CHARACTER = 0x1B,
			FL_LOG_DELETE_CHARACTER = 0x1C,
			FL_LOG_MEMORY_HACK = 0x1D,
			FL_LOG_PvEWIN = 0x1E,
			FL_LOG_PvELOSS = 0x1F,
			FL_LOG_ITEM_CHARACTER_ITEM = 0x20,
			FL_LOG_ITEM_GET_ITEM = 0x21,
			FL_LOG_ITEM_TRADE_SEND = 0x22,
			FL_LOG_ITEM_TRADE_RECV = 0x23,
			FL_LOG_ITEM_THROWAWAY_ITEM = 0x24,
			FL_LOG_ITEM_BUY_ITEM = 0x25,
			FL_LOG_ITEM_SELL_ITEM = 0x26,
			FL_LOG_ITEM_USE_ITEM = 0x27,
			FL_LOG_ITEM_USE_ENERGY = 0x28,
			FL_LOG_ITEM_USE_ENCHANT = 0x29,
			FL_LOG_ITEM_ADD_ITEM_BY_ADMIN = 0x2A,
			FL_LOG_ITEM_DEL_ITEM_BY_ADMIN = 0x2B,
			FL_LOG_ITEM_ADD_ITEM_BY_COMMAND = 0x2C,
			FL_LOG_ITEM_INSERT_TO_STORE = 0x2D,
			FL_LOG_ITEM_DRAW_FROM_STORE = 0x2E,
			FL_LOG_ITEM_STORE_ITEM = 0x2F,
			FL_LOG_ITEM_USE_MIX = 0x30,
			FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN = 0x31,
			FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_NEW = 0x32,
			FL_LOG_ITEM_BAZAAR_SEND = 0x33,
			FL_LOG_ITEM_BAZAAR_RECV = 0x34,
			FL_LOG_ITEM_INSERT_TO_GUILDSTORE = 0x35,
			FL_LOG_ITEM_DRAW_FROM_GUILDSTORE = 0x36,
			FL_LOG_ITEM_SPI = 0x37,
			FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT = 0x38,
			FL_LOG_QUEST_COMPENSATION = 0x39,
			FL_LOG_WARPOINT = 0x3A,
			FL_LOG_ARENA_TEAM_MATCH = 0x3B,
			FL_LOG_TUTORIAL_COMPLETION = 0x3C,
			FL_LOG_OUTPOST_START = 0x3D,
			FL_LOG_OUTPOST_END = 0x3E,
			FL_LOG_EXPEDIENCYFUND = 0x3F,
			FL_LOG_SERVER_INFO_MAP = 0x40,
			FL_LOG_SERVER_INFO_TOTAL = 0x41,
			FL_LOG_HACKING_LOG = 0x42,
			FL_LOG_LIVE_DELETED_CHARACTER = 0x43,
			FL_LOG_EVENT_PARTICIPATION_RATE = 0x44,
			FL_LOG_ITEM_BUY_CASH_PRICE = 0x46,
			FL_LOG_ITEM_ENCHANT_BY_ADMIN = 0x47,
			FL_LOG_ITEM_DISENCHANT_BY_ADMIN = 0x48,
			FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT = 0x49,
			FL_LOG_ITEM_TRY_ENCHANT_INFO = 0x4B,
			FL_LOG_ITEM_DISSOLUTION_ITEM = 0x4C,
			FL_LOG_MONSTER_BOSS = 0x50,
			FL_LOG_MS_WAR = 0x51,
			FL_LOG_SP_WAR = 0x52,
			FL_LOG_WAR_CONTRIBUTION = 0x53,
			FL_LOG_WAR_CONTRIBUTION_GEAR = 0x54,
			FL_LOG_SERVER_INTEGRAION = 0x80,
			FL_LOG_SERVER_INTEGRAION_GUILD_STORE_ITEMS = 0x81,
			FL_LOG_SERVER_INTEGRAION_ONLY_CASH_STORE_ITEMS = 0x82,
			FL_LOG_INFLWAR_START = 0x90,
			FL_LOG_INFLWAR_END = 0x91,
			FL_LOG_OUTPOSTWAR_RESET_START = 0x95,
			FL_LOG_OUTPOSTWAR_RESET_DESTROY = 0x96,
			FL_LOG_OUTPOSTWAR_RESET_COMPLETE = 0x97,
			FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY = 0x98,
			FL_LOG_OUTPOSTWAR_SET_NEXTTIME = 0x99,
			FL_LOG_POLL_VOTE = 0xA0,
			FL_LOG_POLL_DELETE_LEADERCANDIDATE = 0xA1,
			FL_LOG_DISMEMBER_GUILD = 0xA2,
			FL_LOG_NOTIFY_MSG_DELETE = 0xA3,
			FL_LOG_USE_COUPON = 0xA4,
			FL_LOG_ITEM_GIFT_SEND = 0xB0,
			FL_LOG_ITEM_GIFT_RECV = 0xB1,
			FL_LOG_ITEM_REARRANGE_DELETE_ITEM = 0xB2,
			FL_LOG_ITEM_REARRANGE_ITEM = 0xB3,
			FL_LOG_ITEM_ATTACH_ITEM = 0xB4,
			FL_LOG_ITEM_DETACH_ITEM = 0xB5,
			FL_LOG_ITEM_DELETE = 0xB6,
			FL_LOG_LUCKY_DROP = 0xC0,
			FL_LOG_INFINITY_START = 0xC1,
			FL_LOG_INFINITY_START_ITEM = 0xC2,
			FL_LOG_INFINITY_CINEMA = 0xC3,
			FL_LOG_MONSTER_SKILL = 0xC4,
			FL_LOG_HPACTION_TALK = 0xC5,
			FL_LOG_INFINITY_FIN = 0xC6,
			FL_LOG_INFINITY_FIN_ITEM = 0xC7,
			FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER = 0xC8,
			FL_LOG_INFINITY_LEAVE_ITEM = 0xC9,
			FL_LOG_BLOCK_ACCOUNT = 0xD0,
			FL_LOG_UNBLOCK_ACCOUNT = 0xD1,
			FL_LOG_PET_LEVEL = 0xD5,
			FL_LOG_CONNECT_USER_NEW = 0xD6,
			FL_LOG_CONNECT_USER_LOGIN = 0xD7,
			FL_LOG_STATISTICS_MONEY = 0xD8,
			FL_LOG_FIXED_TERM_SHAPE_START = 0xD9,
			FL_LOG_FIXED_TERM_SHAPE_END = 0xDA,
			FL_LOG_ACCOUNTCONNECT = 0xDB,
			FL_LOG_CHARDATA = 0xDC,
			FL_LOG_ITEM = 0xDD,
			FL_LOG_ITEMSTATE = 0xDE,
			FL_LOG_SERVER = 0xDF,
			FL_LOG_ITEM_INITIALIZED_GUILD_STORE = 0xE0,
			FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT = 0xE1,
			FL_LOG_COLLECTION_STATE = 0xE2,
			FL_LOG_COLLECTION_SHAPE_CHANGE = 0xE3,
			FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN = 0xE4,
			FL_LOG_START_FIELD_SERVER = 0xFF,
		};
	};

	//template<> struct T1<T0::enum_t::PRE_TOOL>
	//{
	//	enum class enum_t : unsigned char
	//	{
	//		PT_RELOAD = 0x00,
	//	};
	//};

	template<> struct T1<T0::enum_t::PAUTH_CONNECT>
	{
		enum class enum_t : unsigned char
		{
			PAUTH_CONNECT_LOGIN = 0x00,
			PAUTH_CONNECT_LOGIN_OK = 0x01,
			PAUTH_CONNECT_LOGIN_FAIL = 0x02,
			PAUTH_CONNECT_LOGIN_SHUTDOWN = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::PM_MONITOR>
	{
		enum class enum_t : unsigned char
		{
			PM_GET_NUM_CLIENTS = 0x00,
			PM_GET_NUM_CLIENTS_OK = 0x01,
			PM_SHUTDOWN = 0x02,
			PM_SHUTDOWN_OK = 0x03,
			PM_CLOSE = 0x04,
			PM_CLOSE_OK = 0x05,
			PM_PING = 0x06,
			PM_PING_OK = 0x07,
			PM_RELOAD_VERSION_INFO = 0x08,
			PM_RELOAD_VERSION_INFO_OK = 0x09,
			PM_CHANGE_BANDWIDTH_FLAG = 0x0A,
			PM_CHANGE_BANDWIDTH_FLAG_OK = 0x0B,
			PM_SET_MSG_PRINT_LEVEL = 0x0C,
			PM_PAUSE_SERVICE = 0x0D,
			PM_PAUSE_SERVICE_OK = 0x0E,
			PM_START_SERVICE = 0x0F,
			PM_START_SERVICE_OK = 0x10,
			PM_GET_SERVER_GROUP_INFO = 0x11,
			PM_GET_SERVER_GROUP_INFO_ACK = 0x12,
			PM_SET_LIMIT_GROUP_USER_COUNTS = 0x13,
			PM_SERVER_THREAD_STATUS = 0x14,
			PM_RELOAD_BLOCKED_ACCOUNTS = 0x15,
			PM_RELOAD_BLOCKED_ACCOUNTS_OK = 0x16,
			PM_CHANGE_ENABLE_SERVER_GROUP = 0x18,
			PM_PREPARE_SHUTDOWN = 0x19,
			PM_AUTO_UPDATE_HTTP_SERVER_SETTING = 0x21,
			PM_RELOAD_VERSION_INFO_HEADER = 0x22,
			PM_RELOAD_VERSION_INFO_LIST = 0x23,
			PM_RELOAD_VERSION_INFO_DONE = 0x24,
		};
	};

	template<> struct T1<T0::enum_t::IM_MONITOR>
	{
		enum class enum_t : unsigned char
		{
			IM_GET_NUM_CLIENTS = 0x00,
			IM_GET_NUM_CLIENTS_OK = 0x01,
			IM_SHUTDOWN = 0x02,
			IM_SHUTDOWN_OK = 0x03,
			IM_PING = 0x04,
			IM_PING_OK = 0x05,
			IM_PRINTMAP = 0x06,
			IM_PRINT_DEBUG_MSG = 0x08,
			IM_CHANGE_BANDWIDTH_FLAG = 0x0A,
			IM_CHANGE_BANDWIDTH_FLAG_OK = 0x0B,
			IM_SET_MSG_PRINT_LEVEL = 0x0C,
			IM_GET_TOTAL_USER_COUNTS = 0x0D,
			IM_GET_TOTAL_USER_COUNTS_ACK = 0x0E,
			IM_SERVER_THREAD_STATUS = 0x0F,
		};
	};

	template<> struct T1<T0::enum_t::FM_MONITOR>
	{
		enum class enum_t : unsigned char
		{
			FM_GET_NUM_CLIENTS = 0x00,
			FM_GET_NUM_CLIENTS_OK = 0x01,
			FM_SHUTDOWN = 0x02,
			FM_SHUTDOWN_OK = 0x03,
			FM_PING = 0x04,
			FM_PING_OK = 0x05,
			FM_PRINTMAP = 0x06,
			FM_SAVE_MAPBLOCK_INFO = 0x07,
			FM_PRINT_DEBUG_MSG = 0x08,
			FM_SEND_CHANNEL_INFO = 0x09,
			FM_CHANGE_BANDWIDTH_FLAG = 0x0A,
			FM_CHANGE_BANDWIDTH_FLAG_OK = 0x0B,
			FM_SET_MSG_PRINT_LEVEL = 0x0C,
			FM_GET_CHARACTER_INFO = 0x0D,
			FM_GET_CHARACTER_INFO_OK = 0x0E,
			FM_GET_MAP_USER_COUNTS = 0x0F,
			FM_GET_MAP_USER_COUNTS_ACK = 0x10,
			FM_RELOAD_ITEM_INFO = 0x11,
			FM_RELOAD_ITEM_INFO_OK = 0x12,
			FM_RESET_NPC_SERVER = 0x13,
			FM_RESET_NPC_SERVER_OK = 0x14,
			FM_SERVER_THREAD_STATUS = 0x15,
			FM_SET_SERVICE_STATE = 0x16,
			FM_SET_SERVICE_STATE_OK = 0x17,
			FM_RELOAD_SERVER_INFO = 0x18,
			FM_RELOAD_SERVER_INFO_OK = 0x19,
			FM_INCREASE_CHANNEL = 0x1A,
			FM_INCREASE_CHANNEL_OK = 0x1B,
			FM_SET_CHANNEL_STATE = 0x1C,
			FM_SET_CHANNEL_STATE_OK = 0x1D,
			FM_CITYWAR_CHANGE_WAR_TIME = 0x20,
			FM_CITYWAR_CHANGED_OCCUPY_INFO = 0x21,
		};
	};

	template<> struct T1<T0::enum_t::NM_MONITOR>
	{
		enum class enum_t : unsigned char
		{
			NM_GET_NUM_MONSTERS = 0x00,
			NM_GET_NUM_MONSTERS_OK = 0x01,
			NM_SHUTDOWN = 0x02,
			NM_SHUTDOWN_OK = 0x03,
			NM_PING = 0x04,
			NM_PING_OK = 0x05,
			NM_PRINTMAP = 0x06,
			NM_SAVE_MAPBLOCK_INFO = 0x07,
			NM_SEND_CHANNEL_INFO = 0x08,
			NM_CHANGE_BANDWIDTH_FLAG = 0x0A,
			NM_CHANGE_BANDWIDTH_FLAG_OK = 0x0B,
			NM_SET_MSG_PRINT_LEVEL = 0x0C,
			NM_GET_MAP_USER_COUNTS = 0x0D,
			NM_GET_MAP_USER_COUNTS_ACK = 0x0E,
			NM_SET_LIMIT_MONSTER_COUNT = 0x0F,
			NM_SET_LIMIT_MONSTER_COUNT_ACK = 0x10,
			NM_SERVER_THREAD_STATUS = 0x11,
			NM_SET_CHANNEL_STATE_OK = 0x12,
		};
	};

	template<> struct T1<T0::enum_t::PA_ADMIN>
	{
		enum class enum_t : unsigned char
		{
			PA_ADMIN_CONNECT = 0x00,
			PA_ADMIN_CONNECT_OK = 0x01,
			PA_ADMIN_CHANGE_SERVER_STATE = 0x02,
			PA_ADMIN_GET_ACCOUNT_INFO = 0x03,
			PA_ADMIN_GET_ACCOUNT_INFO_OK = 0x04,
			PA_ADMIN_DISCONNECT_USER = 0x05,
			PA_ADMIN_DISCONNECT_USER_OK = 0x06,
			PA_ADMIN_BLOCK_ACCOUNT = 0x07,
			PA_ADMIN_BLOCK_ACCOUNT_OK = 0x08,
			PA_ADMIN_UNBLOCK_ACCOUNT = 0x09,
			PA_ADMIN_UNBLOCK_ACCOUNT_OK = 0x0A,
			PA_ADMIN_GET_SERVER_INFO = 0x0B,
			PA_ADMIN_GET_SERVER_INFO_OK = 0x0C,
			PA_ADMIN_GET_ACCOUNT_LIST = 0x0D,
			PA_ADMIN_GET_ACCOUNT_LIST_OK = 0x0E,
			PA_ADMIN_RELOAD_HAPPYEV = 0x0F,
			PA_ADMIN_RELOAD_ITEMEV = 0x10,
			PA_ADMIN_UPDATE_PCBANGLIST = 0x11,
			PA_ADMIN_UPDATE_STRATEGYPOINT_NOTSUMMONTIME = 0x12,
			PA_ADMIN_PETITION_SET_PERIOD = 0x13,
			PA_ADMIN_SET_DBSERVER_GROUP = 0x14,
			PA_ADMIN_SET_DBSERVER_GROUP_OK = 0x15,
			PA_ADMIN_RELOAD_ADMIN_NOTICE_SYSTEM = 0x16,
			PA_ADMIN_RELOAD_WORLDRANKING = 0x17,
			PA_ADMIN_RELOAD_INFLUENCERATE = 0x18,
			PA_ADMIN_LOG_ACCOUNT_ACCOUNTTYPE_CHANGE = 0x1B,
			PA_ADMIN_LOG_CHARACTER_RACEACCOUNTTYPE_CHANGE = 0x1C,
			PA_ADMIN_STRATRGYPOINT_INFO_CHANGE = 0x1D,
		};
	};

	template<> struct T1<T0::enum_t::IA_ADMIN>
	{
		enum class enum_t : unsigned char
		{
			IA_ADMIN_CONNECT = 0x00,
			IA_ADMIN_CONNECT_OK = 0x01,
			IA_ADMIN_CHANGE_SERVER_STATE = 0x02,
			IA_ADMIN_GET_CHARACTER = 0x03,
			IA_ADMIN_GET_CHARACTER_OK = 0x04,
			IA_ADMIN_CHAT_ALL = 0x05,
			IA_ADMIN_GET_SERVER_INFO = 0x06,
			IA_ADMIN_GET_SERVER_INFO_OK = 0x07,
		};
	};

	template<> struct T1<T0::enum_t::FA_ADMIN>
	{
		enum class enum_t : unsigned char
		{
			FA_ADMIN_CONNECT = 0x00,
			FA_ADMIN_CONNECT_OK = 0x01,
			FA_ADMIN_CHANGE_SERVER_STATE = 0x02,
		};
	};

	template<> struct T1<T0::enum_t::PRE>
	{
		enum class enum_t : unsigned char
		{
			PRE_IOCP = 0x00,
			PRE_DB = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::IM>
	{
		enum class enum_t : unsigned char
		{
			IM_IOCP = 0x00,
			IM_DB = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::FIELD>
	{
		enum class enum_t : unsigned char
		{
			FIELD_IOCP = 0x00,
			FIELD_DB = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::NPC>
	{
		enum class enum_t : unsigned char
		{
			NPC_IOCP = 0x00,
			NPC_DB = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::FC_TRIGGER>
	{
		enum class enum_t : unsigned char
		{
			FC_TRIGGER_MAP_BUFF_SKILL = 0x00,
			FC_SET_LIMITTIME = 0x01,
		};
	};

	template<> struct T1<T0::enum_t::FC_COLLECTION>
	{
		enum class enum_t : unsigned char
		{
			FC_COLLECTION_INFO = 0x00,
			FC_COLLECTION_SHAPE_CHANGE = 0x01,
			FC_COLLECTION_MONTHLY_AROMOR_EVENT_INIT = 0x02,
			FC_COLLECTION_MONTHLY_AROMOR_EVENT_INFO = 0x03,
		};
	};

	template<> struct T1<T0::enum_t::TIMER>
	{
		enum class enum_t : unsigned char
		{
			TIMER = 0x00,
		};
	};

	template<> struct T1<T0::enum_t::DB>
	{
		enum class enum_t : unsigned char
		{
			DB = 0x00,
		};
	};

	template<> struct T1<T0::enum_t::ATUMERROR>
	{
		enum class enum_t : unsigned char
		{
			ATUMERROR = 0x00,
		};
	};

	template<> struct T1<T0::enum_t::NA>
	{
		enum class enum_t : unsigned char
		{
			NA = 0x00,
		};
	};


	template<T0::enum_t t0, typename T1<t0>::enum_t t1>
	struct DefineMessageType { enum : MessageType_t { value = (unsigned(t0) << 8) + unsigned(t1) }; };

	constexpr T0::enum_t GetT0(MessageType_t msgtype) { return T0::enum_t(msgtype >> 8); }
}


using T0 = protocol::T0::enum_t;
template<T0 t0> using T1 = typename protocol::T1<t0>::enum_t;

#define MakeMessageType(x, y) protocol::DefineMessageType<T0::x, T1<T0::x>::y>::value

using protocol::GetT0;

enum : MessageType_t
{
	T_PC_DEFAULT_UPDATE_LAUNCHER_VERSION = MakeMessageType(PC_DEFAULT_UPDATE, PC_DEFAULT_UPDATE_LAUNCHER_VERSION),
	T_PC_DEFAULT_UPDATE_LAUNCHER_UPDATE_INFO = MakeMessageType(PC_DEFAULT_UPDATE, PC_DEFAULT_UPDATE_LAUNCHER_UPDATE_INFO),
	T_PC_DEFAULT_UPDATE_LAUNCHER_VERSION_OK = MakeMessageType(PC_DEFAULT_UPDATE, PC_DEFAULT_UPDATE_LAUNCHER_VERSION_OK),
	T_PC_DEFAULT_NEW_UPDATE_LAUNCHER_VERSION = MakeMessageType(PC_DEFAULT_UPDATE, PC_DEFAULT_NEW_UPDATE_LAUNCHER_VERSION),
	T_PC_DEFAULT_NEW_UPDATE_LAUNCHER_UPDATE_INFO = MakeMessageType(PC_DEFAULT_UPDATE, PC_DEFAULT_NEW_UPDATE_LAUNCHER_UPDATE_INFO),
	T_PC_CONNECT_CLOSE = MakeMessageType(PC_CONNECT, PC_CONNECT_CLOSE),
	T_PC_CONNECT_ALIVE = MakeMessageType(PC_CONNECT, PC_CONNECT_ALIVE),
	T_PC_CONNECT_VERSION = MakeMessageType(PC_CONNECT, PC_CONNECT_VERSION),
	T_PC_CONNECT_UPDATE_INFO = MakeMessageType(PC_CONNECT, PC_CONNECT_UPDATE_INFO),
	T_PC_CONNECT_VERSION_OK = MakeMessageType(PC_CONNECT, PC_CONNECT_VERSION_OK),
	T_PC_CONNECT_REINSTALL_CLIENT = MakeMessageType(PC_CONNECT, PC_CONNECT_REINSTALL_CLIENT),
	T_PC_CONNECT_LOGIN = MakeMessageType(PC_CONNECT, PC_CONNECT_LOGIN),
	T_PC_CONNECT_LOGIN_OK = MakeMessageType(PC_CONNECT, PC_CONNECT_LOGIN_OK),
	T_PC_CONNECT_SINGLE_FILE_VERSION_CHECK = MakeMessageType(PC_CONNECT, PC_CONNECT_SINGLE_FILE_VERSION_CHECK),
	T_PC_CONNECT_SINGLE_FILE_VERSION_CHECK_OK = MakeMessageType(PC_CONNECT, PC_CONNECT_SINGLE_FILE_VERSION_CHECK_OK),
	T_PC_CONNECT_SINGLE_FILE_UPDATE_INFO = MakeMessageType(PC_CONNECT, PC_CONNECT_SINGLE_FILE_UPDATE_INFO),
	T_PC_CONNECT_GET_SERVER_GROUP_LIST = MakeMessageType(PC_CONNECT, PC_CONNECT_GET_SERVER_GROUP_LIST),
	T_PC_CONNECT_GET_SERVER_GROUP_LIST_OK = MakeMessageType(PC_CONNECT, PC_CONNECT_GET_SERVER_GROUP_LIST_OK),
	T_PC_CONNECT_GET_GAME_SERVER_GROUP_LIST = MakeMessageType(PC_CONNECT, PC_CONNECT_GET_GAME_SERVER_GROUP_LIST),
	T_PC_CONNECT_GET_GAME_SERVER_GROUP_LIST_OK = MakeMessageType(PC_CONNECT, PC_CONNECT_GET_GAME_SERVER_GROUP_LIST_OK),
	T_PC_CONNECT_NETWORK_CHECK = MakeMessageType(PC_CONNECT, PC_CONNECT_NETWORK_CHECK),
	T_PC_CONNECT_NETWORK_CHECK_OK = MakeMessageType(PC_CONNECT, PC_CONNECT_NETWORK_CHECK_OK),
	T_PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST = MakeMessageType(PC_CONNECT, PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST),
	T_PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST_OK = MakeMessageType(PC_CONNECT, PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST_OK),
	T_PC_CONNECT_LOGIN_BLOCKED = MakeMessageType(PC_CONNECT, PC_CONNECT_LOGIN_BLOCKED),
	T_PC_CONNECT_MAC_BLOCKED = MakeMessageType(PC_CONNECT, PC_CONNECT_MAC_BLOCKED),
	T_FN_CONNECT_CLOSE = MakeMessageType(FN_CONNECT, FN_CONNECT_CLOSE),
	T_FN_CONNECT_ALIVE = MakeMessageType(FN_CONNECT, FN_CONNECT_ALIVE),
	T_FN_CONNECT_INCREASE_CHANNEL = MakeMessageType(FN_CONNECT, FN_CONNECT_INCREASE_CHANNEL),
	T_FN_CONNECT_SET_CHANNEL_STATE = MakeMessageType(FN_CONNECT, FN_CONNECT_SET_CHANNEL_STATE),
	T_FC_BATTLE_ATTACK = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK),
	T_FC_BATTLE_ATTACK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_OK),
	T_FC_BATTLE_ATTACK_FIND = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_FIND),
	T_FC_BATTLE_ATTACK_FIND_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_FIND_OK),
	T_FC_BATTLE_DROP_MINE = MakeMessageType(FC_BATTLE, FC_BATTLE_DROP_MINE),
	T_FC_BATTLE_DROP_MINE_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_DROP_MINE_OK),
	T_FC_BATTLE_MINE_ATTACK = MakeMessageType(FC_BATTLE, FC_BATTLE_MINE_ATTACK),
	T_FC_BATTLE_MINE_ATTACK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_MINE_ATTACK_OK),
	T_FC_BATTLE_MINE_ATTACK_FIND = MakeMessageType(FC_BATTLE, FC_BATTLE_MINE_ATTACK_FIND),
	T_FC_BATTLE_MINE_ATTACK_FIND_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_MINE_ATTACK_FIND_OK),
	T_FC_BATTLE_REQUEST_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_REQUEST_PK),
	T_FC_BATTLE_REQUEST_PK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_REQUEST_PK_OK),
	T_FC_BATTLE_CANCEL_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_CANCEL_PK),
	T_FC_BATTLE_REQUEST_P2P_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_REQUEST_P2P_PK),
	T_FC_BATTLE_REQUEST_P2P_PK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_REQUEST_P2P_PK_OK),
	T_FC_BATTLE_ACCEPT_REQUEST_P2P_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_ACCEPT_REQUEST_P2P_PK),
	T_FC_BATTLE_ACCEPT_REQUEST_P2P_PK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_ACCEPT_REQUEST_P2P_PK_OK),
	T_FC_BATTLE_REJECT_REQUEST_P2P_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_REJECT_REQUEST_P2P_PK),
	T_FC_BATTLE_REJECT_REQUEST_P2P_PK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_REJECT_REQUEST_P2P_PK_OK),
	T_FC_BATTLE_SURRENDER_P2P_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_SURRENDER_P2P_PK),
	T_FC_BATTLE_SURRENDER_P2P_PK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_SURRENDER_P2P_PK_OK),
	T_FC_BATTLE_ACCEPT_SURRENDER_P2P_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_ACCEPT_SURRENDER_P2P_PK),
	T_FC_BATTLE_REJECT_SURRENDER_P2P_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_REJECT_SURRENDER_P2P_PK),
	T_FC_BATTLE_REJECT_SURRENDER_P2P_PK_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_REJECT_SURRENDER_P2P_PK_OK),
	T_FC_BATTLE_END_P2P_PK = MakeMessageType(FC_BATTLE, FC_BATTLE_END_P2P_PK),
	T_FC_BATTLE_ATTACK_EXPLODE_ITEM = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_EXPLODE_ITEM),
	T_FC_BATTLE_ATTACK_HIDE_ITEM = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_HIDE_ITEM),
	T_FC_BATTLE_ATTACK_EXPLODE_ITEM_W_KIND = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_EXPLODE_ITEM_W_KIND),
	T_FC_BATTLE_ATTACK_HIDE_ITEM_W_KIND = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_HIDE_ITEM_W_KIND),
	T_FC_BATTLE_TOGGLE_SHIELD = MakeMessageType(FC_BATTLE, FC_BATTLE_TOGGLE_SHIELD),
	T_FC_BATTLE_TOGGLE_SHIELD_RESULT = MakeMessageType(FC_BATTLE, FC_BATTLE_TOGGLE_SHIELD_RESULT),
	T_FC_BATTLE_DROP_DUMMY = MakeMessageType(FC_BATTLE, FC_BATTLE_DROP_DUMMY),
	T_FC_BATTLE_DROP_DUMMY_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_DROP_DUMMY_OK),
	T_FC_BATTLE_DROP_FIXER = MakeMessageType(FC_BATTLE, FC_BATTLE_DROP_FIXER),
	T_FC_BATTLE_DROP_FIXER_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_DROP_FIXER_OK),
	T_FC_BATTLE_PRI_BULLET_RELOADED = MakeMessageType(FC_BATTLE, FC_BATTLE_PRI_BULLET_RELOADED),
	T_FC_BATTLE_SEC_BULLET_RELOADED = MakeMessageType(FC_BATTLE, FC_BATTLE_SEC_BULLET_RELOADED),
	T_FC_BATTLE_SHIELD_DAMAGE = MakeMessageType(FC_BATTLE, FC_BATTLE_SHIELD_DAMAGE),
	T_FC_BATTLE_TOGGLE_DECOY = MakeMessageType(FC_BATTLE, FC_BATTLE_TOGGLE_DECOY),
	T_FC_BATTLE_TOGGLE_DECOY_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_TOGGLE_DECOY_OK),
	T_FC_BATTLE_SHOW_DAMAGE = MakeMessageType(FC_BATTLE, FC_BATTLE_SHOW_DAMAGE),
	T_FC_BATTLE_ATTACK_EVASION = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_EVASION),
	T_FC_BATTLE_ATTACK_EVASION_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_ATTACK_EVASION_OK),
	T_FC_BATTLE_DELETE_DUMMY_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_DELETE_DUMMY_OK),
	T_FC_BATTLE_EXPLODE_DUMMY_OK = MakeMessageType(FC_BATTLE, FC_BATTLE_EXPLODE_DUMMY_OK),
	T_FC_BATTLE_MONSTER_BARRIER_USING = MakeMessageType(FC_BATTLE, FC_BATTLE_MONSTER_BARRIER_USING),
	T_FC_BATTLE_MONSTER_BARRIER_USE = MakeMessageType(FC_BATTLE, FC_BATTLE_MONSTER_BARRIER_USE),
	T_FP_CONNECT_CLOSE = MakeMessageType(FP_CONNECT, FP_CONNECT_CLOSE),
	T_FP_CONNECT_ALIVE = MakeMessageType(FP_CONNECT, FP_CONNECT_ALIVE),
	T_FP_CONNECT_AUTH_USER = MakeMessageType(FP_CONNECT, FP_CONNECT_AUTH_USER),
	T_FP_CONNECT_AUTH_USER_OK = MakeMessageType(FP_CONNECT, FP_CONNECT_AUTH_USER_OK),
	T_FP_CONNECT_FIELD_CONNECT = MakeMessageType(FP_CONNECT, FP_CONNECT_FIELD_CONNECT),
	T_FP_CONNECT_FIELD_CONNECT_OK = MakeMessageType(FP_CONNECT, FP_CONNECT_FIELD_CONNECT_OK),
	T_FP_CONNECT_NOTIFY_CLOSE = MakeMessageType(FP_CONNECT, FP_CONNECT_NOTIFY_CLOSE),
	T_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE = MakeMessageType(FP_CONNECT, FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE),
	T_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE_OK = MakeMessageType(FP_CONNECT, FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE_OK),
	T_FP_CONNECT_PREPARE_SHUTDOWN = MakeMessageType(FP_CONNECT, FP_CONNECT_PREPARE_SHUTDOWN),
	T_FP_CONNECT_UPDATE_DBSERVER_GROUP = MakeMessageType(FP_CONNECT, FP_CONNECT_UPDATE_DBSERVER_GROUP),
	T_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT = MakeMessageType(FP_CONNECT, FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT),
	T_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT_OK = MakeMessageType(FP_CONNECT, FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT_OK),
	T_FP_ADMIN_RELOAD_WORLDRANKING = MakeMessageType(FP_CONNECT, FP_ADMIN_RELOAD_WORLDRANKING),
	T_FP_ADMIN_RELOAD_INFLUENCERATE = MakeMessageType(FP_CONNECT, FP_ADMIN_RELOAD_INFLUENCERATE),
	T_FP_AUTHENTICATION_SHUTDOWN = MakeMessageType(FP_CONNECT, FP_AUTHENTICATION_SHUTDOWN),
	T_IP_CONNECT_CLOSE = MakeMessageType(IP_CONNECT, IP_CONNECT_CLOSE),
	T_IP_CONNECT_ALIVE = MakeMessageType(IP_CONNECT, IP_CONNECT_ALIVE),
	T_IP_CONNECT_IM_CONNECT = MakeMessageType(IP_CONNECT, IP_CONNECT_IM_CONNECT),
	T_IP_CONNECT_IM_CONNECT_OK = MakeMessageType(IP_CONNECT, IP_CONNECT_IM_CONNECT_OK),
	T_IP_GET_SERVER_GROUP_INFO = MakeMessageType(IP_CONNECT, IP_GET_SERVER_GROUP_INFO),
	T_IP_GET_SERVER_GROUP_INFO_ACK = MakeMessageType(IP_CONNECT, IP_GET_SERVER_GROUP_INFO_ACK),
	T_IP_ADMIN_PETITION_SET_PERIOD = MakeMessageType(IP_CONNECT, IP_ADMIN_PETITION_SET_PERIOD),
	T_IP_ADMIN_RELOAD_ADMIN_NOTICE_SYSTEM = MakeMessageType(IP_CONNECT, IP_ADMIN_RELOAD_ADMIN_NOTICE_SYSTEM),
	T_IP_AUTHENTICATION_SHUTDOWN = MakeMessageType(IP_CONNECT, IP_AUTHENTICATION_SHUTDOWN),
	T_IP_SELECTIVE_SHUTDOWN_NOTICE = MakeMessageType(IP_CONNECT, IP_SELECTIVE_SHUTDOWN_NOTICE),
	T_FI_CONNECT = MakeMessageType(FI_CONNECT, FI_CONNECT),
	T_FI_CONNECT_OK = MakeMessageType(FI_CONNECT, FI_CONNECT_OK),
	T_FI_CONNECT_CLOSE = MakeMessageType(FI_CONNECT, FI_CONNECT_CLOSE),
	T_FI_CONNECT_ALIVE = MakeMessageType(FI_CONNECT, FI_CONNECT_ALIVE),
	T_FI_CONNECT_NOTIFY_FIELDSERVER_IP = MakeMessageType(FI_CONNECT, FI_NOTIFY_FIELDSERVER_IP),
	T_FI_CONNECT_NOTIFY_GAMEEND = MakeMessageType(FI_CONNECT, FI_NOTIFY_GAMEEND),
	T_FI_CONNECT_NOTIFY_DEAD = MakeMessageType(FI_CONNECT, FI_CONNECT_NOTIFY_DEAD),
	T_FI_GET_FIELD_USER_COUNTS = MakeMessageType(FI_CONNECT, FI_GET_FIELD_USER_COUNTS),
	T_FI_GET_FIELD_USER_COUNTS_ACK = MakeMessageType(FI_CONNECT, FI_GET_FIELD_USER_COUNTS_ACK),
	T_FI_CONNECT_NOTIFY_GAMESTART = MakeMessageType(FI_CONNECT, FI_CONNECT_NOTIFY_GAMESTART),
	T_FI_CONNECT_NOTIFY_DEAD_GAMESTART = MakeMessageType(FI_CONNECT, FI_CONNECT_NOTIFY_DEAD_GAMESTART),
	T_FI_CONNECT_PREPARE_SHUTDOWN = MakeMessageType(FI_CONNECT, FI_CONNECT_PREPARE_SHUTDOWN),
	T_IC_CONNECT_CLOSE = MakeMessageType(IC_CONNECT, IC_CONNECT_CLOSE),
	T_IC_CONNECT_ALIVE = MakeMessageType(IC_CONNECT, IC_CONNECT_ALIVE),
	T_IC_CONNECT_LOGIN = MakeMessageType(IC_CONNECT, IC_CONNECT_LOGIN),
	T_IC_CONNECT_LOGIN_OK = MakeMessageType(IC_CONNECT, IC_CONNECT_LOGIN_OK),
	T_IC_CONNECT_FM_TO_IM_OK = MakeMessageType(IC_CONNECT, IC_CONNECT_FM_TO_IM_OK),
	T_PM_CONNECT = MakeMessageType(PM_CONNECT, PM_CONNECT),
	T_PM_CONNECT_OK = MakeMessageType(PM_CONNECT, PM_CONNECT_OK),
	T_PM_CONNECT_CLOSE = MakeMessageType(PM_CONNECT, PM_CONNECT_CLOSE),
	T_PM_CONNECT_ALIVE = MakeMessageType(PM_CONNECT, PM_CONNECT_ALIVE),
	T_FM_CONNECT = MakeMessageType(FM_CONNECT, FM_CONNECT),
	T_FM_CONNECT_OK = MakeMessageType(FM_CONNECT, FM_CONNECT_OK),
	T_FM_CONNECT_CLOSE = MakeMessageType(FM_CONNECT, FM_CONNECT_CLOSE),
	T_FM_CONNECT_ALIVE = MakeMessageType(FM_CONNECT, FM_CONNECT_ALIVE),
	T_LM_CONNECT = MakeMessageType(LM_CONNECT, LM_CONNECT),
	T_LM_CONNECT_OK = MakeMessageType(LM_CONNECT, LM_CONNECT_OK),
	T_LM_CONNECT_CLOSE = MakeMessageType(LM_CONNECT, LM_CONNECT_CLOSE),
	T_LM_CONNECT_ALIVE = MakeMessageType(LM_CONNECT, LM_CONNECT_ALIVE),
	T_IM_CONNECT = MakeMessageType(IM_CONNECT, IM_CONNECT),
	T_IM_CONNECT_OK = MakeMessageType(IM_CONNECT, IM_CONNECT_OK),
	T_IM_CONNECT_CLOSE = MakeMessageType(IM_CONNECT, IM_CONNECT_CLOSE),
	T_IM_CONNECT_ALIVE = MakeMessageType(IM_CONNECT, IM_CONNECT_ALIVE),
	T_NM_CONNECT = MakeMessageType(NM_CONNECT, NM_CONNECT),
	T_NM_CONNECT_OK = MakeMessageType(NM_CONNECT, NM_CONNECT_OK),
	T_NM_CONNECT_CLOSE = MakeMessageType(NM_CONNECT, NM_CONNECT_CLOSE),
	T_NM_CONNECT_ALIVE = MakeMessageType(NM_CONNECT, NM_CONNECT_ALIVE),
	T_PL_CONNECT = MakeMessageType(PL_CONNECT, PL_CONNECT),
	T_PL_CONNECT_OK = MakeMessageType(PL_CONNECT, PL_CONNECT_OK),
	T_PL_CONNECT_CLOSE = MakeMessageType(PL_CONNECT, PL_CONNECT_CLOSE),
	T_PL_CONNECT_ALIVE = MakeMessageType(PL_CONNECT, PL_CONNECT_ALIVE),
	T_IL_CONNECT = MakeMessageType(IL_CONNECT, IL_CONNECT),
	T_IL_CONNECT_OK = MakeMessageType(IL_CONNECT, IL_CONNECT_OK),
	T_IL_CONNECT_CLOSE = MakeMessageType(IL_CONNECT, IL_CONNECT_CLOSE),
	T_IL_CONNECT_ALIVE = MakeMessageType(IL_CONNECT, IL_CONNECT_ALIVE),
	T_FL_CONNECT = MakeMessageType(FL_CONNECT, FL_CONNECT),
	T_FL_CONNECT_OK = MakeMessageType(FL_CONNECT, FL_CONNECT_OK),
	T_FL_CONNECT_CLOSE = MakeMessageType(FL_CONNECT, FL_CONNECT_CLOSE),
	T_FL_CONNECT_ALIVE = MakeMessageType(FL_CONNECT, FL_CONNECT_ALIVE),
	T_NL_CONNECT = MakeMessageType(NL_CONNECT, NL_CONNECT),
	T_NL_CONNECT_OK = MakeMessageType(NL_CONNECT, NL_CONNECT_OK),
	T_NL_CONNECT_CLOSE = MakeMessageType(NL_CONNECT, NL_CONNECT_CLOSE),
	T_NL_CONNECT_ALIVE = MakeMessageType(NL_CONNECT, NL_CONNECT_ALIVE),
	T_FtoA_MFSINFO = MakeMessageType(MF_TO_AF, FtoA_MFSINFO),
	T_FtoA_MFSINFO_OK = MakeMessageType(MF_TO_AF, FtoA_MFSINFO_OK),
	T_FtoA_ALIVE = MakeMessageType(MF_TO_AF, FtoA_ALIVE),
	T_FtoA_AUTH_CHARACTER = MakeMessageType(MF_TO_AF, FtoA_AUTH_CHARACTER),
	T_FtoA_AUTH_CHARACTER_OK = MakeMessageType(MF_TO_AF, FtoA_AUTH_CHARACTER_OK),
	T_FtoA_ARENA_STATE_CHANGE = MakeMessageType(MF_TO_AF, FtoA_ARENA_STATE_CHANGE),
	T_FtoA_ARENA_TEAM_MATCHING = MakeMessageType(MF_TO_AF, FtoA_ARENA_TEAM_MATCHING),
	T_FtoA_ARENA_TEAM_MATCHING_OK = MakeMessageType(MF_TO_AF, FtoA_ARENA_TEAM_MATCHING_OK),
	T_FtoA_ARENA_SERVER_PAY = MakeMessageType(MF_TO_AF, FtoA_ARENA_SERVER_PAY),
	T_FtoA_ARENA_CHARACTER_PAY = MakeMessageType(MF_TO_AF, FtoA_ARENA_CHARACTER_PAY),
	T_FtoA_ARENA_CHARACTER_DISCONNECT = MakeMessageType(MF_TO_AF, FtoA_ARENA_CHARACTER_DISCONNECT),
	T_FtoA_ARENA_CHARACTERARENAINFO_UPDATA = MakeMessageType(MF_TO_AF, FtoA_ARENA_CHARACTERARENAINFO_UPDATA),
	T_FtoA_ARENA_CHARACTER_RESET_RELOAD = MakeMessageType(MF_TO_AF, FtoA_ARENA_CHARACTER_RESET_RELOAD),
	T_FtoA_INFINITY_IMPUTE_LIST = MakeMessageType(MF_TO_AF, FtoA_INFINITY_IMPUTE_LIST),
	T_FtoA_INFINITY_START = MakeMessageType(MF_TO_AF, FtoA_INFINITY_START),
	T_FtoA_INFINITY_START_OK = MakeMessageType(MF_TO_AF, FtoA_INFINITY_START_OK),
	T_FtoA_INFINITY_IMPUTE = MakeMessageType(MF_TO_AF, FtoA_INFINITY_IMPUTE),
	T_FtoA_INFINITY_UPDATE_ALL_ITEM_COUNT = MakeMessageType(MF_TO_AF, FtoA_INFINITY_UPDATE_ALL_ITEM_COUNT),
	T_FtoA_INFINITY_INSERT_ITEM_HEADER = MakeMessageType(MF_TO_AF, FtoA_INFINITY_INSERT_ITEM_HEADER),
	T_FtoA_INFINITY_INSERT_ITEM = MakeMessageType(MF_TO_AF, FtoA_INFINITY_INSERT_ITEM),
	T_FtoA_INFINITY_INSERT_ITEM_DONE = MakeMessageType(MF_TO_AF, FtoA_INFINITY_INSERT_ITEM_DONE),
	T_FtoA_INFINITY_UPDATE_ITEM_HEADER = MakeMessageType(MF_TO_AF, FtoA_INFINITY_UPDATE_ITEM_HEADER),
	T_FtoA_INFINITY_UPDATE_ITEM = MakeMessageType(MF_TO_AF, FtoA_INFINITY_UPDATE_ITEM),
	T_FtoA_INFINITY_UPDATE_ITEM_DONE = MakeMessageType(MF_TO_AF, FtoA_INFINITY_UPDATE_ITEM_DONE),
	T_FtoA_INFINITY_DELETE_ITEM = MakeMessageType(MF_TO_AF, FtoA_INFINITY_DELETE_ITEM),
	T_FtoA_INFINITY_UPDATE_USER_INFO = MakeMessageType(MF_TO_AF, FtoA_INFINITY_UPDATE_USER_INFO),
	T_FtoA_INFINITY_READY_FINISH_MAINSVR_START = MakeMessageType(MF_TO_AF, FtoA_INFINITY_READY_FINISH_MAINSVR_START),
	T_FtoA_INFINITY_LOG = MakeMessageType(MF_TO_AF, FtoA_INFINITY_LOG),
	T_FtoA_INFINITY_USING_TIME_LIMIT_ITEM = MakeMessageType(MF_TO_AF, FtoA_USING_TIME_LIMIT_ITEM),
	T_FtoA_INFINITY_STATE_CHANGE = MakeMessageType(MF_TO_AF, FtoA_INFINITY_STATE_CHANGE),
	T_FtoA_INFINITY_START_CHECK = MakeMessageType(MF_TO_AF, FtoA_INFINITY_START_CHECK),
	T_FtoA_INFINITY_START_CHECK_ACK = MakeMessageType(MF_TO_AF, FtoA_INFINITY_START_CHECK_ACK),
	T_FtoA_UPDATE_ITEM_NOTI = MakeMessageType(MF_TO_AF, FtoA_UPDATE_ITEM_NOTI),
	T_FtoA_INFINITY_UPDATE_USER_MAP_INFO = MakeMessageType(MF_TO_AF, FtoA_INFINITY_UPDATE_USER_MAP_INFO),
	T_FtoA_LOG_INFINITY_USER_GET_TENDERITEM = MakeMessageType(MF_TO_AF, FtoA_LOG_INFINITYUSER_GET_TENDERITEM),
	T_FtoA_INFINITY_COME_BACK_PREWORK = MakeMessageType(MF_TO_AF, FtoA_INFINITY_COME_BACK_PREWORK),
	T_FtoA_INFINITY_UPDATE_ITEM_PET = MakeMessageType(MF_TO_AF, FtoA_INFINITY_UPDATE_ITEM_PET),
	T_FtoA_INFINITY_COME_BACK_POSTWORK = MakeMessageType(MF_TO_AF, FtoA_INFINITY_COME_BACK_POSTWORK),
	T_PP_CONNECT = MakeMessageType(PP_CONNECT, PP_CONNECT),
	T_PP_CONNECT_OK = MakeMessageType(PP_CONNECT, PP_CONNECT_OK),
	T_PP_CONNECT_DO_CLOSE = MakeMessageType(PP_CONNECT, PP_CONNECT_DO_CLOSE),
	T_FC_ADMIN_GET_SERVER_STAT = MakeMessageType(FC_ADMIN, FC_ADMIN_GET_SERVER_STAT),
	T_FC_ADMIN_GET_SERVER_STAT_OK = MakeMessageType(FC_ADMIN, FC_ADMIN_GET_SERVER_STAT_OK),
	T_FC_CONNECT_CLOSE = MakeMessageType(FC_CONNECT, FC_CONNECT_CLOSE),
	T_FC_CONNECT_ALIVE = MakeMessageType(FC_CONNECT, FC_CONNECT_ALIVE),
	T_FC_CONNECT_LOGIN = MakeMessageType(FC_CONNECT, FC_CONNECT_LOGIN),
	T_FC_CONNECT_LOGIN_OK = MakeMessageType(FC_CONNECT, FC_CONNECT_LOGIN_OK),
	T_FC_CONNECT_SYNC_TIME = MakeMessageType(FC_CONNECT, FC_CONNECT_SYNC_TIME),
	T_FC_CONNECT_NOTIFY_SERVER_SHUTDOWN = MakeMessageType(FC_CONNECT, FC_CONNECT_NOTIFY_SERVER_SHUTDOWN),
	T_FC_CONNECT_NETWORK_CHECK = MakeMessageType(FC_CONNECT, FC_CONNECT_NETWORK_CHECK),
	T_FC_CONNECT_NETWORK_CHECK_OK = MakeMessageType(FC_CONNECT, FC_CONNECT_NETWORK_CHECK_OK),
	T_FC_CONNECT_ARENASERVER_INFO = MakeMessageType(FC_CONNECT, FC_CONNECT_ARENASERVER_INFO),
	T_FC_CONNECT_ARENASERVER_LOGIN = MakeMessageType(FC_CONNECT, FC_CONNECT_ARENASERVER_LOGIN),
	T_FC_CONNECT_ARENASERVER_LOGIN_OK = MakeMessageType(FC_CONNECT, FC_CONNECT_ARENASERVER_LOGIN_OK),
	T_FC_CONNECT_ARENASERVER_SSERVER_GROUP_FOR_CLIENT = MakeMessageType(FC_CONNECT, FC_CONNECT_ARENASERVER_SSERVER_GROUP_FOR_CLIENT),
	T_FC_CONNECT_ARENASERVER_TO_IMSERVER = MakeMessageType(FC_CONNECT, FC_CONNECT_ARENASERVER_TO_IMSERVER),
	T_FC_SHUTDOWNMINS_USER_ALTER = MakeMessageType(FC_CONNECT, FC_CONNECT_SHUTDOWNMINS_USER_ALTER),
	T_FC_SHUTDOWNMINS_USER_ENDGAME = MakeMessageType(FC_CONNECT, FC_CONNECT_SHUTDOWNMINS_USER_ENDGAME),
	T_FC_CHARACTER_CREATE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CREATE),
	T_FC_CHARACTER_CREATE_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CREATE_OK),
	T_FC_CHARACTER_DELETE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DELETE),
	T_FC_CHARACTER_DELETE_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DELETE_OK),
	T_FC_CHARACTER_GET_CHARACTER = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_CHARACTER),
	T_FC_CHARACTER_GET_CHARACTER_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_CHARACTER_OK),
	T_FC_CHARACTER_GAMESTART = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GAMESTART),
	T_FC_CHARACTER_GAMESTART_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GAMESTART_OK),
	T_FC_CHARACTER_CONNECT_GAMESTART = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CONNECT_GAMESTART),
	T_FC_CHARACTER_CONNECT_GAMESTART_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CONNECT_GAMESTART_OK),
	T_FC_CHARACTER_GAMEEND = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GAMEEND),
	T_FC_CHARACTER_GAMEEND_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GAMEEND_OK),
	T_FC_CHARACTER_REPAIR = MakeMessageType(FC_CHARACTER, FC_CHARACTER_REPAIR),
	T_FC_CHARACTER_REPAIR_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_REPAIR_OK),
	T_FC_CHARACTER_REPAIR_ERR = MakeMessageType(FC_CHARACTER, FC_CHARACTER_REPAIR_ERR),
	T_FC_CHARACTER_DOCKING = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DOCKING),
	T_FC_CHARACTER_UNDOCKING = MakeMessageType(FC_CHARACTER, FC_CHARACTER_UNDOCKING),
	T_FC_CHARACTER_DOCKING_ERR = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DOCKING_ERR),
	T_FC_CHARACTER_GET_OTHER_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_OTHER_INFO),
	T_FC_CHARACTER_GET_OTHER_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_OTHER_INFO_OK),
	T_FC_CHARACTER_GET_MONSTER_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_MONSTER_INFO_OK),
	T_FC_CHARACTER_CHANGE_UNITKIND = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_UNITKIND),
	T_FC_CHARACTER_CHANGE_STAT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_STAT),
	T_FC_CHARACTER_CHANGE_TOTALGEAR_STAT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_TOTALGEAR_STAT),
	T_FC_CHARACTER_CHANGE_FRIEND = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_FRIEND),
	T_FC_CHARACTER_CHANGE_EXP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_EXP),
	T_FC_CHARACTER_CHANGE_BODYCONDITION = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_BODYCONDITION),
	T_FC_CHARACTER_CHANGE_BODYCONDITION_SKILL = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_BODYCONDITION_SKILL),
	T_FC_CHARACTER_CHANGE_INFLUENCE_TYPE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_INFLUENCE_TYPE),
	T_FC_CHARACTER_CHANGE_STATUS = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_STATUS),
	T_FC_CHARACTER_CHANGE_PKPOINT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_PKPOINT),
	T_FC_CHARACTER_CHANGE_CURRENTHPDPSPEP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CURRENTHPDPSPEP),
	T_FC_CHARACTER_CHANGE_CURRENTHP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CURRENTHP),
	T_FC_CHARACTER_CHANGE_CURRENTDP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CURRENTDP),
	T_FC_CHARACTER_CHANGE_CURRENTSP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CURRENTSP),
	T_FC_CHARACTER_CHANGE_CURRENTEP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CURRENTEP),
	T_FC_CHARACTER_CHANGE_MAPNAME = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_MAPNAME),
	T_FC_CHARACTER_CHANGE_PETINFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_PETINFO),
	T_FC_CHARACTER_CHANGE_POSITION = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_POSITION),
	T_FC_CHARACTER_CHANGE_LEVEL = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_LEVEL),
	T_FC_CHARACTER_USE_BONUSSTAT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_USE_BONUSSTAT),
	T_FC_CHARACTER_DEAD_NOTIFY = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DEAD_NOTIFY),
	T_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER),
	T_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER_OK),
	T_FC_CHARACTER_APPLY_COLLISION_DAMAGE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_APPLY_COLLISION_DAMAGE),
	T_FC_CHARACTER_GET_OTHER_MOVE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_OTHER_MOVE),
	T_FC_CHARACTER_DELETE_OTHER_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DELETE_OTHER_INFO),
	T_FC_CHARACTER_DEAD_GAMESTART = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DEAD_GAMESTART),
	T_FC_CHARACTER_OTHER_REVIVED = MakeMessageType(FC_CHARACTER, FC_CHARACTER_OTHER_REVIVED),
	T_FC_CHARACTER_GET_OTHER_RENDER_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_OTHER_RENDER_INFO),
	T_FC_CHARACTER_GET_OTHER_RENDER_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_OTHER_RENDER_INFO_OK),
	T_FC_CHARACTER_CHANGE_BODYCONDITION_ALL = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_BODYCONDITION_ALL),
	T_FC_CHARACTER_CHANGE_PROPENSITY = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_PROPENSITY),
	T_FC_CHARACTER_CHANGE_HPDPSPEP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_HPDPSPEP),
	T_FC_CHARACTER_SHOW_EFFECT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_SHOW_EFFECT),
	T_FC_CHARACTER_SHOW_EFFECT_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_SHOW_EFFECT_OK),
	T_FC_CHARACTER_GET_OTHER_PARAMFACTOR = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_OTHER_PARAMFACTOR),
	T_FC_CHARACTER_GET_OTHER_PARAMFACTOR_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_OTHER_PARAMFACTOR_OK),
	T_FC_CHARACTER_SEND_PARAMFACTOR_IN_RANGE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_SEND_PARAMFACTOR_IN_RANGE),
	T_FC_CHARACTER_SPEED_HACK_USER = MakeMessageType(FC_CHARACTER, FC_CHARACTER_SPEED_HACK_USER),
	T_FC_CHARACTER_CHANGE_CHARACTER_MENT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CHARACTER_MENT),
	T_FC_CHARACTER_GET_CASH_MONEY_COUNT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_CASH_MONEY_COUNT),
	T_FC_CHARACTER_GET_CASH_MONEY_COUNT_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_CASH_MONEY_COUNT_OK),
	T_FC_CHARACTER_CASH_PREMIUM_CARD_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CASH_PREMIUM_CARD_INFO),
	T_FC_CHARACTER_TUTORIAL_SKIP = MakeMessageType(FC_CHARACTER, FC_CHARACTER_TUTORIAL_SKIP),
	T_FC_CHARACTER_TUTORIAL_SKIP_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_TUTORIAL_SKIP_OK),
	T_FC_CHARACTER_CHANGE_CHARACTER_MODE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CHARACTER_MODE),
	T_FC_CHARACTER_CHANGE_CHARACTER_MODE_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_CHARACTER_MODE_OK),
	T_FC_CHARACTER_FALLING_BY_FUEL_ALLIN = MakeMessageType(FC_CHARACTER, FC_CHARACTER_FALLING_BY_FUEL_ALLIN),
	T_FC_CHARACTER_WARP_BY_AGEAR_LANDING_FUEL_ALLIN = MakeMessageType(FC_CHARACTER, FC_CHARACTER_WARP_BY_AGEAR_LANDING_FUEL_ALLIN),
	T_FC_CHARACTER_GET_REAL_WEAPON_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_REAL_WEAPON_INFO),
	T_FC_CHARACTER_GET_REAL_WEAPON_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_REAL_WEAPON_INFO_OK),
	T_FC_CHARACTER_GET_REAL_ENGINE_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_REAL_ENGINE_INFO),
	T_FC_CHARACTER_GET_REAL_ENGINE_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_REAL_ENGINE_INFO_OK),
	T_FC_CHARACTER_GET_REAL_TOTAL_WEIGHT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_REAL_TOTAL_WEIGHT),
	T_FC_CHARACTER_GET_REAL_TOTAL_WEIGHT_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_REAL_TOTAL_WEIGHT_OK),
	T_FC_CHARACTER_MEMORY_HACK_USER = MakeMessageType(FC_CHARACTER, FC_CHARACTER_MEMORY_HACK_USER),
	T_FC_CHARACTER_USE_BONUSSTAT_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_USE_BONUSSTAT_OK),
	T_FC_CHARACTER_UPDATE_SUBLEADER = MakeMessageType(FC_CHARACTER, FC_CHARACTER_UPDATE_SUBLEADER),
	T_FC_CHARACTER_OBSERVER_START = MakeMessageType(FC_CHARACTER, FC_CHARACTER_OBSERVER_START),
	T_FC_CHARACTER_UPDATE_SUBLEADER_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_UPDATE_SUBLEADER_OK),
	T_FC_CHARACTER_OBSERVER_START_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_OBSERVER_START_OK),
	T_FC_CHARACTER_OBSERVER_END = MakeMessageType(FC_CHARACTER, FC_CHARACTER_OBSERVER_END),
	T_FC_CHARACTER_OBSERVER_END_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_OBSERVER_END_OK),
	T_FC_CHARACTER_OBSERVER_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_OBSERVER_INFO),
	T_FC_CHARACTER_OBSERVER_REG = MakeMessageType(FC_CHARACTER, FC_CHARACTER_OBSERVER_REG),
	T_FC_CHARACTER_SHOW_MAP_EFFECT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_SHOW_MAP_EFFECT),
	T_FC_CHARACTER_SHOW_MAP_EFFECT_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_SHOW_MAP_EFFECT_OK),
	T_FC_CHARACTER_PAY_WARPOINT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_PAY_WARPOINT),
	T_FC_CHARACTER_WATCH_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_WATCH_INFO),
	T_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER = MakeMessageType(FC_CHARACTER, FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER),
	T_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER_OK),
	T_FC_CHARACTER_GAMESTART_FROM_ARENA_TO_MAINSERVER = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GAMESTART_FROM_ARENA_TO_MAINSERVER),
	T_FC_CHARACTER_GET_USER_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_USER_INFO),
	T_FC_CHARACTER_GET_USER_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_USER_INFO_OK),
	T_FC_CHARACTER_CHANGE_INFO_OPTION_SECRET = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_INFO_OPTION_SECRET),
	T_FC_CHARACTER_CHANGE_INFO_OPTION_SECRET_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_INFO_OPTION_SECRET_OK),
	T_FC_CHARACTER_CHANGE_NICKNAME = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_NICKNAME),
	T_FC_CHARACTER_CHANGE_NICKNAME_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_NICKNAME_OK),
	T_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_START_CITY_MAPINDEX),
	T_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_START_CITY_MAPINDEX_OK),
	T_FC_CHARACTER_CHANGE_ADDED_INVENTORY_COUNT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_CHANGE_ADDED_INVENTORY_COUNT),
	T_FC_CHARACTER_DEBUFF_DOT_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DEBUFF_DOT_INFO),
	T_FC_CHARACTER_DEBUFF_DOT_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DEBUFF_DOT_INFO_OK),
	T_FC_CHARACTER_DEBUFF_DOT_APPLYING = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DEBUFF_DOT_APPLYING),
	T_FC_CHARACTER_DEBUFF_DOT_RELEASE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_DEBUFF_DOT_RELEASE),
	T_FC_CHARACTER_GET_USER_ITEM_INFO = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_USER_ITEM_INFO),
	T_FC_CHARACTER_GET_USER_ITEM_INFO_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_USER_ITEM_INFO_OK),
	T_FC_CHARACTER_GET_USER_ITEM_INFO_OK_DONE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_USER_ITEM_INFO_OK_DONE),
	T_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_USER_ITEM_INFO_SECRET),
	T_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET_OK = MakeMessageType(FC_CHARACTER, FC_CHARACTER_GET_USER_ITEM_INFO_SECRET_OK),
	T_FC_CHARACTER_KILLCOUNT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_KILLCOUNT),
	T_FC_CHARACTER_RESTCOUNT = MakeMessageType(FC_CHARACTER, FC_CHARACTER_RESTCOUNT),
	T_FC_CHARACTER_BONUS_EXP_RATE = MakeMessageType(FC_CHARACTER, FC_CHARACTER_BONUS_EXP_RATE),
	T_FC_CHAT_MAP = MakeMessageType(FC_CHAT, FC_CHAT_MAP),
	T_FC_CHAT_REGION = MakeMessageType(FC_CHAT, FC_CHAT_REGION),
	T_FC_CHAT_CASH_ALL = MakeMessageType(FC_CHAT, FC_CHAT_CASH_ALL),
	T_FC_CHAT_ARENA = MakeMessageType(FC_CHAT, FC_CHAT_ARENA),
	T_FC_CHAT_CNC = MakeMessageType(FC_CHAT, FC_CHAT_CNC),
	T_FC_CHAT_ALL_INFLUENCE = MakeMessageType(FC_CHAT, FC_CHAT_ALL_INFLUENCE),
	T_FC_CHAT_OUTPOST_GUILD = MakeMessageType(FC_CHAT, FC_CHAT_OUTPOST_GUILD),
	T_FC_CHAT_INFINITY = MakeMessageType(FC_CHAT, FC_CHAT_INFINITY),
	T_FC_CHAT_LETTER_REQUEST_TITLE = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_REQUEST_TITLE),
	T_FC_CHAT_LETTER_REQUEST_TITLE_OK_HEADER = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_REQUEST_TITLE_OK_HEADER),
	T_FC_CHAT_LETTER_REQUEST_TITLE_OK = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_REQUEST_TITLE_OK),
	T_FC_CHAT_LETTER_REQUEST_TITLE_OK_DONE = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_REQUEST_TITLE_OK_DONE),
	T_FC_CHAT_LETTER_READ = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_READ),
	T_FC_CHAT_LETTER_READ_OK = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_READ_OK),
	T_FC_CHAT_LETTER_DELETE = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_DELETE),
	T_FC_CHAT_LETTER_DELETE_OK = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_DELETE_OK),
	T_FC_CHAT_LETTER_SEND = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_SEND),
	T_FC_CHAT_LETTER_SEND_OK = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_SEND_OK),
	T_FC_CHAT_LETTER_RECEIVE = MakeMessageType(FC_CHAT, FC_CHAT_LETTER_RECEIVE),
	T_FC_CHAT_ALLLETTER_REQUEST_TITLE = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_REQUEST_TITLE),
	T_FC_CHAT_ALLLETTER_REQUEST_TITLE_OK_HEADER = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_REQUEST_TITLE_OK_HEADER),
	T_FC_CHAT_ALLLETTER_REQUEST_TITLE_OK = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_REQUEST_TITLE_OK),
	T_FC_CHAT_ALLLETTER_REQUEST_TITLE_OK_DONE = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_REQUEST_TITLE_OK_DONE),
	T_FC_CHAT_ALLLETTER_READ = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_READ),
	T_FC_CHAT_ALLLETTER_READ_OK = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_READ_OK),
	T_FC_CHAT_ALLLETTER_DELETE = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_DELETE),
	T_FC_CHAT_ALLLETTER_DELETE_OK = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_DELETE_OK),
	T_FC_CHAT_ALLLETTER_SEND = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_SEND),
	T_FC_CHAT_ALLLETTER_SEND_OK = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_SEND_OK),
	T_FC_CHAT_ALLLETTER_RECEIVE = MakeMessageType(FC_CHAT, FC_CHAT_ALLLETTER_RECEIVE),
	T_FC_CITY_GET_BUILDING_LIST = MakeMessageType(FC_CITY, FC_CITY_GET_BUILDING_LIST),
	T_FC_CITY_GET_BUILDING_LIST_OK = MakeMessageType(FC_CITY, FC_CITY_GET_BUILDING_LIST_OK),
	T_FC_CITY_REQUEST_ENTER_BUILDING = MakeMessageType(FC_CITY, FC_CITY_REQUEST_ENTER_BUILDING),
	T_FC_CITY_REQUEST_ENTER_BUILDING_OK = MakeMessageType(FC_CITY, FC_CITY_REQUEST_ENTER_BUILDING_OK),
	T_FC_CITY_CHECK_WARP_STATE = MakeMessageType(FC_CITY, FC_CITY_CHECK_WARP_STATE),
	T_FC_CITY_CHECK_WARP_STATE_OK = MakeMessageType(FC_CITY, FC_CITY_CHECK_WARP_STATE_OK),
	T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST),
	T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_HEADER = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_HEADER),
	T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK),
	T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_DONE = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_DONE),
	T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO),
	T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK),
	T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK_GUILDMARK = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK_GUILDMARK),
	T_FC_CITY_POLL_REG_LEADER_CANDIDATE = MakeMessageType(FC_CITY, FC_CITY_POLL_REG_LEADER_CANDIDATE),
	T_FC_CITY_POLL_REG_LEADER_CANDIDATE_OK = MakeMessageType(FC_CITY, FC_CITY_POLL_REG_LEADER_CANDIDATE_OK),
	T_FC_CITY_POLL_DELETE_LEADER_CANDIDATE = MakeMessageType(FC_CITY, FC_CITY_POLL_DELETE_LEADER_CANDIDATE),
	T_FC_CITY_POLL_DELETE_LEADER_CANDIDATE_OK = MakeMessageType(FC_CITY, FC_CITY_POLL_DELETE_LEADER_CANDIDATE_OK),
	T_FC_CITY_POLL_VOTE = MakeMessageType(FC_CITY, FC_CITY_POLL_VOTE),
	T_FC_CITY_POLL_VOTE_OK = MakeMessageType(FC_CITY, FC_CITY_POLL_VOTE_OK),
	T_FC_CITY_POLL_REQUEST_POLL_DATE = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_POLL_DATE),
	T_FC_CITY_POLL_REQUEST_POLL_DATE_OK = MakeMessageType(FC_CITY, FC_CITY_POLL_REQUEST_POLL_DATE_OK),
	T_FC_CITY_POLL_LEADER_ELECTION_INFO = MakeMessageType(FC_CITY, FC_CITY_POLL_LEADER_ELECTION_INFO),
	T_FC_CITY_WARINFO_INFLUENCE = MakeMessageType(FC_CITY, FC_CITY_WARINFO_INFLUENCE),
	T_FC_CITY_WARINFO_INFLUENCE_OK = MakeMessageType(FC_CITY, FC_CITY_WARINFO_INFLUENCE_OK),
	T_FC_CITY_WARINFO_OUTPOST = MakeMessageType(FC_CITY, FC_CITY_WARINFO_OUTPOST),
	T_FC_CITY_WARINFO_OUTPOST_OK = MakeMessageType(FC_CITY, FC_CITY_WARINFO_OUTPOST_OK),
	T_FC_CLIENT_REPORT = MakeMessageType(FC_CLIENT_REPORT, FC_CLIENT_REPORT),
	T_FC_EVENT_WARP = MakeMessageType(FC_EVENT, FC_EVENT_WARP),
	T_FC_EVENT_WARP_SAME_MAP = MakeMessageType(FC_EVENT, FC_EVENT_WARP_SAME_MAP),
	T_FC_EVENT_WARP_SAME_MAP_DONE = MakeMessageType(FC_EVENT, FC_EVENT_WARP_SAME_MAP_DONE),
	T_FC_EVENT_WARP_SAME_FIELD_SERVER = MakeMessageType(FC_EVENT, FC_EVENT_WARP_SAME_FIELD_SERVER),
	T_FC_EVENT_WARP_SAME_FIELD_SERVER_DONE = MakeMessageType(FC_EVENT, FC_EVENT_WARP_SAME_FIELD_SERVER_DONE),
	T_FC_EVENT_OTHER_WARPED = MakeMessageType(FC_EVENT, FC_EVENT_OTHER_WARPED),
	T_FC_EVENT_WARP_CONNECT_OK = MakeMessageType(FC_EVENT, FC_EVENT_WARP_CONNECT_OK),
	T_FC_EVENT_ENTER_BUILDING = MakeMessageType(FC_EVENT, FC_EVENT_ENTER_BUILDING),
	T_FC_EVENT_ENTER_BUILDING_OK = MakeMessageType(FC_EVENT, FC_EVENT_ENTER_BUILDING_OK),
	T_FC_EVENT_LEAVE_BUILDING = MakeMessageType(FC_EVENT, FC_EVENT_LEAVE_BUILDING),
	T_FC_EVENT_LEAVE_BUILDING_OK = MakeMessageType(FC_EVENT, FC_EVENT_LEAVE_BUILDING_OK),
	T_FC_EVENT_REQUEST_WARP = MakeMessageType(FC_EVENT, FC_EVENT_REQUEST_WARP),
	T_FC_EVENT_REJECT_WARP = MakeMessageType(FC_EVENT, FC_EVENT_REJECT_WARP),
	T_FC_EVENT_REQUEST_OBJECT_EVENT = MakeMessageType(FC_EVENT, FC_EVENT_REQUEST_OBJECT_EVENT),
	T_FC_EVENT_CHANGE_WEATHER = MakeMessageType(FC_EVENT, FC_EVENT_CHANGE_WEATHER),
	T_FC_EVENT_SUGGEST_CHANNELS = MakeMessageType(FC_EVENT, FC_EVENT_SUGGEST_CHANNELS),
	T_FC_EVENT_SELECT_CHANNEL = MakeMessageType(FC_EVENT, FC_EVENT_SELECT_CHANNEL),
	T_FC_EVENT_SELECT_CHANNEL_WITH_PARTY = MakeMessageType(FC_EVENT, FC_EVENT_SELECT_CHANNEL_WITH_PARTY),
	T_FC_EVENT_REQUEST_RACING_WARP = MakeMessageType(FC_EVENT, FC_EVENT_REQUEST_RACING_WARP),
	T_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST = MakeMessageType(FC_EVENT, FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST),
	T_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST_OK = MakeMessageType(FC_EVENT, FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST_OK),
	T_FC_EVENT_REQUEST_SHOP_WARP = MakeMessageType(FC_EVENT, FC_EVENT_REQUEST_SHOP_WARP),
	T_FC_EVENT_CHARACTERMODE_ENTER_BUILDING = MakeMessageType(FC_EVENT, FC_EVENT_CHARACTERMODE_ENTER_BUILDING),
	T_FC_EVENT_CALL_WARP_EVENT_REQUEST = MakeMessageType(FC_EVENT, FC_EVENT_CALL_WARP_EVENT_REQUEST),
	T_FC_EVENT_CALL_WARP_EVENT_REQUEST_ACK = MakeMessageType(FC_EVENT, FC_EVENT_CALL_WARP_EVENT_REQUEST_ACK),
	T_FC_EVENT_CLICK_TELEPORT = MakeMessageType(FC_EVENT, FC_EVENT_CLICK_TELEPORT),
	T_FC_EVENT_CLICK_TELEPORT_OK = MakeMessageType(FC_EVENT, FC_EVENT_CLICK_TELEPORT_OK),
	T_FC_EVENT_TELEPORT_BUILDCOMPLETE = MakeMessageType(FC_EVENT, FC_EVENT_TELEPORT_BUILDCOMPLETE),
	T_FC_EVENT_TELEPORT_DESTROY = MakeMessageType(FC_EVENT, FC_EVENT_TELEPORT_DESTROY),
	T_FC_EVENT_NOTIFY_MSG_GET = MakeMessageType(FC_EVENT, FC_EVENT_NOTIFY_MSG_GET),
	T_FC_EVENT_NOTIFY_MSG_GET_OK = MakeMessageType(FC_EVENT, FC_EVENT_NOTIFY_MSG_GET_OK),
	T_FC_EVENT_NOTIFY_MSG_DELETE = MakeMessageType(FC_EVENT, FC_EVENT_NOTIFY_MSG_DELETE),
	T_FC_EVENT_COUPON_EVENT_INFO = MakeMessageType(FC_EVENT, FC_EVENT_COUPON_EVENT_INFO),
	T_FC_EVENT_COUPON_EVENT_USE_COUPON = MakeMessageType(FC_EVENT, FC_EVENT_COUPON_EVENT_USE_COUPON),
	T_FC_EVENT_COUPON_EVENT_USE_COUPON_OK = MakeMessageType(FC_EVENT, FC_EVENT_COUPON_EVENT_USE_COUPON_OK),
	T_FC_EVENT_INFLUENCEMARK = MakeMessageType(FC_EVENT, FC_EVENT_INFLUENCEMARK),
	T_FC_EVENT_INFLUENCEMARKEND = MakeMessageType(FC_EVENT, FC_EVENT_INFLUENCEMARKEND),
	T_FC_GUILD_GET_MAP_OWNER_INFO = MakeMessageType(FC_GUILD, FC_GUILD_GET_MAP_OWNER_INFO),
	T_FC_GUILD_GET_MAP_OWNER_INFO_OK = MakeMessageType(FC_GUILD, FC_GUILD_GET_MAP_OWNER_INFO_OK),
	T_FC_GUILD_REQUEST_GUILD_WAR = MakeMessageType(FC_GUILD, FC_GUILD_REQUEST_GUILD_WAR),
	T_FC_GUILD_REQUEST_GUILD_WAR_RESULT = MakeMessageType(FC_GUILD, FC_GUILD_REQUEST_GUILD_WAR_RESULT),
	T_FC_GUILD_GET_CHALLENGER_GUILD = MakeMessageType(FC_GUILD, FC_GUILD_GET_CHALLENGER_GUILD),
	T_FC_GUILD_GET_CHALLENGER_GUILD_OK = MakeMessageType(FC_GUILD, FC_GUILD_GET_CHALLENGER_GUILD_OK),
	T_FC_GUILD_GET_WAR_INFO = MakeMessageType(FC_GUILD, FC_GUILD_GET_WAR_INFO),
	T_FC_GUILD_GET_WAR_INFO_OK = MakeMessageType(FC_GUILD, FC_GUILD_GET_WAR_INFO_OK),
	T_FC_GUILD_SUMMON_MEMBER = MakeMessageType(FC_GUILD, FC_GUILD_SUMMON_MEMBER),
	T_FC_GUILD_SUMMON_MEMBER_OK = MakeMessageType(FC_GUILD, FC_GUILD_SUMMON_MEMBER_OK),
	T_FC_GUILD_DISMEMBER = MakeMessageType(FC_GUILD, FC_GUILD_DISMEMBER),
	T_FC_INFO_GET_MONSTER_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_MONSTER_INFO),
	T_FC_INFO_GET_MONSTER_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_MONSTER_INFO_OK),
	T_FC_INFO_GET_MAPOBJECT_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_MAPOBJECT_INFO),
	T_FC_INFO_GET_MAPOBJECT_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_MAPOBJECT_INFO_OK),
	T_FC_INFO_GET_ITEM_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_ITEM_INFO),
	T_FC_INFO_GET_ITEM_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_ITEM_INFO_OK),
	T_FC_INFO_GET_RARE_ITEM_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_RARE_ITEM_INFO),
	T_FC_INFO_GET_RARE_ITEM_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_RARE_ITEM_INFO_OK),
	T_FC_INFO_GET_BUILDINGNPC_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_BUILDINGNPC_INFO),
	T_FC_INFO_GET_BUILDINGNPC_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_BUILDINGNPC_INFO_OK),
	T_FC_INFO_GET_SIMPLE_ITEM_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_SIMPLE_ITEM_INFO),
	T_FC_INFO_GET_SIMPLE_ITEM_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_SIMPLE_ITEM_INFO_OK),
	T_FC_INFO_GET_ENCHANT_COST = MakeMessageType(FC_INFO, FC_INFO_GET_ENCHANT_COST),
	T_FC_INFO_GET_ENCHANT_COST_OK = MakeMessageType(FC_INFO, FC_INFO_GET_ENCHANT_COST_OK),
	T_FC_INFO_GET_CURRENT_MAP_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_CURRENT_MAP_INFO),
	T_FC_INFO_GET_CURRENT_MAP_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_CURRENT_MAP_INFO_OK),
	T_FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_OK),
	T_FC_INFO_GET_GAME_EVENT_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_GET_GAME_EVENT_INFO_OK),
	T_FC_INFO_GET_SERVER_DATE_TIME = MakeMessageType(FC_INFO, FC_INFO_GET_SERVER_DATE_TIME),
	T_FC_INFO_GET_SERVER_DATE_TIME_OK = MakeMessageType(FC_INFO, FC_INFO_GET_SERVER_DATE_TIME_OK),
	T_FC_INFO_GET_HAPPY_HOUR_EVENT_INFO = MakeMessageType(FC_INFO, FC_INFO_GET_HAPPY_HOUR_EVENT_INFO),
	T_FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_BY_LEVEL = MakeMessageType(FC_INFO, FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_BY_LEVEL),
	T_FC_INFO_CHECK_RESOBJ_CHECKSUM = MakeMessageType(FC_INFO, FC_INFO_CHECK_RESOBJ_CHECKSUM),
	T_FC_INFO_NOTICE_REQUEST = MakeMessageType(FC_INFO, FC_INFO_NOTICE_REQUEST),
	T_FC_INFO_NOTICE_REQUEST_OK = MakeMessageType(FC_INFO, FC_INFO_NOTICE_REQUEST_OK),
	T_FC_INFO_NOTICE_REG = MakeMessageType(FC_INFO, FC_INFO_NOTICE_REG),
	T_FC_INFO_NOTICE_REG_OK = MakeMessageType(FC_INFO, FC_INFO_NOTICE_REG_OK),
	T_FC_INFO_NOTICE_MODIFY = MakeMessageType(FC_INFO, FC_INFO_NOTICE_MODIFY),
	T_FC_INFO_NOTICE_MODIFY_OK = MakeMessageType(FC_INFO, FC_INFO_NOTICE_MODIFY_OK),
	T_FC_INFO_EXPEDIENCYFUND_REQUEST = MakeMessageType(FC_INFO, FC_INFO_EXPEDIENCYFUND_REQUEST),
	T_FC_INFO_EXPEDIENCYFUND_REQUEST_OK = MakeMessageType(FC_INFO, FC_INFO_EXPEDIENCYFUND_REQUEST_OK),
	T_FC_INFO_EXPEDIENCYFUND_PAYBACK = MakeMessageType(FC_INFO, FC_INFO_EXPEDIENCYFUND_PAYBACK),
	T_FC_INFO_EXPEDIENCYFUND_PAYBACK_OK = MakeMessageType(FC_INFO, FC_INFO_EXPEDIENCYFUND_PAYBACK_OK),
	T_FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD = MakeMessageType(FC_INFO, FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD),
	T_FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD_OK = MakeMessageType(FC_INFO, FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD_OK),
	T_FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD = MakeMessageType(FC_INFO, FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD),
	T_FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD_OK = MakeMessageType(FC_INFO, FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD_OK),
	T_FC_INFO_SECONDARYPASSWORD_LOCK = MakeMessageType(FC_INFO, FC_INFO_SECONDARYPASSWORD_LOCK),
	T_FC_INFO_SECONDARYPASSWORD_LOCK_OK = MakeMessageType(FC_INFO, FC_INFO_SECONDARYPASSWORD_LOCK_OK),
	T_FC_INFO_GET_GUILDMARK = MakeMessageType(FC_INFO, FC_INFO_GET_GUILDMARK),
	T_FC_INFO_GET_GUILDMARK_OK = MakeMessageType(FC_INFO, FC_INFO_GET_GUILDMARK_OK),
	T_FC_INFO_MSWARINFO_DISPLAY = MakeMessageType(FC_INFO, FC_INFO_MSWARINFO_DISPLAY),
	T_FC_INFO_MSWARINFO_DISPLAY_OPTION = MakeMessageType(FC_INFO, FC_INFO_MSWARINFO_DISPLAY_OPTION),
	T_FC_INFO_MSWARINFO_DISPLAY_OPTION_OK = MakeMessageType(FC_INFO, FC_INFO_MSWARINFO_DISPLAY_OPTION_OK),
	T_FC_INFO_MSWARINFO_RESULT = MakeMessageType(FC_INFO, FC_INFO_MSWARINFO_RESULT),
	T_FC_INFO_MSWARINFO_RESULT_OK = MakeMessageType(FC_INFO, FC_INFO_MSWARINFO_RESULT_OK),
	T_FC_INFO_SPWARINFO_RESULT = MakeMessageType(FC_INFO, FC_INFO_SPWARINFO_RESULT),
	T_FC_INFO_SPWARINFO_RESULT_OK_HEADER = MakeMessageType(FC_INFO, FC_INFO_SPWARINFO_RESULT_OK_HEADER),
	T_FC_INFO_SPWARINFO_RESULT_OK = MakeMessageType(FC_INFO, FC_INFO_SPWARINFO_RESULT_OK),
	T_FC_INFO_SPWARINFO_RESULT_OK_DONE = MakeMessageType(FC_INFO, FC_INFO_SPWARINFO_RESULT_OK_DONE),
	T_FC_INFO_DECLARATION_MSWAR_INFO = MakeMessageType(FC_INFO, FC_INFO_DECLARATION_MSWAR_INFO),
	T_FC_INFO_DECLARATION_MSWAR_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_DECLARATION_MSWAR_INFO_OK),
	T_FC_INFO_DECLARATION_MSWAR_SET = MakeMessageType(FC_INFO, FC_INFO_DECLARATION_MSWAR_SET),
	T_FC_INFO_STRATEGICPOINTINFO_DISPLAY_LIST = MakeMessageType(FC_INFO, FC_INFO_STRATEGICPOINTINFO_DISPLAY_LIST),
	T_FC_INFO_STRATEGICPOINTINFO_DISPLAY = MakeMessageType(FC_INFO, FC_INFO_STRATEGICPOINTINFO_DISPLAY),
	T_FC_INFO_WRK_GET_SERVICE_INFO = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_SERVICE_INFO),
	T_FC_INFO_WRK_GET_SERVICE_INFO_OK = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_SERVICE_INFO_OK),
	T_FC_INFO_WRK_GET_SERVICE_INFO_OK_IMAGE = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_SERVICE_INFO_OK_IMAGE),
	T_FC_INFO_WRK_GET_SERVICE_INFO_OK_DONE = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_SERVICE_INFO_OK_DONE),
	T_FC_INFO_WRK_GET_RANKER_LIST = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_RANKER_LIST),
	T_FC_INFO_WRK_GET_LEVEL_RANKER_LIST_OK = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_LEVEL_RANKER_LIST_OK),
	T_FC_INFO_WRK_GET_FAME_RANKER_LIST_OK = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_FAME_RANKER_LIST_OK),
	T_FC_INFO_WRK_GET_PVP_RANKER_LIST_OK = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_PVP_RANKER_LIST_OK),
	T_FC_INFO_WRK_GET_SELF_RANKING = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_SELF_RANKING),
	T_FC_INFO_WRK_GET_SELF_RANKING_OK = MakeMessageType(FC_INFO, FC_INFO_WRK_GET_SELF_RANKING_OK),
	T_FC_INFO_APPLY_RESISTANCE_ITEM = MakeMessageType(FC_INFO, FC_INFO_APPLY_RESISTANCE_ITEM),
	T_FC_INFO_APPLY_DESTPARAM = MakeMessageType(FC_INFO, FC_INFO_APPLY_DESTPARAM),
	T_FC_INFO_APPLY_DESTPARAM_LIST = MakeMessageType(FC_INFO, FC_INFO_APPLY_DESTPARAM_LIST),
	T_FC_ITEM_SHOW_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_SHOW_ITEM),
	T_FC_ITEM_HIDE_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_HIDE_ITEM),
	T_FC_ITEM_GET_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_GET_ITEM),
	T_FC_ITEM_GET_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_GET_ITEM_OK),
	T_FC_ITEM_GET_ITEM_FAIL = MakeMessageType(FC_ITEM, FC_ITEM_GET_ITEM_FAIL),
	T_FC_ITEM_PUT_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_PUT_ITEM),
	T_FC_ITEM_CHANGE_WINDOW_POSITION = MakeMessageType(FC_ITEM, FC_ITEM_CHANGE_WINDOW_POSITION),
	T_FC_ITEM_CHANGE_WINDOW_POSITION_OK = MakeMessageType(FC_ITEM, FC_ITEM_CHANGE_WINDOW_POSITION_OK),
	T_FC_ITEM_UPDATE_WINDOW_ITEM_LIST = MakeMessageType(FC_ITEM, FC_ITEM_UPDATE_WINDOW_ITEM_LIST),
	T_FC_ITEM_THROW_AWAY_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_THROW_AWAY_ITEM),
	T_FC_ITEM_THROW_AWAY_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_THROW_AWAY_ITEM_OK),
	T_FC_ITEM_USE_ENERGY = MakeMessageType(FC_ITEM, FC_ITEM_USE_ENERGY),
	T_FC_ITEM_USE_ENERGY_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_ENERGY_OK),
	T_FC_ITEM_USE_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_USE_ITEM),
	T_FC_ITEM_USE_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_ITEM_OK),
	T_FC_ITEM_DELETE_ITEM_ADMIN = MakeMessageType(FC_ITEM, FC_ITEM_DELETE_ITEM_ADMIN),
	T_FC_ITEM_RELOAD_ITEM_INFO = MakeMessageType(FC_ITEM, FC_ITEM_RELOAD_ITEM_INFO),
	T_FC_ITEM_USE_ENCHANT = MakeMessageType(FC_ITEM, FC_ITEM_USE_ENCHANT),
	T_FC_ITEM_USE_ENCHANT_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_ENCHANT_OK),
	T_FC_ITEM_PUT_ENCHANT_HEADER = MakeMessageType(FC_ITEM, FC_ITEM_PUT_ENCHANT_HEADER),
	T_FC_ITEM_PUT_ENCHANT = MakeMessageType(FC_ITEM, FC_ITEM_PUT_ENCHANT),
	T_FC_ITEM_PUT_ENCHANT_DONE = MakeMessageType(FC_ITEM, FC_ITEM_PUT_ENCHANT_DONE),
	T_FC_ITEM_DELETE_ALL_ENCHANT = MakeMessageType(FC_ITEM, FC_ITEM_DELETE_ALL_ENCHANT),
	T_FC_ITEM_DELETE_DROP_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_DELETE_DROP_ITEM),
	T_FC_ITEM_UPDATE_ITEM_POS = MakeMessageType(FC_ITEM, FC_ITEM_UPDATE_ITEM_POS),
	T_FC_ITEM_MIX_ITEMS = MakeMessageType(FC_ITEM, FC_ITEM_MIX_ITEMS),
	T_FC_ITEM_MIX_ITEMS_RESULT = MakeMessageType(FC_ITEM, FC_ITEM_MIX_ITEMS_RESULT),
	T_FC_ITEM_USE_CARDITEM_GUILDSUMMON = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_GUILDSUMMON),
	T_FC_ITEM_USE_CARDITEM_GUILDSUMMON_NOTIFY = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_GUILDSUMMON_NOTIFY),
	T_FC_ITEM_USE_CARDITEM_RESTORE = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_RESTORE),
	T_FC_ITEM_USE_CARDITEM_RESTORE_NOTIFY = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_RESTORE_NOTIFY),
	T_FC_ITEM_USE_CARDITEM_GUILD = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_GUILD),
	T_FC_ITEM_USE_CARDITEM_GUILD_NOTIFY = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_GUILD_NOTIFY),
	T_FC_ITEM_USE_CARDITEM_MONSTERSUMMON = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_MONSTERSUMMON),
	T_FC_ITEM_USE_CARDITEM_MONSTERSUMMON_NOTIFY = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_MONSTERSUMMON_NOTIFY),
	T_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME),
	T_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME_NOTIFY = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME_NOTIFY),
	T_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_SKILLINITIALIZE),
	T_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE_NOTIFY = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_SKILLINITIALIZE_NOTIFY),
	T_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE),
	T_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE_NOTIFY = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE_NOTIFY),
	T_FC_ITEM_USE_INFLUENCE_BUFF = MakeMessageType(FC_ITEM, FC_ITEM_USE_INFLUENCE_BUFF),
	T_FC_ITEM_USE_INFLUENCE_BUFF_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_INFLUENCE_BUFF_OK),
	T_FC_ITEM_USE_INFLUENCE_GAMEEVENT = MakeMessageType(FC_ITEM, FC_ITEM_USE_INFLUENCE_GAMEEVENT),
	T_FC_ITEM_USE_INFLUENCE_GAMEEVENT_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_INFLUENCE_GAMEEVENT_OK),
	T_FC_ITEM_USE_RANDOMBOX = MakeMessageType(FC_ITEM, FC_ITEM_USE_RANDOMBOX),
	T_FC_ITEM_USE_RANDOMBOX_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_RANDOMBOX_OK),
	T_FC_ITEM_USE_SKILL_SUPPORT_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_USE_SKILL_SUPPORT_ITEM),
	T_FC_ITEM_USE_SKILL_SUPPORT_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_SKILL_SUPPORT_ITEM_OK),
	T_FC_ITEM_USE_RANDOMBOX_OK_DONE = MakeMessageType(FC_ITEM, FC_ITEM_USE_RANDOMBOX_OK_DONE),
	T_FC_ITEM_USE_LUCKY_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_USE_LUCKY_ITEM),
	T_FC_ITEM_USE_LUCKY_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_LUCKY_ITEM_OK),
	T_FC_ITEM_CHANGED_SHAPEITEMNUM = MakeMessageType(FC_ITEM, FC_ITEM_CHANGED_SHAPEITEMNUM),
	T_FC_ITEM_CHANGED_EFFECTITEMNUM = MakeMessageType(FC_ITEM, FC_ITEM_CHANGED_EFFECTITEMNUM),
	T_FC_ITEM_USE_INVOKING_WEAR_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_USE_INVOKING_WEAR_ITEM),
	T_FC_ITEM_EXPIRE_TIME_INVOKING_WEAR_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_EXPIRE_TIME_INVOKING_WEAR_ITEM),
	T_FC_ITEM_END_COOLINGTIME_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_END_COOLINGTIME_ITEM),
	T_FC_ITEM_END_COOLINGTIME_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_END_COOLINGTIME_ITEM_OK),
	T_FC_ITEM_GET_COOLINGTIME_INFO = MakeMessageType(FC_ITEM, FC_ITEM_GET_COOLINGTIME_INFO),
	T_FC_ITEM_GET_COOLINGTIME_INFO_OK = MakeMessageType(FC_ITEM, FC_ITEM_GET_COOLINGTIME_INFO_OK),
	T_FC_ITEM_USE_INVOKING_WEAR_ITEM_BUFF = MakeMessageType(FC_ITEM, FC_ITEM_USE_INVOKING_WEAR_ITEM_BUFF),
	T_FC_ITEM_UPDATE_TRANSFORMER_OK = MakeMessageType(FC_ITEM, FC_ITEM_UPDATE_TRANSFORMER_OK),
	T_FC_ITEM_HOMEPREMIUM_INFO = MakeMessageType(FC_ITEM, FC_ITEM_HOMEPREMIUM_INFO),
	T_FC_ITEM_PET_HEADER = MakeMessageType(FC_ITEM, FC_ITEM_PET_HEADER),
	T_FC_ITEM_PET = MakeMessageType(FC_ITEM, FC_ITEM_PET),
	T_FC_ITEM_PET_BASEDATA_OK = MakeMessageType(FC_ITEM, FC_ITEM_PET_BASEDATA_OK),
	T_FC_ITEM_PET_DONE = MakeMessageType(FC_ITEM, FC_ITEM_PET_DONE),
	T_FC_DISSOLVED_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_DISSOLUTIONITEM),
	T_FC_DISSOLVED_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_DISSOLUTIONITEM_OK),
	T_FC_ITEM_PET_SET_NAME = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_NAME),
	T_FC_ITEM_PET_SET_NAME_OK = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_NAME_OK),
	T_FC_ITEM_PET_SET_EXP_RATIO = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_EXP_RATIO),
	T_FC_ITEM_PET_SET_EXP_RATIO_OK = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_EXP_RATIO_OK),
	T_FC_ITEM_PET_CHANGE_LEVEL = MakeMessageType(FC_ITEM, FC_ITEM_PET_CHANGE_LEVEL),
	T_FC_ITEM_PET_CHANGE_EXP = MakeMessageType(FC_ITEM, FC_ITEM_PET_CHANGE_EXP),
	T_FC_ITEM_PET_SET_SOCKET = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_SOCKET),
	T_FC_ITEM_PET_SET_SOCKET_OK = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_SOCKET_OK),
	T_FC_ITEM_PET_SET_KIT_SLOT = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_KIT_SLOT),
	T_FC_ITEM_PET_SET_KIT_SLOT_OK = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_KIT_SLOT_OK),
	T_FC_ITEM_PET_SET_AUTOSKILL_SLOT = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_KIT_AUTOSKILL_SLOT),
	T_FC_ITEM_PET_SET_AUTOSKILL_SLOT_OK = MakeMessageType(FC_ITEM, FC_ITEM_PET_SET_KIT_AUTOSKILL_SLOT_OK),
	T_FC_ITEM_USE_PET_SOCKET_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_USE_PET_SOCKET_ITEM),
	T_FC_ITEM_USE_PET_SOCKET_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_USE_PET_SOCKET_ITEM_OK),
	T_FC_ITEM_CANCEL_PET_SOCKET_ITEM = MakeMessageType(FC_ITEM, FC_ITEM_CANCEL_PET_SOCKET_ITEM),
	T_FC_ITEM_CANCEL_PET_SOCKET_ITEM_OK = MakeMessageType(FC_ITEM, FC_ITEM_CANCEL_PET_SOCKET_ITEM_OK),
	T_FC_ITEM_NOTIFY_WINDOW_POSITION = MakeMessageType(FC_ITEM, FC_ITEM_NOTIFY_WINDOW_POSITION),
	T_FC_ITEM_USE_CARDITEM_CHANGE_NATION_REQUEST = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_CHANGE_NATION_REQUEST),
	T_FC_ITEM_USE_CARDITEM_CHANGE_NATION_CONFIRM = MakeMessageType(FC_ITEM, FC_ITEM_USE_CARDITEM_CHANGE_NATION_CONFIRM),
	T_FC_MONSTER_CREATED = MakeMessageType(FC_MONSTER, FC_MONSTER_CREATED),
	T_FC_MONSTER_MOVE_OK = MakeMessageType(FC_MONSTER, FC_MONSTER_MOVE_OK),
	T_FC_MONSTER_HIDE = MakeMessageType(FC_MONSTER, FC_MONSTER_HIDE),
	T_FC_MONSTER_SHOW = MakeMessageType(FC_MONSTER, FC_MONSTER_SHOW),
	T_FC_MONSTER_CHANGE_HP = MakeMessageType(FC_MONSTER, FC_MONSTER_CHANGE_HP),
	T_FC_MONSTER_CHANGE_BODYCONDITION = MakeMessageType(FC_MONSTER, FC_MONSTER_CHANGE_BODYCONDITION),
	T_FC_MONSTER_SKILL_USE_SKILL = MakeMessageType(FC_MONSTER, FC_MONSTER_SKILL_USE_SKILL),
	T_FC_MONSTER_SKILL_END_SKILL = MakeMessageType(FC_MONSTER, FC_MONSTER_SKILL_END_SKILL),
	T_FC_MONSTER_SUMMON_MONSTER = MakeMessageType(FC_MONSTER, FC_MONSTER_SUMMON_MONSTER),
	T_FC_MONSTER_TUTORIAL_MONSTER_DEAD_NOTIFY = MakeMessageType(FC_MONSTER, FC_MONSTER_TUTORIAL_MONSTER_DEAD_NOTIFY),
	T_FC_MONSTER_TUTORIAL_MONSTER_DELETE = MakeMessageType(FC_MONSTER, FC_MONSTER_TUTORIAL_MONSTER_DELETE),
	T_FC_MONSTER_HPTALK = MakeMessageType(FC_MONSTER, FC_MONSTER_HPTALK),
	T_FC_MONSTER_SKILL = MakeMessageType(FC_MONSTER, FC_MONSTER_SKILL),
	T_FC_MONSTER_CREATED_ALIVE_FOR_GAMECLEAR = MakeMessageType(FC_MONSTER, FC_MONSTER_CREATED_ALIVE_FOR_GAMECLEAR),
	T_FC_MONSTER_SKILL_CANCEL = MakeMessageType(FC_MONSTER, FC_MONSTER_SKILL_CANCEL),
	T_FC_MONSTER_CHANGE_INDEX = MakeMessageType(FC_MONSTER, FC_MONSTER_CHANGE_INDEX),
	T_FC_MONSTER_CINEMA_DELETE_NOTIFY = MakeMessageType(FC_MONSTER, FC_MONSTER_CINEMA_DELETE_NOTIFY),
	T_FC_MOVE = MakeMessageType(FC_MOVE, FC_MOVE),
	T_FC_MOVE_OK = MakeMessageType(FC_MOVE, FC_MOVE_OK),
	T_FC_MOVE_LOCKON = MakeMessageType(FC_MOVE, FC_MOVE_LOCKON),
	T_FC_MOVE_LOCKON_OK = MakeMessageType(FC_MOVE, FC_MOVE_LOCKON_OK),
	T_FC_MOVE_UNLOCKON = MakeMessageType(FC_MOVE, FC_MOVE_UNLOCKON),
	T_FC_MOVE_UNLOCKON_OK = MakeMessageType(FC_MOVE, FC_MOVE_UNLOCKON_OK),
	T_FC_MOVE_LANDING = MakeMessageType(FC_MOVE, FC_MOVE_LANDING),
	T_FC_MOVE_LANDING_OK = MakeMessageType(FC_MOVE, FC_MOVE_LANDING_OK),
	T_FC_MOVE_LANDING_DONE = MakeMessageType(FC_MOVE, FC_MOVE_LANDING_DONE),
	T_FC_MOVE_TAKEOFF = MakeMessageType(FC_MOVE, FC_MOVE_TAKEOFF),
	T_FC_MOVE_TAKEOFF_OK = MakeMessageType(FC_MOVE, FC_MOVE_TAKEOFF_OK),
	T_FC_MISSILE_MOVE_OK = MakeMessageType(FC_MOVE, FC_MISSILE_MOVE_OK),
	T_FC_MOVE_TARGET = MakeMessageType(FC_MOVE, FC_MOVE_TARGET),
	T_FC_MOVE_WEAPON_VEL = MakeMessageType(FC_MOVE, FC_MOVE_WEAPON_VEL),
	T_FC_MOVE_WEAPON_VEL_OK = MakeMessageType(FC_MOVE, FC_MOVE_WEAPON_VEL_OK),
	T_FC_MOVE_ROLLING = MakeMessageType(FC_MOVE, FC_MOVE_ROLLING),
	T_FC_MOVE_ROLLING_OK = MakeMessageType(FC_MOVE, FC_MOVE_ROLLING_OK),
	T_FC_MOVE_HACKSHIELD_GuidReqMsg = MakeMessageType(FC_MOVE, FC_MOVE_HACKSHIELD_GuidReqMsg),
	T_FC_MOVE_HACKSHIELD_GuidAckMsg = MakeMessageType(FC_MOVE, FC_MOVE_HACKSHIELD_GuidAckMsg),
	T_FC_MOVE_HACKSHIELD_CRCReqMsg = MakeMessageType(FC_MOVE, FC_MOVE_HACKSHIELD_CRCReqMsg),
	T_FC_MOVE_HACKSHIELD_CRCAckMsg = MakeMessageType(FC_MOVE, FC_MOVE_HACKSHIELD_CRCAckMsg),
	T_FC_MOVE_HACKSHIELD_HACKING_CLIENT = MakeMessageType(FC_MOVE, FC_MOVE_HACKSHIELD_HACKING_CLIENT),
	T_FC_PARTY_CREATE_OK = MakeMessageType(FC_PARTY, FC_PARTY_CREATE_OK),
	T_FC_PARTY_REQUEST_INVITE = MakeMessageType(FC_PARTY, FC_PARTY_REQUEST_INVITE),
	T_FC_PARTY_REQUEST_INVITE_QUESTION = MakeMessageType(FC_PARTY, FC_PARTY_REQUEST_INVITE_QUESTION),
	T_FC_PARTY_ACCEPT_INVITE = MakeMessageType(FC_PARTY, FC_PARTY_ACCEPT_INVITE),
	T_FC_PARTY_REJECT_INVITE = MakeMessageType(FC_PARTY, FC_PARTY_REJECT_INVITE),
	T_FC_PARTY_REJECT_INVITE_OK = MakeMessageType(FC_PARTY, FC_PARTY_REJECT_INVITE_OK),
	T_FC_PARTY_GET_MEMBER = MakeMessageType(FC_PARTY, FC_PARTY_GET_MEMBER),
	T_FC_PARTY_PUT_MEMBER = MakeMessageType(FC_PARTY, FC_PARTY_PUT_MEMBER),
	T_FC_PARTY_GET_ALL_MEMBER = MakeMessageType(FC_PARTY, FC_PARTY_GET_ALL_MEMBER),
	T_FC_PARTY_PUT_ALL_MEMBER = MakeMessageType(FC_PARTY, FC_PARTY_PUT_ALL_MEMBER),
	T_FC_PARTY_UPDATE_MEMBER_INFO_ALL = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_ALL),
	T_FC_PARTY_UPDATE_MEMBER_INFO_LEVEL = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_LEVEL),
	T_FC_PARTY_UPDATE_MEMBER_INFO_HP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_HP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_HP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_HP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_DP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_DP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_DP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_DP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_SP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_SP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_SP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_SP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_EP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_EP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_EP = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_EP),
	T_FC_PARTY_UPDATE_MEMBER_INFO_BODYCONDITION = MakeMessageType(FC_PARTY, FC_PARTY_UPDATE_MEMBER_INFO_BODYCONDITION),
	T_FC_PARTY_REQUEST_PARTY_WARP = MakeMessageType(FC_PARTY, FC_PARTY_REQUEST_PARTY_WARP),
	T_FC_PARTY_REQUEST_PARTY_WARP_WITH_MAP_NAME = MakeMessageType(FC_PARTY, FC_PARTY_REQUEST_PARTY_WARP_WITH_MAP_NAME),
	T_FC_PARTY_REQUEST_PARTY_OBJECT_EVENT = MakeMessageType(FC_PARTY, FC_PARTY_REQUEST_PARTY_OBJECT_EVENT),
	T_FC_PARTY_GET_OTHER_MOVE = MakeMessageType(FC_PARTY, FC_PARTY_GET_OTHER_MOVE),
	T_FC_PARTY_BATTLE_START = MakeMessageType(FC_PARTY, FC_PARTY_BATTLE_START),
	T_FC_PARTY_BATTLE_END = MakeMessageType(FC_PARTY, FC_PARTY_BATTLE_END),
	T_FC_PARTY_PUT_ITEM_OTHER = MakeMessageType(FC_PARTY, FC_PARTY_PUT_ITEM_OTHER),
	T_FC_PARTY_AUTO_CREATED = MakeMessageType(FC_PARTY, FC_PARTY_AUTO_CREATED),
	T_FC_PARTY_AUTO_CREATED_THE_ARENA = MakeMessageType(FC_PARTY, FC_PARTY_AUTO_CREATED_THE_ARENA),
	T_FC_PARTY_REQUEST_INVITE_QUESTION_THE_ARENA = MakeMessageType(FC_PARTY, FC_PARTY_REQUEST_INVITE_QUESTION_THE_ARENA),
	T_FC_QUEST_REQUEST_START = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_START),
	T_FC_QUEST_REQUEST_START_RESULT = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_START_RESULT),
	T_FC_QUEST_ACCEPT_QUEST = MakeMessageType(FC_QUEST, FC_QUEST_ACCEPT_QUEST),
	T_FC_QUEST_CANCEL_QUEST = MakeMessageType(FC_QUEST, FC_QUEST_CANCEL_QUEST),
	T_FC_QUEST_REQUEST_SUCCESS = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_SUCCESS),
	T_FC_QUEST_REQUEST_SUCCESS_RESULT = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_SUCCESS_RESULT),
	T_FC_QUEST_PUT_ALL_QUEST_HEADER = MakeMessageType(FC_QUEST, FC_QUEST_PUT_ALL_QUEST_HEADER),
	T_FC_QUEST_PUT_ALL_QUEST = MakeMessageType(FC_QUEST, FC_QUEST_PUT_ALL_QUEST),
	T_FC_QUEST_PUT_ALL_QUEST_DONE = MakeMessageType(FC_QUEST, FC_QUEST_PUT_ALL_QUEST_DONE),
	T_FC_QUEST_DISCARD_QUEST = MakeMessageType(FC_QUEST, FC_QUEST_DISCARD_QUEST),
	T_FC_QUEST_DISCARD_QUEST_OK = MakeMessageType(FC_QUEST, FC_QUEST_DISCARD_QUEST_OK),
	T_FC_QUEST_MOVE_QUEST_MAP = MakeMessageType(FC_QUEST, FC_QUEST_MOVE_QUEST_MAP),
	T_FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT_HEADER = MakeMessageType(FC_QUEST, FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT_HEADER),
	T_FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT = MakeMessageType(FC_QUEST, FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT),
	T_FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT_DONE = MakeMessageType(FC_QUEST, FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT_DONE),
	T_FC_QUEST_UPDATE_MONSTER_COUNT = MakeMessageType(FC_QUEST, FC_QUEST_UPDATE_MONSTER_COUNT),
	T_FC_QUEST_REQUEST_SUCCESS_CHECK = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_SUCCESS_CHECK),
	T_FC_QUEST_REQUEST_SUCCESS_CHECK_RESULT = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_SUCCESS_CHECK_RESULT),
	T_FC_QUEST_REQUEST_PARTY_WARP = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_PARTY_WARP),
	T_FC_QUEST_REQUEST_PARTY_WARP_ACK = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_PARTY_WARP_ACK),
	T_FC_QUEST_REQUEST_MISSIONMASTER_HELP = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_MISSIONMASTER_HELP),
	T_FC_QUEST_REQUEST_MISSIONMASTER_HELP_INVITE = MakeMessageType(FC_QUEST, FC_QUEST_REQUEST_MISSIONMASTER_HELP_INVITE),
	T_FC_QUEST_MISSIONMASTER_HELP_INVITE = MakeMessageType(FC_QUEST, FC_QUEST_MISSIONMASTER_HELP_INVITE),
	T_FC_QUEST_MISSIONMASTER_HELP_INVITE_OK = MakeMessageType(FC_QUEST, FC_QUEST_MISSIONMASTER_HELP_INVITE_OK),
	T_FC_QUEST_MISSIONMASTER_HELP_REJECT = MakeMessageType(FC_QUEST, FC_QUEST_MISSIONMASTER_HELP_REJECT),
	T_FC_QUEST_MISSIONMASTER_HELP_REJECT_OK = MakeMessageType(FC_QUEST, FC_QUEST_MISSIONMASTER_HELP_REJECT_OK),
	T_FC_QUEST_INSERT_QUEST = MakeMessageType(FC_QUEST, FC_QUEST_INSERT_QUEST),
	T_FC_QUEST_DELETE_QUEST = MakeMessageType(FC_QUEST, FC_QUEST_DELETE_QUEST),
	T_FC_RACING_RACINGLIST_REQUEST = MakeMessageType(FC_RACING, FC_RACING_RACINGLIST_REQUEST),
	T_FC_RACING_RACINGLIST_REQUEST_ACK = MakeMessageType(FC_RACING, FC_RACING_RACINGLIST_REQUEST_ACK),
	T_FC_RACING_RACINGINFO_REQUEST = MakeMessageType(FC_RACING, FC_RACING_RACINGINFO_REQUEST),
	T_FC_RACING_RACINGINFO_REQUEST_ACK = MakeMessageType(FC_RACING, FC_RACING_RACINGINFO_REQUEST_ACK),
	T_FC_RACING_RACINGNOTIFY = MakeMessageType(FC_RACING, FC_RACING_RACINGNOTIFY),
	T_FC_RACING_JOIN_ENABLE = MakeMessageType(FC_RACING, FC_RACING_JOIN_ENABLE),
	T_FC_RACING_JOIN_REQUEST = MakeMessageType(FC_RACING, FC_RACING_JOIN_REQUEST),
	T_FC_RACING_JOIN_REQUEST_ACK = MakeMessageType(FC_RACING, FC_RACING_JOIN_REQUEST_ACK),
	T_FC_RACING_COUNTDOWN = MakeMessageType(FC_RACING, FC_RACING_COUNTDOWN),
	T_FC_RACING_CHECKPOINT_CHECK = MakeMessageType(FC_RACING, FC_RACING_CHECKPOINT_CHECK),
	T_FC_RACING_CHECKPOINT_CHECK_ACK = MakeMessageType(FC_RACING, FC_RACING_CHECKPOINT_CHECK_ACK),
	T_FC_RACING_FINISHED = MakeMessageType(FC_RACING, FC_RACING_FINISHED),
	T_FC_RACING_OTHER_FINISHED = MakeMessageType(FC_RACING, FC_RACING_OTHER_FINISHED),
	T_FC_RACING_FINALRANKING = MakeMessageType(FC_RACING, FC_RACING_FINALRANKING),
	T_FC_REQUEST_REQUEST = MakeMessageType(FC_REQUEST, FC_REQUEST_REQUEST),
	T_FC_REQUEST_REQUEST_OK = MakeMessageType(FC_REQUEST, FC_REQUEST_REQUEST_OK),
	T_FC_REQUEST_ACCEPT_REQUEST = MakeMessageType(FC_REQUEST, FC_REQUEST_ACCEPT_REQUEST),
	T_FC_REQUEST_ACCEPT_REQUEST_OK = MakeMessageType(FC_REQUEST, FC_REQUEST_ACCEPT_REQUEST_OK),
	T_FC_REQUEST_REJECT_REQUEST = MakeMessageType(FC_REQUEST, FC_REQUEST_REJECT_REQUEST),
	T_FC_REQUEST_REJECT_REQUEST_OK = MakeMessageType(FC_REQUEST, FC_REQUEST_REJECT_REQUEST_OK),
	T_FC_REQUEST_CANCEL_REQUEST = MakeMessageType(FC_REQUEST, FC_REQUEST_CANCEL_REQUEST),
	T_FC_SHOP_PUT_ITEM_HEADER = MakeMessageType(FC_SHOP, FC_SHOP_PUT_ITEM_HEADER),
	T_FC_SHOP_PUT_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_PUT_ITEM),
	T_FC_SHOP_PUT_ITEM_DONE = MakeMessageType(FC_SHOP, FC_SHOP_PUT_ITEM_DONE),
	T_FC_SHOP_GET_ITEMINFO = MakeMessageType(FC_SHOP, FC_SHOP_GET_ITEMINFO),
	T_FC_SHOP_GET_ITEMINFO_OK = MakeMessageType(FC_SHOP, FC_SHOP_GET_ITEMINFO_OK),
	T_FC_SHOP_BUY_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_BUY_ITEM),
	T_FC_SHOP_BUY_ITEM_OK = MakeMessageType(FC_SHOP, FC_SHOP_BUY_ITEM_OK),
	T_FC_SHOP_SELL_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_SELL_ITEM),
	T_FC_SHOP_SELL_ITEM_OK = MakeMessageType(FC_SHOP, FC_SHOP_SELL_ITEM_OK),
	T_FC_SHOP_GET_USED_ITEM_PRICE = MakeMessageType(FC_SHOP, FC_SHOP_GET_USED_ITEM_PRICE),
	T_FC_SHOP_GET_USED_ITEM_PRICE_OK = MakeMessageType(FC_SHOP, FC_SHOP_GET_USED_ITEM_PRICE_OK),
	T_FC_SHOP_GET_SHOP_ITEM_LIST = MakeMessageType(FC_SHOP, FC_SHOP_GET_SHOP_ITEM_LIST),
	T_FC_SHOP_REQUEST_REPAIR = MakeMessageType(FC_SHOP, FC_SHOP_REQUEST_REPAIR),
	T_FC_SHOP_REQUEST_REPAIR_OK = MakeMessageType(FC_SHOP, FC_SHOP_REQUEST_REPAIR_OK),
	T_FC_SHOP_BUY_CASH_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_BUY_CASH_ITEM),
	T_FC_SHOP_BUY_CASH_ITEM_OK = MakeMessageType(FC_SHOP, FC_SHOP_BUY_CASH_ITEM_OK),
	T_FC_SHOP_BUY_COLOR_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_BUY_COLOR_ITEM),
	T_FC_SHOP_BUY_COLOR_ITEM_OK = MakeMessageType(FC_SHOP, FC_SHOP_BUY_COLOR_ITEM_OK),
	T_FC_SHOP_BUY_WARPOINT_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_BUY_WARPOINT_ITEM),
	T_FC_SHOP_BUY_WARPOINT_ITEM_OK = MakeMessageType(FC_SHOP, FC_SHOP_BUY_WARPOINT_ITEM_OK),
	T_FC_SHOP_CHECK_GIVE_TARGET = MakeMessageType(FC_SHOP, FC_SHOP_CHECK_GIVE_TARGET),
	T_FC_SHOP_CHECK_GIVE_TARGET_OK = MakeMessageType(FC_SHOP, FC_SHOP_CHECK_GIVE_TARGET_OK),
	T_FC_SHOP_INFINITY_ITEM_HEADER = MakeMessageType(FC_SHOP, FC_SHOP_INFINITY_ITEM_HEADER),
	T_FC_SHOP_INFINITY_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_INFINITY_ITEM),
	T_FC_SHOP_INFINITY_ITEM_DONE = MakeMessageType(FC_SHOP, FC_SHOP_INFINITY_ITEM_DONE),
	T_FC_SHOP_INFINITY_BUY_ITEM = MakeMessageType(FC_SHOP, FC_SHOP_INFINITY_BUY_ITEM),
	T_FC_SHOP_CLOSE = MakeMessageType(FC_SHOP, FC_SHOP_CLOSE),
	T_FC_SHOP_BUY_ITEM_UPDATE = MakeMessageType(FC_SHOP, FC_SHOP_BUY_ITEM_UPDATE),
	T_FC_SHOP_INFLUENCE_BUFF = MakeMessageType(FC_SHOP, FC_SHOP_INFLUENCE_BUFF),
	T_FC_SHOP_INFLUENCE_BUFF_OK = MakeMessageType(FC_SHOP, FC_SHOP_INFLUENCE_BUFF_OK),
	T_FC_SKILL_USE_SKILLPOINT = MakeMessageType(FC_SKILL, FC_SKILL_USE_SKILLPOINT),
	T_FC_SKILL_USE_SKILLPOINT_OK = MakeMessageType(FC_SKILL, FC_SKILL_USE_SKILLPOINT_OK),
	T_FC_SKILL_SETUP_SKILL = MakeMessageType(FC_SKILL, FC_SKILL_SETUP_SKILL),
	T_FC_SKILL_SETUP_SKILL_OK_HEADER = MakeMessageType(FC_SKILL, FC_SKILL_SETUP_SKILL_OK_HEADER),
	T_FC_SKILL_SETUP_SKILL_OK = MakeMessageType(FC_SKILL, FC_SKILL_SETUP_SKILL_OK),
	T_FC_SKILL_SETUP_SKILL_OK_DONE = MakeMessageType(FC_SKILL, FC_SKILL_SETUP_SKILL_OK_DONE),
	T_FC_SKILL_USE_SKILL = MakeMessageType(FC_SKILL, FC_SKILL_USE_SKILL),
	T_FC_SKILL_USE_SKILL_OK = MakeMessageType(FC_SKILL, FC_SKILL_USE_SKILL_OK),
	T_FC_SKILL_CANCEL_SKILL = MakeMessageType(FC_SKILL, FC_SKILL_CANCEL_SKILL),
	T_FC_SKILL_INVALIDATE_SKILL = MakeMessageType(FC_SKILL, FC_SKILL_INVALIDATE_SKILL),
	T_FC_SKILL_PREPARE_USE = MakeMessageType(FC_SKILL, FC_SKILL_PREPARE_USE),
	T_FC_SKILL_PREPARE_USE_OK = MakeMessageType(FC_SKILL, FC_SKILL_PREPARE_USE_OK),
	T_FC_SKILL_CANCEL_PREPARE = MakeMessageType(FC_SKILL, FC_SKILL_CANCEL_PREPARE),
	T_FC_SKILL_CANCEL_PREPARE_OK = MakeMessageType(FC_SKILL, FC_SKILL_CANCEL_PREPARE_OK),
	T_FC_SKILL_CONFIRM_USE = MakeMessageType(FC_SKILL, FC_SKILL_CONFIRM_USE),
	T_FC_SKILL_CONFIRM_USE_ACK = MakeMessageType(FC_SKILL, FC_SKILL_CONFIRM_USE_ACK),
	T_FC_SKILL_CANCEL_SKILL_OK = MakeMessageType(FC_SKILL, FC_SKILL_CANCEL_SKILL_OK),
	T_FC_STORE_GET_ITEM = MakeMessageType(FC_STORE, FC_STORE_GET_ITEM),
	T_FC_STORE_PUT_ITEM_HEADER = MakeMessageType(FC_STORE, FC_STORE_PUT_ITEM_HEADER),
	T_FC_STORE_PUT_ITEM = MakeMessageType(FC_STORE, FC_STORE_PUT_ITEM),
	T_FC_STORE_PUT_ITEM_DONE = MakeMessageType(FC_STORE, FC_STORE_PUT_ITEM_DONE),
	T_FC_STORE_MOVE_ITEM = MakeMessageType(FC_STORE, FC_STORE_MOVE_ITEM),
	T_FC_STORE_MOVE_ITEM_OK = MakeMessageType(FC_STORE, FC_STORE_MOVE_ITEM_OK),
	T_FC_STORE_INSERT_ITEM = MakeMessageType(FC_STORE, FC_STORE_INSERT_ITEM),
	T_FC_STORE_DELETE_ITEM = MakeMessageType(FC_STORE, FC_STORE_DELETE_ITEM),
	T_FC_STORE_UPDATE_ITEM_COUNT = MakeMessageType(FC_STORE, FC_STORE_UPDATE_ITEM_COUNT),
	T_FC_STORE_UPDATE_ENDURANCE = MakeMessageType(FC_STORE, FC_STORE_UPDATE_ENDURANCE),
	T_FC_STORE_UPDATE_POSSESS = MakeMessageType(FC_STORE, FC_STORE_UPDATE_POSSESS),
	T_FC_STORE_UPDATE_RARE_FIX = MakeMessageType(FC_STORE, FC_STORE_UPDATE_RARE_FIX),
	T_FC_STORE_INSERT_USINGITEM = MakeMessageType(FC_STORE, FC_STORE_INSERT_USINGITEM),
	T_FC_STORE_DELETE_USINGITEM = MakeMessageType(FC_STORE, FC_STORE_DELETE_USINGITEM),
	T_FC_STORE_UPDATE_USINGITEM = MakeMessageType(FC_STORE, FC_STORE_UPDATE_USINGITEM),
	T_FC_STORE_EXPIRE_USINGITEM = MakeMessageType(FC_STORE, FC_STORE_EXPIRE_USINGITEM),
	T_FC_STORE_UPDATE_ITEMSTORAGE = MakeMessageType(FC_STORE, FC_STORE_UPDATE_ITEMSTORAGE),
	T_FC_STORE_UPDATE_ITEMNUM = MakeMessageType(FC_STORE, FC_STORE_UPDATE_ITEMNUM),
	T_FC_STORE_REQUEST_QUICKSLOT = MakeMessageType(FC_STORE, FC_STORE_REQUEST_QUICKSLOT),
	T_FC_STORE_REQUEST_QUICKSLOT_OK = MakeMessageType(FC_STORE, FC_STORE_REQUEST_QUICKSLOT_OK),
	T_FC_STORE_SAVE_QUICKSLOT = MakeMessageType(FC_STORE, FC_STORE_SAVE_QUICKSLOT),
	T_FC_STORE_LOG_GUILD_ITEM = MakeMessageType(FC_STORE, FC_STORE_LOG_GUILD_ITEM),
	T_FC_STORE_LOG_GUILD_ITEM_OK = MakeMessageType(FC_STORE, FC_STORE_LOG_GUILD_ITEM_OK),
	T_FC_STORE_LOG_GUILD_ITEM_OK_HEADER = MakeMessageType(FC_STORE, FC_STORE_LOG_GUILD_ITEM_OK_HEADER),
	T_FC_STORE_LOG_GUILD_ITEM_OK_DONE = MakeMessageType(FC_STORE, FC_STORE_LOG_GUILD_ITEM_OK_DONE),
	T_FC_STORE_UPDATE_ARMOR_ITEM_EVENT_INFO = MakeMessageType(FC_STORE, FC_STORE_UPDATE_ARMOR_ITEM_EVENT_INFO),
	T_FC_STRING_128 = MakeMessageType(FC_STRING, FC_STRING_128),
	T_FC_STRING_256 = MakeMessageType(FC_STRING, FC_STRING_256),
	T_FC_STRING_512 = MakeMessageType(FC_STRING, FC_STRING_512),
	T_FC_WORLD_NOTIFICATION = MakeMessageType(FC_STRING, FC_WORLD_NOTIFICATION),
	T_FC_TIMER_START_TIMER = MakeMessageType(FC_TIMER, FC_TIMER_START_TIMER),
	T_FC_TIMER_STOP_TIMER = MakeMessageType(FC_TIMER, FC_TIMER_STOP_TIMER),
	T_FC_TIMER_UPDATE_TIMER = MakeMessageType(FC_TIMER, FC_TIMER_UPDATE_TIMER),
	T_FC_TIMER_PAUSE_TIMER = MakeMessageType(FC_TIMER, FC_TIMER_PAUSE_TIMER),
	T_FC_TIMER_CONTINUE_TIMER = MakeMessageType(FC_TIMER, FC_TIMER_CONTINUE_TIMER),
	T_FC_TIMER_TIMEOUT = MakeMessageType(FC_TIMER, FC_TIMER_TIMEOUT),
	T_FC_TRADE_REQUEST_TRADE = MakeMessageType(FC_TRADE, FC_TRADE_REQUEST_TRADE),
	T_FC_TRADE_REQUEST_TRADE_OK = MakeMessageType(FC_TRADE, FC_TRADE_REQUEST_TRADE_OK),
	T_FC_TRADE_CANCEL_REQUEST = MakeMessageType(FC_TRADE, FC_TRADE_CANCEL_REQUEST),
	T_FC_TRADE_CANCEL_REQUEST_OK = MakeMessageType(FC_TRADE, FC_TRADE_CANCEL_REQUEST_OK),
	T_FC_TRADE_ACCEPT_TRADE = MakeMessageType(FC_TRADE, FC_TRADE_ACCEPT_TRADE),
	T_FC_TRADE_ACCEPT_TRADE_OK = MakeMessageType(FC_TRADE, FC_TRADE_ACCEPT_TRADE_OK),
	T_FC_TRADE_REJECT_TRADE = MakeMessageType(FC_TRADE, FC_TRADE_REJECT_TRADE),
	T_FC_TRADE_REJECT_TRADE_OK = MakeMessageType(FC_TRADE, FC_TRADE_REJECT_TRADE_OK),
	T_FC_TRADE_REJECT_TRADING = MakeMessageType(FC_TRADE, FC_TRADE_REJECT_TRADING),
	T_FC_TRADE_SHOW_TRADE_WINDOW = MakeMessageType(FC_TRADE, FC_TRADE_SHOW_TRADE_WINDOW),
	T_FC_TRADE_TRANS_ITEM = MakeMessageType(FC_TRADE, FC_TRADE_TRANS_ITEM),
	T_FC_TRADE_TRANS_ITEM_OK = MakeMessageType(FC_TRADE, FC_TRADE_TRANS_ITEM_OK),
	T_FC_TRADE_SEE_ITEM = MakeMessageType(FC_TRADE, FC_TRADE_SEE_ITEM),
	T_FC_TRADE_SEE_ITEM_OK = MakeMessageType(FC_TRADE, FC_TRADE_SEE_ITEM_OK),
	T_FC_TRADE_OK_TRADE = MakeMessageType(FC_TRADE, FC_TRADE_OK_TRADE),
	T_FC_TRADE_OK_TRADE_OK = MakeMessageType(FC_TRADE, FC_TRADE_OK_TRADE_OK),
	T_FC_TRADE_CANCEL_TRADE = MakeMessageType(FC_TRADE, FC_TRADE_CANCEL_TRADE),
	T_FC_TRADE_CANCEL_TRADE_OK = MakeMessageType(FC_TRADE, FC_TRADE_CANCEL_TRADE_OK),
	T_FC_TRADE_INSERT_ITEM = MakeMessageType(FC_TRADE, FC_TRADE_INSERT_ITEM),
	T_FC_TRADE_DELETE_ITEM = MakeMessageType(FC_TRADE, FC_TRADE_DELETE_ITEM),
	T_FC_TRADE_UPDATE_ITEM_COUNT = MakeMessageType(FC_TRADE, FC_TRADE_UPDATE_ITEM_COUNT),
	T_FC_TRADE_OK_TRADE_NOTIFY = MakeMessageType(FC_TRADE, FC_TRADE_OK_TRADE_NOTIFY),
	T_FC_TRADE_SEE_PET_DATA = MakeMessageType(FC_TRADE, FC_TRADE_SEE_PET_DATA),
	T_FC_TRADE_DELETE_CURRENT_PET_DATA = MakeMessageType(FC_TRADE, FC_TRADE_DELETE_CURRENT_PET_DATA),
	T_FC_TRADE_INSERT_CURRENT_PET_DATA = MakeMessageType(FC_TRADE, FC_TRADE_INSERT_CURRENT_PET_DATA),
	T_FC_COUNTDOWN_START = MakeMessageType(FC_COUNTDOWN, FC_COUNTDOWN_START),
	T_FC_COUNTDOWN_DONE = MakeMessageType(FC_COUNTDOWN, FC_COUNTDOWN_DONE),
	T_FC_OBJECT_CHANGE_BODYCONDITION = MakeMessageType(FC_OBJECT, FC_OBJECT_CHANGE_BODYCONDITION),
	T_FC_OBJECT_CHANGE_BODYCONDITION_OK = MakeMessageType(FC_OBJECT, FC_OBJECT_CHANGE_BODYCONDITION_OK),
	T_FC_OBJECT_CHANGE = MakeMessageType(FC_OBJECT, FC_OBJECT_CHANGE),
	T_FC_AUCTION_REGISTER_ITEM = MakeMessageType(FC_AUCTION, FC_AUCTION_REGISTER_ITEM),
	T_FC_AUCTION_REGISTER_ITEM_OK = MakeMessageType(FC_AUCTION, FC_AUCTION_REGISTER_ITEM_OK),
	T_FC_AUCTION_CANCEL_REGISTER = MakeMessageType(FC_AUCTION, FC_AUCTION_CANCEL_REGISTER),
	T_FC_AUCTION_CANCEL_REGISTER_OK = MakeMessageType(FC_AUCTION, FC_AUCTION_CANCEL_REGISTER_OK),
	T_FC_AUCTION_BUY_ITEM = MakeMessageType(FC_AUCTION, FC_AUCTION_BUY_ITEM),
	T_FC_AUCTION_BUY_ITEM_OK = MakeMessageType(FC_AUCTION, FC_AUCTION_BUY_ITEM_OK),
	T_FC_AUCTION_GET_ITEM_LIST = MakeMessageType(FC_AUCTION, FC_AUCTION_GET_ITEM_LIST),
	T_FC_AUCTION_INSERT_ITEM = MakeMessageType(FC_AUCTION, FC_AUCTION_INSERT_ITEM),
	T_FC_AUCTION_PUT_ENCHANT = MakeMessageType(FC_AUCTION, FC_AUCTION_PUT_ENCHANT),
	T_FC_CITYWAR_START_WAR = MakeMessageType(FC_CITYWAR, FC_CITYWAR_START_WAR),
	T_FC_CITYWAR_MONSTER_CREATED = MakeMessageType(FC_CITYWAR, FC_CITYWAR_MONSTER_CREATED),
	T_FC_CITYWAR_MONSTER_DEAD = MakeMessageType(FC_CITYWAR, FC_CITYWAR_MONSTER_DEAD),
	T_FC_CITYWAR_END_WAR = MakeMessageType(FC_CITYWAR, FC_CITYWAR_END_WAR),
	T_FC_CITYWAR_GET_OCCUPYINFO = MakeMessageType(FC_CITYWAR, FC_CITYWAR_GET_OCCUPYINFO),
	T_FC_CITYWAR_GET_OCCUPYINFO_OK = MakeMessageType(FC_CITYWAR, FC_CITYWAR_GET_OCCUPYINFO_OK),
	T_FC_CITYWAR_SET_SETTINGTIME = MakeMessageType(FC_CITYWAR, FC_CITYWAR_SET_SETTINGTIME),
	T_FC_CITYWAR_SET_TEX = MakeMessageType(FC_CITYWAR, FC_CITYWAR_SET_TEX),
	T_FC_CITYWAR_SET_BRIEFING = MakeMessageType(FC_CITYWAR, FC_CITYWAR_SET_BRIEFING),
	T_FC_CITYWAR_BRING_SUMOFTEX = MakeMessageType(FC_CITYWAR, FC_CITYWAR_BRING_SUMOFTEX),
	T_FC_CITYWAR_BRING_SUMOFTEX_OK = MakeMessageType(FC_CITYWAR, FC_CITYWAR_BRING_SUMOFTEX_OK),
	T_FC_WAR_NOTIFY_INVASION = MakeMessageType(FC_WAR, FC_WAR_NOTIFY_INVASION),
	T_FC_WAR_NOTIFY_INFLUENCE_MONSTER_DEAD = MakeMessageType(FC_WAR, FC_WAR_NOTIFY_INFLUENCE_MONSTER_DEAD),
	T_FC_WAR_NOTIFY_INFLUENCE_MONSTER_INVASION = MakeMessageType(FC_WAR, FC_WAR_NOTIFY_INFLUENCE_MONSTER_INVASION),
	T_FC_WAR_NOTIFY_INFLUENCE_MONSTER_AUTO_DESTROYED = MakeMessageType(FC_WAR, FC_WAR_NOTIFY_INFLUENCE_MONSTER_AUTO_DESTROYED),
	T_FC_WAR_BOSS_MONSTER_SUMMON_DATA = MakeMessageType(FC_WAR, FC_WAR_BOSS_MONSTER_SUMMON_DATA),
	T_FC_WAR_JACO_MONSTER_SUMMON = MakeMessageType(FC_WAR, FC_WAR_JACO_MONSTER_SUMMON),
	T_FC_WAR_STRATEGYPOINT_MONSTER_SUMMON = MakeMessageType(FC_WAR, FC_WAR_STRATEGYPOINT_MONSTER_SUMMON),
	T_FC_WAR_SIGN_BOARD_INSERT_STRING = MakeMessageType(FC_WAR, FC_WAR_SIGN_BOARD_INSERT_STRING),
	T_FC_WAR_SIGN_BOARD_DELETE_STRING = MakeMessageType(FC_WAR, FC_WAR_SIGN_BOARD_DELETE_STRING),
	T_FC_WAR_REQ_SIGN_BOARD_STRING_LIST = MakeMessageType(FC_WAR, FC_WAR_REQ_SIGN_BOARD_STRING_LIST),
	T_FC_WAR_REQ_SIGN_BOARD_STRING_LIST_OK = MakeMessageType(FC_WAR, FC_WAR_REQ_SIGN_BOARD_STRING_LIST_OK),
	T_FC_WAR_UPDATE_CONTRIBUTION_POINT_OK = MakeMessageType(FC_WAR, FC_WAR_UPDATE_CONTRIBUTION_POINT_OK),
	T_FC_WAR_INFLUENCE_DATA = MakeMessageType(FC_WAR, FC_WAR_INFLUENCE_DATA),
	T_FC_WAR_MONSTER_CREATED = MakeMessageType(FC_WAR, FC_WAR_MONSTER_CREATED),
	T_FC_WAR_MONSTER_AUTO_DESTROYED = MakeMessageType(FC_WAR, FC_WAR_MONSTER_AUTO_DESTROYED),
	T_FC_WAR_MONSTER_DEAD = MakeMessageType(FC_WAR, FC_WAR_MONSTER_DEAD),
	T_FC_WAR_BOSS_CONTRIBUTION_GUILD = MakeMessageType(FC_WAR, FC_WAR_BOSS_CONTRIBUTION_GUILD),
	T_FC_WAR_INFLUENCE_CONSECUTIVE_VICTORITES = MakeMessageType(FC_WAR, FC_WAR_INFLUENCE_CONSECUTIVE_VICTORITES),
	T_FC_WAR_INFLUENCE_CONSECUTIVE_POINT = MakeMessageType(FC_WAR, FC_WAR_INFLUENCE_CONSECUTIVE_POINT),
	T_FC_BAZAAR_CUSTOMER_INFO_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_CUSTOMER_INFO_OK),
	T_FC_BAZAAR_INFO_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_INFO_OK),
	T_FC_BAZAAR_SELL_PUT_ITEM = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_PUT_ITEM),
	T_FC_BAZAAR_SELL_PUT_ITEM_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_PUT_ITEM_OK),
	T_FC_BAZAAR_SELL_CANCEL_ITEM = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_CANCEL_ITEM),
	T_FC_BAZAAR_SELL_CANCEL_ITEM_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_CANCEL_ITEM_OK),
	T_FC_BAZAAR_SELL_START = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_START),
	T_FC_BAZAAR_SELL_START_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_START_OK),
	T_FC_BAZAAR_SELL_REQUEST_ITEMLIST = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_REQUEST_ITEMLIST),
	T_FC_BAZAAR_SELL_REQUEST_ITEMLIST_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_REQUEST_ITEMLIST_OK),
	T_FC_BAZAAR_SELL_ITEM_ENCHANTLIST_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_ITEM_ENCHANTLIST_OK),
	T_FC_BAZAAR_SELL_BUY_ITEM = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_BUY_ITEM),
	T_FC_BAZAAR_SELL_BUY_ITEM_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_SELL_BUY_ITEM_OK),
	T_FC_BAZAAR_BUY_PUT_ITEM = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_PUT_ITEM),
	T_FC_BAZAAR_BUY_PUT_ITEM_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_PUT_ITEM_OK),
	T_FC_BAZAAR_BUY_CANCEL_ITEM = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_CANCEL_ITEM),
	T_FC_BAZAAR_BUY_CANCEL_ITEM_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_CANCEL_ITEM_OK),
	T_FC_BAZAAR_BUY_START = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_START),
	T_FC_BAZAAR_BUY_START_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_START_OK),
	T_FC_BAZAAR_BUY_REQUEST_ITEMLIST = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_REQUEST_ITEMLIST),
	T_FC_BAZAAR_BUY_REQUEST_ITEMLIST_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_REQUEST_ITEMLIST_OK),
	T_FC_BAZAAR_BUY_SELL_ITEM = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_SELL_ITEM),
	T_FC_BAZAAR_BUY_SELL_ITEM_OK = MakeMessageType(FC_BAZAAR, FC_BAZAAR_BUY_SELL_ITEM_OK),
	T_FC_ARENA_REQUEST_TEAM = MakeMessageType(FC_ARENA, FC_ARENA_REQUEST_TEAM),
	T_FC_ARENA_REQUEST_TEAM_OK = MakeMessageType(FC_ARENA, FC_ARENA_REQUEST_TEAM_OK),
	T_FC_ARENA_CREATE_TEAM = MakeMessageType(FC_ARENA, FC_ARENA_CREATE_TEAM),
	T_FC_ARENA_CREATE_TEAM_OK = MakeMessageType(FC_ARENA, FC_ARENA_CREATE_TEAM_OK),
	T_FC_ARENA_ENTER_TEAM = MakeMessageType(FC_ARENA, FC_ARENA_ENTER_TEAM),
	T_FC_ARENA_ENTER_TEAM_OK = MakeMessageType(FC_ARENA, FC_ARENA_ENTER_TEAM_OK),
	T_FC_ARENA_TEAM_MEMBER_LIST = MakeMessageType(FC_ARENA, FC_ARENA_TEAM_MEMBER_LIST),
	T_FC_ARENA_REAVE_TEAM = MakeMessageType(FC_ARENA, FC_ARENA_REAVE_TEAM),
	T_FC_ARENA_REAVE_TEAM_OK = MakeMessageType(FC_ARENA, FC_ARENA_REAVE_TEAM_OK),
	T_FC_ARENA_TEAM_READY = MakeMessageType(FC_ARENA, FC_ARENA_TEAM_READY),
	T_FC_ARENA_TEAM_READY_FINISH = MakeMessageType(FC_ARENA, FC_ARENA_TEAM_READY_FINISH),
	T_FC_ARENA_TEAM_READY_FINISH_CANCEL = MakeMessageType(FC_ARENA, FC_ARENA_TEAM_READY_FINISH_CANCEL),
	T_FC_ARENA_TEAM_MATCHING = MakeMessageType(FC_ARENA, FC_ARENA_TEAM_MATCHING),
	T_FC_ARENA_ENTER_ROOM = MakeMessageType(FC_ARENA, FC_ARENA_ENTER_ROOM),
	T_FC_ARENA_ENTER_ROOM_WARP = MakeMessageType(FC_ARENA, FC_ARENA_ENTER_ROOM_WARP),
	T_FC_ARENA_ROOM_WAR_START = MakeMessageType(FC_ARENA, FC_ARENA_ROOM_WAR_START),
	T_FC_ARENA_ROOM_WAR_INFO = MakeMessageType(FC_ARENA, FC_ARENA_ROOM_WAR_INFO),
	T_FC_ARENA_ROOM_WAR_FINISH_HEADER = MakeMessageType(FC_ARENA, FC_ARENA_ROOM_WAR_FINISH_HEADER),
	T_FC_ARENA_ROOM_WAR_FINISH = MakeMessageType(FC_ARENA, FC_ARENA_ROOM_WAR_FINISH),
	T_FC_ARENA_ROOM_WAR_FINISH_DONE = MakeMessageType(FC_ARENA, FC_ARENA_ROOM_WAR_FINISH_DONE),
	T_FC_ARENA_ROOM_WAR_FINISH_DRAW = MakeMessageType(FC_ARENA, FC_ARENA_ROOM_WAR_FINISH_DRAW),
	T_FC_ARENA_FINISH_WARP = MakeMessageType(FC_ARENA, FC_ARENA_FINISH_WARP),
	T_FC_ARENA_FINISH_WARP_OK = MakeMessageType(FC_ARENA, FC_ARENA_FINISH_WARP_OK),
	T_FC_ARENA_REQUEST_CREATE_TEAMINFO = MakeMessageType(FC_ARENA, FC_ARENA_REQUEST_CREATE_TEAMINFO),
	T_FC_ARENA_REQUEST_CREATE_TEAMINFO_OK = MakeMessageType(FC_ARENA, FC_ARENA_REQUEST_CREATE_TEAMINFO_OK),
	T_FC_ARENA_BEFORE_ROOM_WAR_FINISH = MakeMessageType(FC_ARENA, FC_ARENA_BEFORE_ROOM_WAR_FINISH),
	T_FC_ARENA_REQUEST_OTHER_TEAM_INFO = MakeMessageType(FC_ARENA, FC_ARENA_REQUEST_OTHER_TEAM_INFO),
	T_FC_ARENA_REQUEST_OTHER_TEAM_INFO_OK = MakeMessageType(FC_ARENA, FC_ARENA_REQUEST_OTHER_TEAM_INFO_OK),
	T_FC_ARENA_GM_COMMAND_INFO_HEADER = MakeMessageType(FC_ARENA, FC_ARENA_GM_COMMAND_INFO_HEADER),
	T_FC_ARENA_GM_COMMAND_INFO = MakeMessageType(FC_ARENA, FC_ARENA_GM_COMMAND_INFO),
	T_FC_ARENA_GM_COMMAND_INFO_DONE = MakeMessageType(FC_ARENA, FC_ARENA_GM_COMMAND_INFO_DONE),
	T_FC_ARENA_QUICK_ENTER_TEAM = MakeMessageType(FC_ARENA, FC_ARENA_QUICK_ENTER_TEAM),
	T_FC_ARENA_WATCH_READY = MakeMessageType(FC_ARENA, FC_ARENA_WATCH_READY),
	T_FC_ARENA_WATCH_START = MakeMessageType(FC_ARENA, FC_ARENA_WATCH_START),
	T_FC_ARENA_WATCH_END = MakeMessageType(FC_ARENA, FC_ARENA_WATCH_END),
	T_FC_ARENA_WATCH_REMOVE_USER = MakeMessageType(FC_ARENA, FC_ARENA_WATCH_REMOVE_USER),
	T_FC_ARENA_POSSIBLE_GAMESTART = MakeMessageType(FC_ARENA, FC_ARENA_POSSIBLE_GAMESTART),
	T_FC_ARENA_CHARACTER_GAMESTART = MakeMessageType(FC_ARENA, FC_ARENA_CHARACTER_GAMESTART),
	T_FC_ARENA_USE_CITYWARPITEM = MakeMessageType(FC_ARENA, FC_ARENA_USE_CITYWARPITEM),
	T_FC_ARENA_PLAY_CHARACTER_TYPE = MakeMessageType(FC_ARENA, FC_ARENA_PLAY_CHARACTER_TYPE),
	T_FC_TUTORIAL_START = MakeMessageType(FC_TUTORIAL, FC_TUTORIAL_START),
	T_FC_TUTORIAL_START_OK = MakeMessageType(FC_TUTORIAL, FC_TUTORIAL_START_OK),
	T_FC_TUTORIAL_COMPLETE = MakeMessageType(FC_TUTORIAL, FC_TUTORIAL_COMPLETE),
	T_FC_TUTORIAL_COMPLETE_OK = MakeMessageType(FC_TUTORIAL, FC_TUTORIAL_COMPLETE_OK),
	T_FC_TUTORIAL_END = MakeMessageType(FC_TUTORIAL, FC_TUTORIAL_END),
	T_FC_TUTORIAL_END_OK = MakeMessageType(FC_TUTORIAL, FC_TUTORIAL_END_OK),
	T_FC_TUTORIAL_WARP = MakeMessageType(FC_TUTORIAL, FC_TUTORIAL_WARP),
	T_FC_OUTPOST_WAR_BEFORE = MakeMessageType(FC_OUTPOST, FC_OUTPOST_WAR_BEFORE),
	T_FC_OUTPOST_WAR_START = MakeMessageType(FC_OUTPOST, FC_OUTPOST_WAR_START),
	T_FC_OUTPOST_PROTECTOR_DESTROY = MakeMessageType(FC_OUTPOST, FC_OUTPOST_PROTECTOR_DESTROY),
	T_FC_OUTPOST_RESET_START = MakeMessageType(FC_OUTPOST, FC_OUTPOST_RESET_START),
	T_FC_OUTPOST_RESET_START_OK = MakeMessageType(FC_OUTPOST, FC_OUTPOST_RESET_START_OK),
	T_FC_OUTPOST_RESET_DESTROY = MakeMessageType(FC_OUTPOST, FC_OUTPOST_RESET_DESTROY),
	T_FC_OUTPOST_RESET_SUCCESS = MakeMessageType(FC_OUTPOST, FC_OUTPOST_RESET_SUCCESS),
	T_FC_OUTPOST_WAR_END = MakeMessageType(FC_OUTPOST, FC_OUTPOST_WAR_END),
	T_FC_OUTPOST_NEXTWAR_INFO_REQUEST = MakeMessageType(FC_OUTPOST, FC_OUTPOST_NEXTWAR_INFO_REQUEST),
	T_FC_OUTPOST_NEXTWAR_INFO_REQUEST_OK = MakeMessageType(FC_OUTPOST, FC_OUTPOST_NEXTWAR_INFO_REQUEST_OK),
	T_FC_OUTPOST_NEXTWAR_SET_TIME = MakeMessageType(FC_OUTPOST, FC_OUTPOST_NEXTWAR_SET_TIME),
	T_FC_OUTPOST_NEXTWAR_SET_TIME_OK = MakeMessageType(FC_OUTPOST, FC_OUTPOST_NEXTWAR_SET_TIME_OK),
	T_FC_OUTPOST_WAR_INFO = MakeMessageType(FC_OUTPOST, FC_OUTPOST_WAR_INFO),
	T_FC_INFINITY_MODE_LIST = MakeMessageType(FC_INFINITY, FC_INFINITY_MODE_LIST),
	T_FC_INFINITY_MODE_LIST_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_MODE_LIST_OK),
	T_FC_INFINITY_READY_LIST = MakeMessageType(FC_INFINITY, FC_INFINITY_READY_LIST),
	T_FC_INFINITY_READY_LIST_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_READY_LIST_OK),
	T_FC_INFINITY_CREATE = MakeMessageType(FC_INFINITY, FC_INFINITY_CREATE),
	T_FC_INFINITY_CREATE_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_CREATE_OK),
	T_FC_INFINITY_JOIN = MakeMessageType(FC_INFINITY, FC_INFINITY_JOIN),
	T_FC_INFINITY_JOIN_REQUEST_MASTERUSER = MakeMessageType(FC_INFINITY, FC_INFINITY_JOIN_REQUEST_MASTERUSER),
	T_FC_INFINITY_JOIN_REQUEST_MASTERUSER_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_JOIN_REQUEST_MASTERUSER_OK),
	T_FC_INFINITY_JOIN_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_JOIN_OK),
	T_FC_INFINITY_MEMBER_INFO_LIST = MakeMessageType(FC_INFINITY, FC_INFINITY_MEMBER_INFO_LIST),
	T_FC_INFINITY_MEMBER_INFO_LIST_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_MEMBER_INFO_LIST_OK),
	T_FC_INFINITY_CHANGE_MASTER = MakeMessageType(FC_INFINITY, FC_INFINITY_CHANGE_MASTER),
	T_FC_INFINITY_CHANGE_MASTER_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_CHANGE_MASTER_OK),
	T_FC_INFINITY_LEAVE = MakeMessageType(FC_INFINITY, FC_INFINITY_LEAVE),
	T_FC_INFINITY_LEAVE_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_LEAVE_OK),
	T_FC_INFINITY_BAN = MakeMessageType(FC_INFINITY, FC_INFINITY_BAN),
	T_FC_INFINITY_BAN_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_BAN_OK),
	T_FC_INFINITY_READY = MakeMessageType(FC_INFINITY, FC_INFINITY_READY),
	T_FC_INFINITY_READY_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_READY_OK),
	T_FC_INFINITY_READY_CANCEL = MakeMessageType(FC_INFINITY, FC_INFINITY_READY_CANCEL),
	T_FC_INFINITY_READY_CANCEL_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_READY_CANCEL_OK),
	T_FC_INFINITY_START = MakeMessageType(FC_INFINITY, FC_INFINITY_START),
	T_FC_INFINITY_MAP_LOADING = MakeMessageType(FC_INFINITY, FC_INFINITY_MAP_LOADING),
	T_FC_INFINITY_MAP_LOADED = MakeMessageType(FC_INFINITY, FC_INFINITY_MAP_LOADED),
	T_FC_INFINITY_ENTER = MakeMessageType(FC_INFINITY, FC_INFINITY_ENTER),
	T_FC_INFINITY_CINEMA = MakeMessageType(FC_INFINITY, FC_INFINITY_CINEMA),
	T_FC_INFINITY_SUCCESS_FIN = MakeMessageType(FC_INFINITY, FC_INFINITY_SUCCESS_FIN),
	T_FC_INFINITY_FAIL_FIN = MakeMessageType(FC_INFINITY, FC_INFINITY_FAIL_FIN),
	T_FC_INFINITY_FIN_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_FIN_OK),
	T_FC_INFINITY_READY_FINISH_MAINSVR_START = MakeMessageType(FC_INFINITY, FC_INFINITY_READY_FINISH_MAINSVR_START),
	T_FC_INFINITY_TENDER_DROPITEM_INFO = MakeMessageType(FC_INFINITY, FC_INFINITY_TENDER_DROPITEM_INFO),
	T_FC_INFINITY_TENDER_START = MakeMessageType(FC_INFINITY, FC_INFINITY_TENDER_START),
	T_FC_INFINITY_TENDER_PUT_IN_TENDER = MakeMessageType(FC_INFINITY, FC_INFINITY_TENDER_PUT_IN_TENDER),
	T_FC_INFINITY_TENDER_PUT_IN_TENDER_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_TENDER_PUT_IN_TENDER_OK),
	T_FC_INFINITY_TENDER_RESULT = MakeMessageType(FC_INFINITY, FC_INFINITY_TENDER_RESULT),
	T_FC_INFINITY_TENDER_RESULT_TIMEOVER = MakeMessageType(FC_INFINITY, FC_INFINITY_TENDER_TIMEOVER),
	T_FC_INFINITY_TENDER_RESULT_ALLGIVEUP = MakeMessageType(FC_INFINITY, FC_INFINITY_TENDER_ALLGIVEUP),
	T_FC_INFINITY_CHANGE_LIMITTIME = MakeMessageType(FC_INFINITY, FC_INFINITY_CHANGE_LIMITTIME),
	T_FC_INFINITY_JOIN_CANCEL = MakeMessageType(FC_INFINITY, FC_INFINITY_JOIN_CANCEL),
	T_FC_INFINITY_JOIN_CANCEL_REQUEST_MASTERUSER = MakeMessageType(FC_INFINITY, FC_INFINITY_JOIN_CANCEL_REQUEST_MASTERUSER),
	T_FC_INFINITY_REQUEST_RESTART_BY_DISCONNECT = MakeMessageType(FC_INFINITY, FC_INFINITY_REQUEST_RESTART_BY_DISCONNECT),
	T_FC_INFINITY_RESTART_BY_DISCONNECT = MakeMessageType(FC_INFINITY, FC_INFINITY_RESTART_BY_DISCONNECT),
	T_FC_INFINITY_MAP_LOADED_RESTART_BY_DISCONNECT = MakeMessageType(FC_INFINITY, FC_INFINITY_MAP_LOADED_RESTART_BY_DISCONNECT),
	T_FC_INFINITY_DELETED_CINEMA_HEADER = MakeMessageType(FC_INFINITY, FC_INFINITY_DELETED_CINEMA_HEADER),
	T_FC_INFINITY_DELETED_CINEMA = MakeMessageType(FC_INFINITY, FC_INFINITY_DELETED_CINEMA),
	T_FC_INFINITY_DELETED_CINEMA_DONE = MakeMessageType(FC_INFINITY, FC_INFINITY_DELETED_CINEMA_DONE),
	T_FC_INFINITY_ENTER_BY_DISCONNECT = MakeMessageType(FC_INFINITY, FC_INFINITY_ENTER_BY_DISCONNECT),
	T_FC_INFINITY_CHANGE_ALIVE_FOR_GAMECLEAR_MONSTERHP = MakeMessageType(FC_INFINITY, FC_INFINITY_CHANGE_ALIVE_FOR_GAMECLEAR_MONSTERHP),
	T_FC_INFINITY_DIFFICULTY_LIST_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_DIFFICULTY_LIST_OK),
	T_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL = MakeMessageType(FC_INFINITY, FC_INFINITY_CHANGE_DIFFICULTY_LEVEL),
	T_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_CHANGE_DIFFICULTY_LEVEL_OK),
	T_FC_INFINITY_READY_CANCEL_ALL_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_READY_CANCEL_ALL_OK),
	T_FC_INFINITY_SKIP_ENDING_CINEMA = MakeMessageType(FC_INFINITY, FC_INFINITY_SKIP_ENDING_CINEMA),
	T_FC_INFINITY_SKIP_ENDING_CINEMA_OK = MakeMessageType(FC_INFINITY, FC_INFINITY_SKIP_ENDING_CINEMA_OK),
	T_FC_INFINITY_MOVIE = MakeMessageType(FC_INFINITY, FC_INFINITY_MOVIE),
	T_FC_INFINITY_SET_LIMITTIME = MakeMessageType(FC_INFINITY, FC_INFINITY_SET_LIMITTIME),
	T_FI_ADMIN_GET_CHARACTER_INFO = MakeMessageType(FI_ADMIN, FI_ADMIN_GET_CHARACTER_INFO),
	T_FI_ADMIN_GET_CHARACTER_INFO_OK = MakeMessageType(FI_ADMIN, FI_ADMIN_GET_CHARACTER_INFO_OK),
	T_FI_ADMIN_CALL_CHARACTER = MakeMessageType(FI_ADMIN, FI_ADMIN_CALL_CHARACTER),
	T_FI_ADMIN_MOVETO_CHARACTER = MakeMessageType(FI_ADMIN, FI_ADMIN_MOVETO_CHARACTER),
	T_FI_ADMIN_PRINT_DEBUG_MSG = MakeMessageType(FI_ADMIN, FI_ADMIN_PRINT_DEBUG_MSG),
	T_FI_ADMIN_CHANGE_WEATHER = MakeMessageType(FI_ADMIN, FI_ADMIN_CHANGE_WEATHER),
	T_FI_CHARACTER_DELETE_CHARACTER = MakeMessageType(FI_CHARACTER, FI_CHARACTER_DELETE_CHARACTER),
	T_FI_CHARACTER_CHANGE_LEVEL = MakeMessageType(FI_CHARACTER, FI_CHARACTER_CHANGE_LEVEL),
	T_FI_CHARACTER_UPDATE_GUILD_INFO = MakeMessageType(FI_CHARACTER, FI_CHARACTER_UPDATE_GUILD_INFO),
	T_FI_CHARACTER_UPDATE_MAP_CHANNEL = MakeMessageType(FI_CHARACTER, FI_CHARACTER_UPDATE_MAP_CHANNEL),
	T_FI_CHARACTER_CHANGE_INFLUENCE_TYPE = MakeMessageType(FI_CHARACTER, FI_CHARACTER_CHANGE_INFLUENCE_TYPE),
	T_FI_UPDATE_SUBLEADER = MakeMessageType(FI_CHARACTER, FI_UPDATE_SUBLEADER),
	T_FI_CREATE_GUILD_BY_SUBLEADER = MakeMessageType(FI_CHARACTER, FI_CREATE_GUILD_BY_SUBLEADER),
	T_FI_CHAT_MAP = MakeMessageType(FI_CHAT, FI_CHAT_MAP),
	T_FI_CHAT_REGION = MakeMessageType(FI_CHAT, FI_CHAT_REGION),
	T_FI_CHAT_CHANGE_CHAT_FLAG = MakeMessageType(FI_CHAT, FI_CHAT_CHANGE_CHAT_FLAG),
	T_FI_CHAT_CASH_ALL = MakeMessageType(FI_CHAT, FI_CHAT_CASH_ALL),
	T_FI_CHAT_ARENA = MakeMessageType(FI_CHAT, FI_CHAT_ARENA),
	T_FI_CHAT_OUTPOST_GUILD = MakeMessageType(FI_CHAT, FI_CHAT_OUTPOST_GUILD),
	T_FI_CHAT_INFINITY = MakeMessageType(FI_CHAT, FI_CHAT_INFINITY),
	T_FI_CHAT_CNC = MakeMessageType(FI_CHAT, FI_CHAT_CNC),
	T_FI_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT_OK = MakeMessageType(FI_CHAT, FI_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT_OK),
	T_IC_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT = MakeMessageType(FI_CHAT, IC_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT),
	T_FI_EVENT_NOTIFY_WARP = MakeMessageType(FI_EVENT, FI_EVENT_NOTIFY_WARP),
	T_FI_EVENT_CHAT_BLOCK = MakeMessageType(FI_EVENT, FI_EVENT_CHAT_BLOCK),
	T_FI_GUILD_NOTIFY_START_WAR = MakeMessageType(FI_GUILD, FI_GUILD_NOTIFY_START_WAR),
	T_FI_GUILD_NOTIFY_END_WAR = MakeMessageType(FI_GUILD, FI_GUILD_NOTIFY_END_WAR),
	T_FI_GUILD_DELETE_GUILD = MakeMessageType(FI_GUILD, FI_GUILD_DELETE_GUILD),
	T_FI_GUILD_RANK_OK = MakeMessageType(FI_GUILD, FI_GUILD_RANK_OK),
	T_FI_GUILD_DELETE_INFO_OK = MakeMessageType(FI_GUILD, FI_GUILD_DELETE_INFO_OK),
	T_FI_GUILD_ADD_GUILD_FAME = MakeMessageType(FI_GUILD, FI_GUILD_ADD_GUILD_FAME),
	T_FI_GUILD_REG_DELETE_GUILD = MakeMessageType(FI_GUILD, FI_GUILD_REG_DELETE_GUILD),
	T_FI_GUILD_DISMEMBER = MakeMessageType(FI_GUILD, FI_GUILD_DISMEMBER),
	T_FI_GUILD_OUTPOST = MakeMessageType(FI_GUILD, FI_GUILD_OUTPOST),
	T_FI_GUILD_BONUS_EXP_RATE = MakeMessageType(FI_GUILD, FI_GUILD_BONUS_EXP_RATE),
	T_FI_PARTY_CREATE_OK = MakeMessageType(FI_PARTY, FI_PARTY_CREATE_OK),
	T_FI_PARTY_ACCEPT_INVITE_OK = MakeMessageType(FI_PARTY, FI_PARTY_ACCEPT_INVITE_OK),
	T_FI_PARTY_BAN_MEMBER_OK = MakeMessageType(FI_PARTY, FI_PARTY_BAN_MEMBER_OK),
	T_FI_PARTY_LEAVE_OK = MakeMessageType(FI_PARTY, FI_PARTY_LEAVE_OK),
	T_FI_PARTY_TRANSFER_MASTER_OK = MakeMessageType(FI_PARTY, FI_PARTY_TRANSFER_MASTER_OK),
	T_FI_PARTY_DISMEMBER_OK = MakeMessageType(FI_PARTY, FI_PARTY_DISMEMBER_OK),
	T_FI_PARTY_CHANGE_FLIGHT_FORMATION_OK = MakeMessageType(FI_PARTY, FI_PARTY_CHANGE_FLIGHT_FORMATION_OK),
	T_FI_PARTY_CHANGE_FLIGHT_POSITION = MakeMessageType(FI_PARTY, FI_PARTY_CHANGE_FLIGHT_POSITION),
	T_FI_PARTY_CANCEL_FLIGHT_POSITION = MakeMessageType(FI_PARTY, FI_PARTY_CANCEL_FLIGHT_POSITION),
	T_FI_PARTY_NOTIFY_BATTLE_PARTY = MakeMessageType(FI_PARTY, FI_PARTY_NOTIFY_BATTLE_PARTY),
	T_FI_PARTY_NOTIFY_BATTLE_PARTY_OK = MakeMessageType(FI_PARTY, FI_PARTY_NOTIFY_BATTLE_PARTY_OK),
	T_FI_PARTY_ADD_MEMBER = MakeMessageType(FI_PARTY, FI_PARTY_ADD_MEMBER),
	T_FI_PARTY_DELETE_MEMBER = MakeMessageType(FI_PARTY, FI_PARTY_DELETE_MEMBER),
	T_FI_PARTY_UPDATE_ITEM_POS = MakeMessageType(FI_PARTY, FI_PARTY_UPDATE_ITEM_POS),
	T_FI_PARTY_ALL_FLIGHT_POSITION = MakeMessageType(FI_PARTY, FI_PARTY_ALL_FLIGHT_POSITION),
	T_FI_PARTY_UPDATE_PARTY_INFO = MakeMessageType(FI_PARTY, FI_PARTY_UPDATE_PARTY_INFO),
	T_FI_PARTY_CHANGE_EXP_DISTRIBUTE_TYPE = MakeMessageType(FI_PARTY, FI_PARTY_CHANGE_EXP_DISTRIBUTE_TYPE),
	T_FI_PARTY_CHANGE_ITEM_DISTRIBUTE_TYPE = MakeMessageType(FI_PARTY, FI_PARTY_CHANGE_ITEM_DISTRIBUTE_TYPE),
	T_FI_PARTY_CHANGE_FORMATION_SKILL = MakeMessageType(FI_PARTY, FI_PARTY_CHANGE_FORMATION_SKILL),
	T_FI_PARTY_AUTO_CREATE = MakeMessageType(FI_PARTY, FI_PARTY_AUTO_CREATE),
	T_FI_PARTY_AUTO_CREATE_OK = MakeMessageType(FI_PARTY, FI_PARTY_AUTO_CREATE_OK),
	T_FI_PARTY_DISCONNECT_LEAVE_OK = MakeMessageType(FI_PARTY, FI_PARTY_DISCONNECT_LEAVE_OK),
	T_FI_PARTY_UPDATE_ITEM_TRANSFORMER_OK = MakeMessageType(FI_PARTY, FI_PARTY_UPDATE_ITEM_TRANSFORMER_OK),
	T_FI_PARTY_ARENA_TEAM_NUM = MakeMessageType(FI_PARTY, FI_PARTY_ARENA_TEAM_NUM),
	T_FI_CASH_USING_GUILD = MakeMessageType(FI_CASH, FI_CASH_USING_GUILD),
	T_FI_CASH_USING_CHANGE_CHARACTERNAME = MakeMessageType(FI_CASH, FI_CASH_USING_CHANGE_CHARACTERNAME),
	T_FI_CASH_PREMIUM_CARD_INFO = MakeMessageType(FI_CASH, FI_CASH_PREMIUM_CARD_INFO),
	T_FI_INFO_DECLARATION_MSWAR_SET_OK = MakeMessageType(FI_INFO, FI_INFO_DECLARATION_MSWAR_SET_OK),
	T_FN_BATTLE_ATTACK_PRIMARY = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_PRIMARY),
	T_FN_BATTLE_ATTACK_RESULT_PRIMARY = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_RESULT_PRIMARY),
	T_FN_BATTLE_ATTACK_SECONDARY = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_SECONDARY),
	T_FN_BATTLE_ATTACK_RESULT_SECONDARY = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_RESULT_SECONDARY),
	T_FN_BATTLE_ATTACK_FIND = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_FIND),
	T_FN_BATTLE_ATTACK_FIND_RESULT = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_FIND_RESULT),
	T_FN_BATTLE_SET_ATTACK_CHARACTER = MakeMessageType(FN_BATTLE, FN_BATTLE_SET_ATTACK_CHARACTER),
	T_FN_BATTLE_DROP_FIXER = MakeMessageType(FN_BATTLE, FN_BATTLE_DROP_FIXER),
	T_FN_BATTLE_DROP_FIXER_OK = MakeMessageType(FN_BATTLE, FN_BATTLE_DROP_FIXER_OK),
	T_FN_BATTLE_ATTACK_HIDE_ITEM_W_KIND = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_HIDE_ITEM_W_KIND),
	T_FN_BATTLE_ATTACK_SKILL = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_SKILL),
	T_FN_BATTLE_ATTACK_SKILL_CANCEL = MakeMessageType(FN_BATTLE, FN_BATTLE_ATTACK_SKILL_CANCEL),
	T_FN_CHARACTER_CHANGE_UNITKIND = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_UNITKIND),
	T_FN_CHARACTER_CHANGE_BODYCONDITION = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_BODYCONDITION),
	T_FN_CHARACTER_CHANGE_HPDPSPEP = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_HPDPSPEP),
	T_FN_CHARACTER_CHANGE_CURRENTHPDPSPEP = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_CURRENTHPDPSPEP),
	T_FN_CHARACTER_CHANGE_MAPNAME = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_MAPNAME),
	T_FN_CHARACTER_CHANGE_POSITION = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_POSITION),
	T_FN_CHARACTER_CHANGE_STEALTHSTATE = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_STEALTHSTATE),
	T_FN_CHARACTER_CHANGE_CHARACTER_MODE_OK = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_CHARACTER_MODE_OK),
	T_FN_CHARACTER_CHANGE_INFLUENCE_TYPE = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_INFLUENCE_TYPE),
	T_FN_CHARACTER_CHANGE_INVISIBLE = MakeMessageType(FN_CHARACTER, FN_CHARACTER_CHANGE_INVISIBLE),
	T_FN_EVENT_WARP = MakeMessageType(FN_EVENT, FN_EVENT_WARP),
	T_FN_EVENT_OTHER_WARPED = MakeMessageType(FN_EVENT, FN_EVENT_OTHER_WARPED),
	T_FN_EVENT_WARP_CONNECT_OK = MakeMessageType(FN_EVENT, FN_EVENT_WARP_CONNECT_OK),
	T_FN_MAPPROJECT_START = MakeMessageType(FN_MONSTER, FN_MAPPROJECT_START),
	T_FN_MAPPROJECT_START_OK = MakeMessageType(FN_MONSTER, FN_MAPPROJECT_START_OK),
	T_FN_MAPPROJECT_START_OK_ACK = MakeMessageType(FN_MONSTER, FN_MAPPROJECT_START_OK_ACK),
	T_FN_MONSTER_CREATE = MakeMessageType(FN_MONSTER, FN_MONSTER_CREATE),
	T_FN_MONSTER_CREATE_OK = MakeMessageType(FN_MONSTER, FN_MONSTER_CREATE_OK),
	T_FN_MONSTER_DELETE = MakeMessageType(FN_MONSTER, FN_MONSTER_DELETE),
	T_FN_CLIENT_GAMESTART_OK = MakeMessageType(FN_MONSTER, FN_CLIENT_GAMESTART_OK),
	T_FN_CLIENT_GAMEEND_OK = MakeMessageType(FN_MONSTER, FN_CLIENT_GAMEEND_OK),
	T_FN_GET_CHARACTER_INFO = MakeMessageType(FN_MONSTER, FN_GET_CHARACTER_INFO),
	T_FN_GET_CHARACTER_INFO_OK = MakeMessageType(FN_MONSTER, FN_GET_CHARACTER_INFO_OK),
	T_FN_ADMIN_SUMMON_MONSTER = MakeMessageType(FN_MONSTER, FN_ADMIN_SUMMON_MONSTER),
	T_FN_MONSTER_CHANGE_HP = MakeMessageType(FN_MONSTER, FN_MONSTER_CHANGE_HP),
	T_FN_MONSTER_CHANGE_BODYCONDITION = MakeMessageType(FN_MONSTER, FN_MONSTER_CHANGE_BODYCONDITION),
	T_FN_MONSTER_SKILL_USE_SKILL = MakeMessageType(FN_MONSTER, FN_MONSTER_SKILL_USE_SKILL),
	T_FN_MONSTER_SKILL_END_SKILL = MakeMessageType(FN_MONSTER, FN_MONSTER_SKILL_END_SKILL),
	T_FN_MONSTER_AUTO_DESTROYED = MakeMessageType(FN_MONSTER, FN_MONSTER_AUTO_DESTROYED),
	T_FN_MONSTER_STRATEGYPOINT_INIT = MakeMessageType(FN_MONSTER, FN_MONSTER_STRATEGYPOINT_INIT),
	T_FN_MONSTER_STRATEGYPOINT_SUMMON = MakeMessageType(FN_MONSTER, FN_MONSTER_STRATEGYPOINT_SUMMON),
	T_FN_MONSTER_OUTPOST_INIT = MakeMessageType(FN_MONSTER, FN_MONSTER_OUTPOST_INIT),
	T_FN_MONSTER_OUTPOST_RESET_SUMMON = MakeMessageType(FN_MONSTER, FN_MONSTER_OUTPOST_RESET_SUMMON),
	T_FN_MONSTER_CREATE_IN_MAPCHANNEL_BYVALUE = MakeMessageType(FN_MONSTER, FN_MONSTER_CREATE_IN_MAPCHANNEL_BYVALUE),
	T_FN_MONSTER_TELEPORT_SUMMON = MakeMessageType(FN_MONSTER, FN_MONSTER_TELEPORT_SUMMON),
	T_FN_MONSTER_HPTALK = MakeMessageType(FN_MONSTER, FN_MONSTER_HPTALK),
	T_FN_MONSTER_CHANGE_OK = MakeMessageType(FN_MONSTER, FN_MONSTER_CHANGE_OK),
	T_FN_MONSTER_MOVE = MakeMessageType(FN_MOVE, FN_MONSTER_MOVE),
	T_FN_MOVE_OK = MakeMessageType(FN_MOVE, FN_MOVE_OK),
	T_FN_MOVE_LOCKON = MakeMessageType(FN_MOVE, FN_MOVE_LOCKON),
	T_FN_MOVE_LOCKON_OK = MakeMessageType(FN_MOVE, FN_MOVE_LOCKON_OK),
	T_FN_MOVE_LOCKON_AVOID = MakeMessageType(FN_MOVE, FN_MOVE_LOCKON_AVOID),
	T_FN_MOVE_LOCKON_AVOID_OK = MakeMessageType(FN_MOVE, FN_MOVE_LOCKON_AVOID_OK),
	T_FN_MISSILE_MOVE = MakeMessageType(FN_MOVE, FN_MISSILE_MOVE),
	T_FN_MONSTER_HPRECOVERY = MakeMessageType(FN_MOVE, FN_MONSTER_HPRECOVERY),
	T_FN_MONSTER_HIDE = MakeMessageType(FN_MOVE, FN_MONSTER_HIDE),
	T_FN_MONSTER_SHOW = MakeMessageType(FN_MOVE, FN_MONSTER_SHOW),
	T_FN_SKILL_USE_SKILL = MakeMessageType(FN_SKILL, FN_SKILL_USE_SKILL),
	T_FN_SKILL_USE_SKILL_OK = MakeMessageType(FN_SKILL, FN_SKILL_USE_SKILL_OK),
	T_FN_CITYWAR_START_WAR = MakeMessageType(FN_CITYWAR, FN_CITYWAR_START_WAR),
	T_FN_CITYWAR_END_WAR = MakeMessageType(FN_CITYWAR, FN_CITYWAR_END_WAR),
	T_FN_CITYWAR_CHANGE_OCCUPY_INFO = MakeMessageType(FN_CITYWAR, FN_CITYWAR_CHANGE_OCCUPY_INFO),
	T_FN_NPCSERVER_START = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_START),
	T_FN_NPCSERVER_START_OK = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_START_OK),
	T_FN_NPCSERVER_SUMMON_JACO_MONSTER = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_SUMMON_JACO_MONSTER),
	T_FN_NPCSERVER_DELETE_MONSTER_IN_MAPCHANNEL = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_DELETE_MONSTER_IN_MAPCHANNEL),
	T_FN_NPCSERVER_CINEMA_MONSTER_CREATE = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_CINEMA_MONSTER_CREATE),
	T_FN_NPCSERVER_NEW_CHANGE_OBJECT = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_NEW_CHANGE_OBJECT),
	T_FN_NPCSERVER_RESET_CHANGE_OBJECT = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_RESET_CHANGE_OBJECT),
	T_FN_NPCSERVER_CINEMA_MONSTER_DESTROY = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_CINEMA_MONSTER_DESTROY),
	T_FN_NPCSERVER_CINEMA_MONSTER_CHANGE = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_CINEMA_MONSTER_CHANGE),
	T_FN_NPCSERVER_CINEMA_MONSTER_REGEN = MakeMessageType(FN_NPCSERVER, FN_NPCSERVER_CINEMA_MONSTER_REGEN),
	T_FP_EVENT_ENTER_SELECT_SCREEN = MakeMessageType(FP_EVENT, FP_EVENT_ENTER_SELECT_SCREEN),
	T_FP_EVENT_GAME_STARTED = MakeMessageType(FP_EVENT, FP_EVENT_GAME_STARTED),
	T_FP_EVENT_MAP_CHANGED = MakeMessageType(FP_EVENT, FP_EVENT_MAP_CHANGED),
	T_FP_EVENT_RELOAD_HAPPYEV = MakeMessageType(FP_EVENT, FP_EVENT_RELOAD_HAPPYEV),
	T_FP_EVENT_RELOAD_ITEMEV = MakeMessageType(FP_EVENT, FP_EVENT_RELOAD_ITEMEV),
	T_FP_EVENT_UPDATE_PCBANGLIST = MakeMessageType(FP_EVENT, FP_EVENT_UPDATE_PCBANGLIST),
	T_FP_EVENT_UPDATE_STRATEGYPOINT_NOTSUMMONTIM = MakeMessageType(FP_EVENT, FP_EVENT_UPDATE_STRATEGYPOINT_NOTSUMMONTIM),
	T_FP_MONITOR_RELOAD_VERSION_INFO_OK = MakeMessageType(FP_MONITOR, FP_MONITOR_RELOAD_VERSION_INFO_OK),
	T_FP_CASH_CHANGE_CHARACTERNAME = MakeMessageType(FP_CASH, FP_CASH_CHANGE_CHARACTERNAME),
	T_FP_ADMIN_BLOCKACCOUNT = MakeMessageType(FP_ADMIN, FP_ADMIN_BLOCKACCOUNT),
	T_FP_ADMIN_BLOCKACCOUNT_OK = MakeMessageType(FP_ADMIN, FP_ADMIN_BLOCKACCOUNT_OK),
	T_FP_ADMIN_UNBLOCKACCOUNT = MakeMessageType(FP_ADMIN, FP_ADMIN_UNBLOCKACCOUNT),
	T_FP_ADMIN_UNBLOCKACCOUNT_OK = MakeMessageType(FP_ADMIN, FP_ADMIN_UNBLOCKACCOUNT_OK),
	T_FP_ADMIN_STRATRGYPOINT_INFO_CHANGE = MakeMessageType(FP_ADMIN, FP_ADMIN_STRATRGYPOINT_INFO_CHANGE),
	T_FP_GLOG_CONNECT_USER_NEW = MakeMessageType(FP_GLOG, FP_GLOG_CONNECT_USER_NEW),
	T_FP_GLOG_CONNECT_USER_LOGIN = MakeMessageType(FP_GLOG, FP_GLOG_CONNECT_USER_LOGIN),
	T_IC_ADMIN_CALL_CHARACTER = MakeMessageType(IC_ADMIN, IC_ADMIN_CALL_CHARACTER),
	T_IC_ADMIN_GET_SERVER_STAT = MakeMessageType(IC_ADMIN, IC_ADMIN_GET_SERVER_STAT),
	T_IC_ADMIN_GET_SERVER_STAT_OK = MakeMessageType(IC_ADMIN, IC_ADMIN_GET_SERVER_STAT_OK),
	T_IC_ADMIN_CALL_GUILD = MakeMessageType(IC_ADMIN, IC_ADMIN_CALL_GUILD),
	T_IC_ADMIN_CALLGM_INFO_OK = MakeMessageType(IC_ADMIN, IC_ADMIN_CALLGM_INFO_OK),
	T_IC_ADMIN_CALLGM_VIEW_OK = MakeMessageType(IC_ADMIN, IC_ADMIN_CALLGM_VIEW_OK),
	T_IC_ADMIN_CALLGM_BRING_OK = MakeMessageType(IC_ADMIN, IC_ADMIN_CALLGM_BRING_OK),
	T_IC_CHAT_ALL = MakeMessageType(IC_CHAT, IC_CHAT_ALL),
	T_IC_CHAT_MAP = MakeMessageType(IC_CHAT, IC_CHAT_MAP),
	T_IC_CHAT_REGION = MakeMessageType(IC_CHAT, IC_CHAT_REGION),
	T_IC_CHAT_PTOP = MakeMessageType(IC_CHAT, IC_CHAT_PTOP),
	T_IC_CHAT_PARTY = MakeMessageType(IC_CHAT, IC_CHAT_PARTY),
	T_IC_CHAT_GUILD = MakeMessageType(IC_CHAT, IC_CHAT_GUILD),
	T_IC_CHAT_GET_GUILD = MakeMessageType(IC_CHAT, IC_CHAT_GET_GUILD),
	T_IC_CHAT_GET_GUILD_OK = MakeMessageType(IC_CHAT, IC_CHAT_GET_GUILD_OK),
	T_IC_CHAT_CHANGE_GUILD = MakeMessageType(IC_CHAT, IC_CHAT_CHANGE_GUILD),
	T_IC_CHAT_CHANGE_GUILD_OK = MakeMessageType(IC_CHAT, IC_CHAT_CHANGE_GUILD_OK),
	T_IC_CHAT_CHANGE_PARTY = MakeMessageType(IC_CHAT, IC_CHAT_CHANGE_PARTY),
	T_IC_CHAT_CHANGE_PARTY_OK = MakeMessageType(IC_CHAT, IC_CHAT_CHANGE_PARTY_OK),
	T_IC_CHAT_CHANGE_CHAT_FLAG = MakeMessageType(IC_CHAT, IC_CHAT_CHANGE_CHAT_FLAG),
	T_IC_CHAT_POSITION = MakeMessageType(IC_CHAT, IC_CHAT_POSITION),
	T_IC_CHAT_BLOCK = MakeMessageType(IC_CHAT, IC_CHAT_BLOCK),
	T_IC_CHAT_GET_BLOCK = MakeMessageType(IC_CHAT, IC_CHAT_GET_BLOCK),
	T_IC_CHAT_GET_BLOCK_OK = MakeMessageType(IC_CHAT, IC_CHAT_GET_BLOCK_OK),
	T_IC_CHAT_BLOCK_YOU = MakeMessageType(IC_CHAT, IC_CHAT_BLOCK_YOU),
	T_IC_CHAT_FRIENDLIST_AND_REJECTLIST_LOADING = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_AND_REJECTLIST_LOADING),
	T_IC_CHAT_FRIENDLIST_LOADING_OK = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_LOADING_OK),
	T_IC_CHAT_FRIENDLIST_INSERT = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_INSERT),
	T_IC_CHAT_FRIENDLIST_INSERT_OK = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_INSERT_OK),
	T_IC_CHAT_FRIENDLIST_DELETE = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_DELETE),
	T_IC_CHAT_FRIENDLIST_DELETE_OK = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_DELETE_OK),
	T_IC_CHAT_FRIENDLIST_REFRESH = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_REFRESH),
	T_IC_CHAT_FRIENDLIST_REFRESH_OK = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_REFRESH_OK),
	T_IC_CHAT_REJECTLIST_LOADING_OK = MakeMessageType(IC_CHAT, IC_CHAT_REJECTLIST_LOADING_OK),
	T_IC_CHAT_REJECTLIST_INSERT = MakeMessageType(IC_CHAT, IC_CHAT_REJECTLIST_INSERT),
	T_IC_CHAT_REJECTLIST_INSERT_OK = MakeMessageType(IC_CHAT, IC_CHAT_REJECTLIST_INSERT_OK),
	T_IC_CHAT_REJECTLIST_DELETE = MakeMessageType(IC_CHAT, IC_CHAT_REJECTLIST_DELETE),
	T_IC_CHAT_REJECTLIST_DELETE_OK = MakeMessageType(IC_CHAT, IC_CHAT_REJECTLIST_DELETE_OK),
	T_IC_CHAT_FRIENDLIST_INSERT_NOTIFY = MakeMessageType(IC_CHAT, IC_CHAT_FRIENDLIST_INSERT_NOTIFY),
	T_IC_CHAT_SELL_ALL = MakeMessageType(IC_CHAT, IC_CHAT_SELL_ALL),
	T_IC_CHAT_CASH_ALL = MakeMessageType(IC_CHAT, IC_CHAT_CASH_ALL),
	T_IC_CHAT_INFLUENCE_ALL = MakeMessageType(IC_CHAT, IC_CHAT_INFLUENCE_ALL),
	T_IC_CHAT_ARENA = MakeMessageType(IC_CHAT, IC_CHAT_ARENA),
	T_IC_CHAT_WAR = MakeMessageType(IC_CHAT, IC_CHAT_WAR),
	T_IC_CHAT_CHATROOM = MakeMessageType(IC_CHAT, IC_CHAT_CHATROOM),
	T_IC_CHAT_INFINITY = MakeMessageType(IC_CHAT, IC_CHAT_INFINITY),
	T_IC_CHAT_CNC = MakeMessageType(IC_CHAT, IC_CHAT_CNC),
	T_IC_GUILD_CREATE = MakeMessageType(IC_GUILD, IC_GUILD_CREATE),
	T_IC_GUILD_CREATE_OK = MakeMessageType(IC_GUILD, IC_GUILD_CREATE_OK),
	T_IC_GUILD_GET_GUILD_INFO = MakeMessageType(IC_GUILD, IC_GUILD_GET_GUILD_INFO),
	T_IC_GUILD_GET_GUILD_INFO_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_GUILD_INFO_OK),
	T_IC_GUILD_GET_OTHER_GUILD_INFO = MakeMessageType(IC_GUILD, IC_GUILD_GET_OTHER_GUILD_INFO),
	T_IC_GUILD_GET_OTHER_GUILD_INFO_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_OTHER_GUILD_INFO_OK),
	T_IC_GUILD_REQUEST_INVITE = MakeMessageType(IC_GUILD, IC_GUILD_REQUEST_INVITE),
	T_IC_GUILD_REQUEST_INVITE_QUESTION = MakeMessageType(IC_GUILD, IC_GUILD_REQUEST_INVITE_QUESTION),
	T_IC_GUILD_ACCEPT_INVITE = MakeMessageType(IC_GUILD, IC_GUILD_ACCEPT_INVITE),
	T_IC_GUILD_ACCEPT_INVITE_OK = MakeMessageType(IC_GUILD, IC_GUILD_ACCEPT_INVITE_OK),
	T_IC_GUILD_REJECT_INVITE = MakeMessageType(IC_GUILD, IC_GUILD_REJECT_INVITE),
	T_IC_GUILD_REJECT_INVITE_OK = MakeMessageType(IC_GUILD, IC_GUILD_REJECT_INVITE_OK),
	T_IC_GUILD_BAN_MEMBER = MakeMessageType(IC_GUILD, IC_GUILD_BAN_MEMBER),
	T_IC_GUILD_BAN_MEMBER_OK = MakeMessageType(IC_GUILD, IC_GUILD_BAN_MEMBER_OK),
	T_IC_GUILD_LEAVE = MakeMessageType(IC_GUILD, IC_GUILD_LEAVE),
	T_IC_GUILD_LEAVE_OK = MakeMessageType(IC_GUILD, IC_GUILD_LEAVE_OK),
	T_IC_GUILD_DISMEMBER_OK = MakeMessageType(IC_GUILD, IC_GUILD_DISMEMBER_OK),
	T_IC_GUILD_SET_MEMBER_STATE = MakeMessageType(IC_GUILD, IC_GUILD_SET_MEMBER_STATE),
	T_IC_GUILD_CANCEL_DISMEMBER = MakeMessageType(IC_GUILD, IC_GUILD_CANCEL_DISMEMBER),
	T_IC_GUILD_CANCEL_DISMEMBER_OK = MakeMessageType(IC_GUILD, IC_GUILD_CANCEL_DISMEMBER_OK),
	T_IC_GUILD_GET_DISMEMBER_DATE = MakeMessageType(IC_GUILD, IC_GUILD_GET_DISMEMBER_DATE),
	T_IC_GUILD_GET_DISMEMBER_DATE_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_DISMEMBER_DATE_OK),
	T_IC_GUILD_CHANGE_GUILD_NAME = MakeMessageType(IC_GUILD, IC_GUILD_CHANGE_GUILD_NAME),
	T_IC_GUILD_CHANGE_GUILD_NAME_OK = MakeMessageType(IC_GUILD, IC_GUILD_CHANGE_GUILD_NAME_OK),
	T_IC_GUILD_GET_GUILD_MARK = MakeMessageType(IC_GUILD, IC_GUILD_GET_GUILD_MARK),
	T_IC_GUILD_GET_GUILD_MARK_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_GUILD_MARK_OK),
	T_IC_GUILD_SET_GUILD_MARK = MakeMessageType(IC_GUILD, IC_GUILD_SET_GUILD_MARK),
	T_IC_GUILD_SET_GUILD_MARK_OK = MakeMessageType(IC_GUILD, IC_GUILD_SET_GUILD_MARK_OK),
	T_IC_GUILD_SET_RANK = MakeMessageType(IC_GUILD, IC_GUILD_SET_RANK),
	T_IC_GUILD_SET_RANK_OK = MakeMessageType(IC_GUILD, IC_GUILD_SET_RANK_OK),
	T_IC_GUILD_CHANGE_GUILD_STATE = MakeMessageType(IC_GUILD, IC_GUILD_CHANGE_GUILD_STATE),
	T_IC_GUILD_LOADING_GUILD_DONE = MakeMessageType(IC_GUILD, IC_GUILD_LOADING_GUILD_DONE),
	T_IC_GUILD_WAR_READY = MakeMessageType(IC_GUILD, IC_GUILD_WAR_READY),
	T_IC_GUILD_START_WAR = MakeMessageType(IC_GUILD, IC_GUILD_START_WAR),
	T_IC_GUILD_END_WAR = MakeMessageType(IC_GUILD, IC_GUILD_END_WAR),
	T_IC_GUILD_UPDATE_WAR_POINT = MakeMessageType(IC_GUILD, IC_GUILD_UPDATE_WAR_POINT),
	T_IC_GUILD_SURRENDER_GUILD_WAR = MakeMessageType(IC_GUILD, IC_GUILD_SURRENDER_GUILD_WAR),
	T_IC_GUILD_CHANGE_MEMBER_CAPACITY = MakeMessageType(IC_GUILD, IC_GUILD_CHANGE_MEMBER_CAPACITY),
	T_IC_GUILD_GET_GUILD_MEMBER_LIST_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_GUILD_MEMBER_LIST_OK),
	T_IC_GUILD_END_WAR_ADMIN_NOTIFY = MakeMessageType(IC_GUILD, IC_GUILD_END_WAR_ADMIN_NOTIFY),
	T_IC_GUILD_MEMBER_LEVEL_UP = MakeMessageType(IC_GUILD, IC_GUILD_MEMBER_LEVEL_UP),
	T_IC_GUILD_NEW_COMMANDER = MakeMessageType(IC_GUILD, IC_GUILD_NEW_COMMANDER),
	T_IC_GUILD_NOTICE_WRITE = MakeMessageType(IC_GUILD, IC_GUILD_NOTICE_WRITE),
	T_IC_GUILD_NOTICE_WRITE_OK = MakeMessageType(IC_GUILD, IC_GUILD_NOTICE_WRITE_OK),
	T_IC_GUILD_GET_APPLICANT = MakeMessageType(IC_GUILD, IC_GUILD_GET_APPLICANT),
	T_IC_GUILD_GET_APPLICANT_OK_HEADER = MakeMessageType(IC_GUILD, IC_GUILD_GET_APPLICANT_OK_HEADER),
	T_IC_GUILD_GET_APPLICANT_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_APPLICANT_OK),
	T_IC_GUILD_GET_APPLICANT_OK_DONE = MakeMessageType(IC_GUILD, IC_GUILD_GET_APPLICANT_OK_DONE),
	T_IC_GUILD_GET_INTRODUCTION = MakeMessageType(IC_GUILD, IC_GUILD_GET_INTRODUCTION),
	T_IC_GUILD_GET_INTRODUCTION_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_INTRODUCTION_OK),
	T_IC_GUILD_GET_SELF_INTRODUCTION = MakeMessageType(IC_GUILD, IC_GUILD_GET_SELF_INTRODUCTION),
	T_IC_GUILD_GET_SELF_INTRODUCTION_OK = MakeMessageType(IC_GUILD, IC_GUILD_GET_SELF_INTRODUCTION_OK),
	T_IC_GUILD_SEARCH_INTRODUCTION = MakeMessageType(IC_GUILD, IC_GUILD_SEARCH_INTRODUCTION),
	T_IC_GUILD_SEARCH_INTRODUCTION_OK_HEADER = MakeMessageType(IC_GUILD, IC_GUILD_SEARCH_INTRODUCTION_OK_HEADER),
	T_IC_GUILD_SEARCH_INTRODUCTION_OK = MakeMessageType(IC_GUILD, IC_GUILD_SEARCH_INTRODUCTION_OK),
	T_IC_GUILD_SEARCH_INTRODUCTION_OK_DONE = MakeMessageType(IC_GUILD, IC_GUILD_SEARCH_INTRODUCTION_OK_DONE),
	T_IC_GUILD_UPDATE_INTRODUCTION = MakeMessageType(IC_GUILD, IC_GUILD_UPDATE_INTRODUCTION),
	T_IC_GUILD_UPDATE_INTRODUCTION_OK = MakeMessageType(IC_GUILD, IC_GUILD_UPDATE_INTRODUCTION_OK),
	T_IC_GUILD_DELETE_INTRODUCTION = MakeMessageType(IC_GUILD, IC_GUILD_DELETE_INTRODUCTION),
	T_IC_GUILD_DELETE_INTRODUCTION_OK = MakeMessageType(IC_GUILD, IC_GUILD_DELETE_INTRODUCTION_OK),
	T_IC_GUILD_UPDATE_SELFINTRODUCTION = MakeMessageType(IC_GUILD, IC_GUILD_UPDATE_SELFINTRODUCTION),
	T_IC_GUILD_UPDATE_SELFINTRODUCTION_OK = MakeMessageType(IC_GUILD, IC_GUILD_UPDATE_SELFINTRODUCTION_OK),
	T_IC_GUILD_DELETE_SELFINTRODUCTION = MakeMessageType(IC_GUILD, IC_GUILD_DELETE_SELFINTRODUCTION),
	T_IC_GUILD_DELETE_SELFINTRODUCTION_OK = MakeMessageType(IC_GUILD, IC_GUILD_DELETE_SELFINTRODUCTION_OK),
	T_IC_GUILD_CHANGE_FAME_RANK = MakeMessageType(IC_GUILD, IC_GUILD_CHANGE_FAME_RANK),
	T_IC_GUILD_APPLICANT_INVITE = MakeMessageType(IC_GUILD, IC_GUILD_APPLICANT_INVITE),
	T_IC_GUILD_APPLICANT_INVITE_OK = MakeMessageType(IC_GUILD, IC_GUILD_APPLICANT_INVITE_OK),
	T_IC_GUILD_APPLICANT_REJECT_INVITE = MakeMessageType(IC_GUILD, IC_GUILD_APPLICANT_REJECT_INVITE),
	T_IC_GUILD_APPLICANT_REJECT_INVITE_OK = MakeMessageType(IC_GUILD, IC_GUILD_APPLICANT_REJECT_INVITE_OK),
	T_IC_GUILD_CHANGE_MEMBERSHIP = MakeMessageType(IC_GUILD, IC_GUILD_CHANGE_MEMBERSHIP),
	T_IC_PARTY_CREATE = MakeMessageType(IC_PARTY, IC_PARTY_CREATE),
	T_IC_PARTY_ACCEPT_INVITE_OK = MakeMessageType(IC_PARTY, IC_PARTY_ACCEPT_INVITE_OK),
	T_IC_PARTY_GET_MEMBER = MakeMessageType(IC_PARTY, IC_PARTY_GET_MEMBER),
	T_IC_PARTY_PUT_MEMBER = MakeMessageType(IC_PARTY, IC_PARTY_PUT_MEMBER),
	T_IC_PARTY_GET_ALL_MEMBER = MakeMessageType(IC_PARTY, IC_PARTY_GET_ALL_MEMBER),
	T_IC_PARTY_PUT_ALL_MEMBER = MakeMessageType(IC_PARTY, IC_PARTY_PUT_ALL_MEMBER),
	T_IC_PARTY_BAN_MEMBER = MakeMessageType(IC_PARTY, IC_PARTY_BAN_MEMBER),
	T_IC_PARTY_BAN_MEMBER_OK = MakeMessageType(IC_PARTY, IC_PARTY_BAN_MEMBER_OK),
	T_IC_PARTY_LEAVE = MakeMessageType(IC_PARTY, IC_PARTY_LEAVE),
	T_IC_PARTY_LEAVE_OK = MakeMessageType(IC_PARTY, IC_PARTY_LEAVE_OK),
	T_IC_PARTY_TRANSFER_MASTER = MakeMessageType(IC_PARTY, IC_PARTY_TRANSFER_MASTER),
	T_IC_PARTY_TRANSFER_MASTER_OK = MakeMessageType(IC_PARTY, IC_PARTY_TRANSFER_MASTER_OK),
	T_IC_PARTY_DISMEMBER = MakeMessageType(IC_PARTY, IC_PARTY_DISMEMBER),
	T_IC_PARTY_DISMEMBER_OK = MakeMessageType(IC_PARTY, IC_PARTY_DISMEMBER_OK),
	T_IC_PARTY_CHANGE_FLIGHT_FORMATION = MakeMessageType(IC_PARTY, IC_PARTY_CHANGE_FLIGHT_FORMATION),
	T_IC_PARTY_CHANGE_FLIGHT_FORMATION_OK = MakeMessageType(IC_PARTY, IC_PARTY_CHANGE_FLIGHT_FORMATION_OK),
	T_IC_PARTY_GET_FLIGHT_POSITION = MakeMessageType(IC_PARTY, IC_PARTY_GET_FLIGHT_POSITION),
	T_IC_PARTY_CHANGE_FLIGHT_POSITION = MakeMessageType(IC_PARTY, IC_PARTY_CHANGE_FLIGHT_POSITION),
	T_IC_PARTY_CANCEL_FLIGHT_POSITION = MakeMessageType(IC_PARTY, IC_PARTY_CANCEL_FLIGHT_POSITION),
	T_IC_PARTY_PUT_LAST_PARTY_INFO = MakeMessageType(IC_PARTY, IC_PARTY_PUT_LAST_PARTY_INFO),
	T_IC_PARTY_UPDATE_MEMBER_INFO_MAPNAME = MakeMessageType(IC_PARTY, IC_PARTY_UPDATE_MEMBER_INFO_MAPNAME),
	T_IC_PARTY_MEMBER_INVALIDATED = MakeMessageType(IC_PARTY, IC_PARTY_MEMBER_INVALIDATED),
	T_IC_PARTY_MEMBER_REJOINED = MakeMessageType(IC_PARTY, IC_PARTY_MEMBER_REJOINED),
	T_IC_PARTY_UPDATE_ITEM_POS = MakeMessageType(IC_PARTY, IC_PARTY_UPDATE_ITEM_POS),
	T_IC_PARTY_ALL_FLIGHT_POSITION = MakeMessageType(IC_PARTY, IC_PARTY_ALL_FLIGHT_POSITION),
	T_IC_PARTY_REQUEST_PARTYINFO_FROM_A_TO_M = MakeMessageType(IC_PARTY, IC_PARTY_REQUEST_PARTYINFO_FROM_A_TO_M),
	T_IC_PARTY_LEAVE_FROM_M_TO_A = MakeMessageType(IC_PARTY, IC_PARTY_LEAVE_FROM_M_TO_A),
	T_IC_PARTY_LEAVE_FROM_A_TO_M = MakeMessageType(IC_PARTY, IC_PARTY_LEAVE_FROM_A_TO_M),
	T_IC_PARTY_LIST_INFO = MakeMessageType(IC_PARTY, IC_PARTY_LIST_INFO),
	T_IC_PARTY_LIST_INFO_OK = MakeMessageType(IC_PARTY, IC_PARTY_LIST_INFO_OK),
	T_IC_PARTY_JOIN_FREE = MakeMessageType(IC_PARTY, IC_PARTY_JOIN_FREE),
	T_IC_PARTY_JOIN_FREE_OK = MakeMessageType(IC_PARTY, IC_PARTY_JOIN_FREE_OK),
	T_IC_PARTY_CHANGE_INFO = MakeMessageType(IC_PARTY, IC_PARTY_CHANGE_INFO),
	T_IC_PARTY_CHANGE_INFO_OK = MakeMessageType(IC_PARTY, IC_PARTY_CHANGE_INFO_OK),
	T_IC_PARTY_RECOMMENDATION_MEMBER = MakeMessageType(IC_PARTY, IC_PARTY_RECOMMENDATION_MEMBER),
	T_IC_PARTY_RECOMMENDATION_MEMBER_OK = MakeMessageType(IC_PARTY, IC_PARTY_RECOMMENDATION_MEMBER_OK),
	T_IC_PARTY_INFO = MakeMessageType(IC_PARTY, IC_PARTY_INFO),
	T_IC_PARTY_GET_AUTO_PARTY_INFO = MakeMessageType(IC_PARTY, IC_PARTY_GET_AUTO_PARTY_INFO),
	T_IC_PARTY_GET_AUTO_PARTY_INFO_OK = MakeMessageType(IC_PARTY, IC_PARTY_GET_AUTO_PARTY_INFO_OK),
	T_IC_PARTY_UPDATE_ITEM_TRANSFORMER_OK = MakeMessageType(IC_PARTY, IC_PARTY_UPDATE_ITEM_TRANSFORMER_OK),
	T_IC_STRING_128 = MakeMessageType(IC_STRING, IC_STRING_128),
	T_IC_STRING_256 = MakeMessageType(IC_STRING, IC_STRING_256),
	T_IC_STRING_512 = MakeMessageType(IC_STRING, IC_STRING_512),
	T_IC_COUNTDOWN_START = MakeMessageType(IC_COUNTDOWN, IC_COUNTDOWN_START),
	T_IC_COUNTDOWN_DONE = MakeMessageType(IC_COUNTDOWN, IC_COUNTDOWN_DONE),
	//T_IC_VOIP_SET = MakeMessageType(IC_VOIP, IC_VOIP_SET),
	//T_IC_VOIP_SET_OK = MakeMessageType(IC_VOIP, IC_VOIP_SET_OK),
	T_IC_CHATROOM_CREATE = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CREATE),
	T_IC_CHATROOM_CREATE_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CREATE_OK),
	T_IC_CHATROOM_LIST_INFO = MakeMessageType(IC_CHATROOM, IC_CHATROOM_LIST_INFO),
	T_IC_CHATROOM_LIST_INFO_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_LIST_INFO_OK),
	T_IC_CHATROOM_REQUEST_INVITE = MakeMessageType(IC_CHATROOM, IC_CHATROOM_REQUEST_INVITE),
	T_IC_CHATROOM_REQUEST_INVITE_QUESTION = MakeMessageType(IC_CHATROOM, IC_CHATROOM_REQUEST_INVITE_QUESTION),
	T_IC_CHATROOM_JOIN = MakeMessageType(IC_CHATROOM, IC_CHATROOM_JOIN),
	T_IC_CHATROOM_JOIN_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_JOIN_OK),
	T_IC_CHATROOM_ACCEPT_INVITE = MakeMessageType(IC_CHATROOM, IC_CHATROOM_ACCEPT_INVITE),
	T_IC_CHATROOM_ACCEPT_INVITE_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_ACCEPT_INVITE_OK),
	T_IC_CHATROOM_REJECT_INVITE = MakeMessageType(IC_CHATROOM, IC_CHATROOM_REJECT_INVITE),
	T_IC_CHATROOM_REJECT_INVITE_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_REJECT_INVITE_OK),
	T_IC_CHATROOM_LEAVE = MakeMessageType(IC_CHATROOM, IC_CHATROOM_LEAVE),
	T_IC_CHATROOM_LEAVE_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_LEAVE_OK),
	T_IC_CHATROOM_BAN = MakeMessageType(IC_CHATROOM, IC_CHATROOM_BAN),
	T_IC_CHATROOM_BAN_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_BAN_OK),
	T_IC_CHATROOM_CHANGE_NAME = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_NAME),
	T_IC_CHATROOM_CHANGE_NAME_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_NAME_OK),
	T_IC_CHATROOM_CHANGE_MASTER = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_MASTER),
	T_IC_CHATROOM_CHANGE_MASTER_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_MASTER_OK),
	T_IC_CHATROOM_CHANGE_LOCK_PW = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_LOCK_PW),
	T_IC_CHATROOM_CHANGE_LOCK_PW_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_LOCK_PW_OK),
	T_IC_CHATROOM_CHANGE_MAX_MEMBER = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_MAX_MEMBER),
	T_IC_CHATROOM_CHANGE_MAX_MEMBER_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_CHANGE_MAX_MEMBER_OK),
	T_IC_CHATROOM_MEMBER_INFO = MakeMessageType(IC_CHATROOM, IC_CHATROOM_MEMBER_INFO),
	T_IC_CHATROOM_MEMBER_INFO_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_MEMBER_INFO_OK),
	T_IC_CHATROOM_OTHER_MEMBER_INFO = MakeMessageType(IC_CHATROOM, IC_CHATROOM_OTHER_MEMBER_INFO),
	T_IC_CHATROOM_OTHER_MEMBER_INFO_OK = MakeMessageType(IC_CHATROOM, IC_CHATROOM_OTHER_MEMBER_INFO_OK),
	T_IC_INFO_DECLARATION_MSWAR_SET_OK = MakeMessageType(IC_INFO, IC_INFO_DECLARATION_MSWAR_SET_OK),
	T_FL_LOG_LOGIN = MakeMessageType(FL_LOG, FL_LOG_LOGIN),
	T_FL_LOG_LOGOUT = MakeMessageType(FL_LOG, FL_LOG_LOGOUT),
	T_FL_LOG_LEVEL = MakeMessageType(FL_LOG, FL_LOG_LEVEL),
	T_FL_LOG_EXP = MakeMessageType(FL_LOG, FL_LOG_EXP),
	T_FL_LOG_STAT = MakeMessageType(FL_LOG, FL_LOG_STAT),
	T_FL_LOG_GAME_START = MakeMessageType(FL_LOG, FL_LOG_GAME_START),
	T_FL_LOG_GAME_END = MakeMessageType(FL_LOG, FL_LOG_GAME_END),
	T_FL_LOG_QUEST_COMPLETION = MakeMessageType(FL_LOG, FL_LOG_QUEST_COMPLETION),
	T_FL_LOG_PKWIN = MakeMessageType(FL_LOG, FL_LOG_PKWIN),
	T_FL_LOG_PKLOSS = MakeMessageType(FL_LOG, FL_LOG_PKLOSS),
	T_FL_LOG_DEAD = MakeMessageType(FL_LOG, FL_LOG_DEAD),
	T_FL_LOG_WARP = MakeMessageType(FL_LOG, FL_LOG_WARP),
	T_FL_LOG_SPEED_HACK = MakeMessageType(FL_LOG, FL_LOG_SPEED_HACK),
	T_FL_LOG_CREATE_CHARACTER = MakeMessageType(FL_LOG, FL_LOG_CREATE_CHARACTER),
	T_FL_LOG_DELETE_CHARACTER = MakeMessageType(FL_LOG, FL_LOG_DELETE_CHARACTER),
	T_FL_LOG_MEMORY_HACK = MakeMessageType(FL_LOG, FL_LOG_MEMORY_HACK),
	T_FL_LOG_PvEWIN = MakeMessageType(FL_LOG, FL_LOG_PvEWIN),
	T_FL_LOG_PvELOSS = MakeMessageType(FL_LOG, FL_LOG_PvELOSS),
	T_FL_LOG_ITEM_CHARACTER_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_CHARACTER_ITEM),
	T_FL_LOG_ITEM_GET_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_GET_ITEM),
	T_FL_LOG_ITEM_TRADE_SEND = MakeMessageType(FL_LOG, FL_LOG_ITEM_TRADE_SEND),
	T_FL_LOG_ITEM_TRADE_RECV = MakeMessageType(FL_LOG, FL_LOG_ITEM_TRADE_RECV),
	T_FL_LOG_ITEM_THROWAWAY_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_THROWAWAY_ITEM),
	T_FL_LOG_ITEM_BUY_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_BUY_ITEM),
	T_FL_LOG_ITEM_SELL_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_SELL_ITEM),
	T_FL_LOG_ITEM_USE_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_USE_ITEM),
	T_FL_LOG_ITEM_USE_ENERGY = MakeMessageType(FL_LOG, FL_LOG_ITEM_USE_ENERGY),
	T_FL_LOG_ITEM_USE_ENCHANT = MakeMessageType(FL_LOG, FL_LOG_ITEM_USE_ENCHANT),
	T_FL_LOG_ITEM_ADD_ITEM_BY_ADMIN = MakeMessageType(FL_LOG, FL_LOG_ITEM_ADD_ITEM_BY_ADMIN),
	T_FL_LOG_ITEM_DEL_ITEM_BY_ADMIN = MakeMessageType(FL_LOG, FL_LOG_ITEM_DEL_ITEM_BY_ADMIN),
	T_FL_LOG_ITEM_ADD_ITEM_BY_COMMAND = MakeMessageType(FL_LOG, FL_LOG_ITEM_ADD_ITEM_BY_COMMAND),
	T_FL_LOG_ITEM_INSERT_TO_STORE = MakeMessageType(FL_LOG, FL_LOG_ITEM_INSERT_TO_STORE),
	T_FL_LOG_ITEM_DRAW_FROM_STORE = MakeMessageType(FL_LOG, FL_LOG_ITEM_DRAW_FROM_STORE),
	T_FL_LOG_ITEM_STORE_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_STORE_ITEM),
	T_FL_LOG_ITEM_USE_MIX = MakeMessageType(FL_LOG, FL_LOG_ITEM_USE_MIX),
	T_FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN = MakeMessageType(FL_LOG, FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN),
	T_FL_LOG_ITEM_BAZAAR_SEND = MakeMessageType(FL_LOG, FL_LOG_ITEM_BAZAAR_SEND),
	T_FL_LOG_ITEM_BAZAAR_RECV = MakeMessageType(FL_LOG, FL_LOG_ITEM_BAZAAR_RECV),
	T_FL_LOG_ITEM_INSERT_TO_GUILDSTORE = MakeMessageType(FL_LOG, FL_LOG_ITEM_INSERT_TO_GUILDSTORE),
	T_FL_LOG_ITEM_DRAW_FROM_GUILDSTORE = MakeMessageType(FL_LOG, FL_LOG_ITEM_DRAW_FROM_GUILDSTORE),
	T_FL_LOG_ITEM_SPI = MakeMessageType(FL_LOG, FL_LOG_ITEM_SPI),
	T_FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT = MakeMessageType(FL_LOG, FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT),
	T_FL_LOG_QUEST_COMPENSATION = MakeMessageType(FL_LOG, FL_LOG_QUEST_COMPENSATION),
	T_FL_LOG_WARPOINT = MakeMessageType(FL_LOG, FL_LOG_WARPOINT),
	T_FL_LOG_ARENA_TEAM_MATCH = MakeMessageType(FL_LOG, FL_LOG_ARENA_TEAM_MATCH),
	T_FL_LOG_TUTORIAL_COMPLETION = MakeMessageType(FL_LOG, FL_LOG_TUTORIAL_COMPLETION),
	T_FL_LOG_OUTPOST_START = MakeMessageType(FL_LOG, FL_LOG_OUTPOST_START),
	T_FL_LOG_OUTPOST_END = MakeMessageType(FL_LOG, FL_LOG_OUTPOST_END),
	T_FL_LOG_EXPEDIENCYFUND = MakeMessageType(FL_LOG, FL_LOG_EXPEDIENCYFUND),
	T_FL_LOG_SERVER_INFO_MAP = MakeMessageType(FL_LOG, FL_LOG_SERVER_INFO_MAP),
	T_FL_LOG_SERVER_INFO_TOTAL = MakeMessageType(FL_LOG, FL_LOG_SERVER_INFO_TOTAL),
	T_FL_LOG_HACKING_LOG = MakeMessageType(FL_LOG, FL_LOG_HACKING_LOG),
	T_FL_LOG_EVENT_PARTICIPATION_RATE = MakeMessageType(FL_LOG, FL_LOG_EVENT_PARTICIPATION_RATE),
	T_FL_LOG_ITEM_BUY_CASH_PRICE = MakeMessageType(FL_LOG, FL_LOG_ITEM_BUY_CASH_PRICE),
	T_FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT = MakeMessageType(FL_LOG, FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT),
	T_FL_LOG_ITEM_TRY_ENCHANT_INFO = MakeMessageType(FL_LOG, FL_LOG_ITEM_TRY_ENCHANT_INFO),
	T_FL_LOG_ITEM_DISSOLUTION_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_DISSOLUTION_ITEM),
	T_FL_LOG_MONSTER_BOSS = MakeMessageType(FL_LOG, FL_LOG_MONSTER_BOSS),
	T_FL_LOG_MS_WAR = MakeMessageType(FL_LOG, FL_LOG_MS_WAR),
	T_FL_LOG_SP_WAR = MakeMessageType(FL_LOG, FL_LOG_SP_WAR),
	T_FL_LOG_WAR_CONTRIBUTION = MakeMessageType(FL_LOG, FL_LOG_WAR_CONTRIBUTION),
	T_FL_LOG_WAR_CONTRIBUTION_GEAR = MakeMessageType(FL_LOG, FL_LOG_WAR_CONTRIBUTION_GEAR),
	T_FL_LOG_INFLWAR_START = MakeMessageType(FL_LOG, FL_LOG_INFLWAR_START),
	T_FL_LOG_INFLWAR_END = MakeMessageType(FL_LOG, FL_LOG_INFLWAR_END),
	T_FL_LOG_OUTPOSTWAR_RESET_START = MakeMessageType(FL_LOG, FL_LOG_OUTPOSTWAR_RESET_START),
	T_FL_LOG_OUTPOSTWAR_RESET_DESTROY = MakeMessageType(FL_LOG, FL_LOG_OUTPOSTWAR_RESET_DESTROY),
	T_FL_LOG_OUTPOSTWAR_RESET_COMPLETE = MakeMessageType(FL_LOG, FL_LOG_OUTPOSTWAR_RESET_COMPLETE),
	T_FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY = MakeMessageType(FL_LOG, FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY),
	T_FL_LOG_OUTPOSTWAR_SET_NEXTTIME = MakeMessageType(FL_LOG, FL_LOG_OUTPOSTWAR_SET_NEXTTIME),
	T_FL_LOG_POLL_VOTE = MakeMessageType(FL_LOG, FL_LOG_POLL_VOTE),
	T_FL_LOG_POLL_DELETE_LEADERCANDIDATE = MakeMessageType(FL_LOG, FL_LOG_POLL_DELETE_LEADERCANDIDATE),
	T_FL_LOG_DISMEMBER_GUILD = MakeMessageType(FL_LOG, FL_LOG_DISMEMBER_GUILD),
	T_FL_LOG_NOTIFY_MSG_DELETE = MakeMessageType(FL_LOG, FL_LOG_NOTIFY_MSG_DELETE),
	T_FL_LOG_USE_COUPON = MakeMessageType(FL_LOG, FL_LOG_USE_COUPON),
	T_FL_LOG_ITEM_ATTACH_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_ATTACH_ITEM),
	T_FL_LOG_ITEM_DETACH_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM_DETACH_ITEM),
	T_FL_LOG_ITEM_DELETE = MakeMessageType(FL_LOG, FL_LOG_ITEM_DELETE),
	T_FL_LOG_LUCKY_DROP = MakeMessageType(FL_LOG, FL_LOG_LUCKY_DROP),
	T_FL_LOG_INFINITY_START = MakeMessageType(FL_LOG, FL_LOG_INFINITY_START),
	T_FL_LOG_INFINITY_START_ITEM = MakeMessageType(FL_LOG, FL_LOG_INFINITY_START_ITEM),
	T_FL_LOG_INFINITY_CINEMA = MakeMessageType(FL_LOG, FL_LOG_INFINITY_CINEMA),
	T_FL_LOG_MONSTER_SKILL = MakeMessageType(FL_LOG, FL_LOG_MONSTER_SKILL),
	T_FL_LOG_HPACTION_TALK = MakeMessageType(FL_LOG, FL_LOG_HPACTION_TALK),
	T_FL_LOG_INFINITY_FIN = MakeMessageType(FL_LOG, FL_LOG_INFINITY_FIN),
	T_FL_LOG_INFINITY_FIN_ITEM = MakeMessageType(FL_LOG, FL_LOG_INFINITY_FIN_ITEM),
	T_FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER = MakeMessageType(FL_LOG, FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER),
	T_FL_LOG_INFINITY_LEAVE_ITEM = MakeMessageType(FL_LOG, FL_LOG_INFINITY_LEAVE_ITEM),
	T_FL_LOG_PET_LEVEL = MakeMessageType(FL_LOG, FL_LOG_PET_LEVEL),
	T_FL_LOG_CONNECT_USER_NEW = MakeMessageType(FL_LOG, FL_LOG_CONNECT_USER_NEW),
	T_FL_LOG_CONNECT_USER_LOGIN = MakeMessageType(FL_LOG, FL_LOG_CONNECT_USER_LOGIN),
	T_FL_LOG_STATISTICS_MONEY = MakeMessageType(FL_LOG, FL_LOG_STATISTICS_MONEY),
	T_FL_LOG_FIXED_TERM_SHAPE_START = MakeMessageType(FL_LOG, FL_LOG_FIXED_TERM_SHAPE_START),
	T_FL_LOG_FIXED_TERM_SHAPE_END = MakeMessageType(FL_LOG, FL_LOG_FIXED_TERM_SHAPE_END),
	T_FL_LOG_ACCOUNTCONNECT = MakeMessageType(FL_LOG, FL_LOG_ACCOUNTCONNECT),
	T_FL_LOG_CHARDATA = MakeMessageType(FL_LOG, FL_LOG_CHARDATA),
	T_FL_LOG_ITEM = MakeMessageType(FL_LOG, FL_LOG_ITEM),
	T_FL_LOG_ITEMSTATE = MakeMessageType(FL_LOG, FL_LOG_ITEMSTATE),
	T_FL_LOG_SERVER = MakeMessageType(FL_LOG, FL_LOG_SERVER),
	T_FL_LOG_ITEM_INITIALIZED_GUILD_STORE = MakeMessageType(FL_LOG, FL_LOG_ITEM_INITIALIZED_GUILD_STORE),
	T_FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT = MakeMessageType(FL_LOG, FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT),
	T_FL_LOG_COLLECTION_STATE = MakeMessageType(FL_LOG, FL_LOG_COLLECTION_STATE),
	T_FL_LOG_COLLECTION_SHAPE_CHANGE = MakeMessageType(FL_LOG, FL_LOG_COLLECTION_SHAPE_CHANGE),
	T_FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN = MakeMessageType(FL_LOG, FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN),
	T_FL_LOG_START_FIELD_SERVER = MakeMessageType(FL_LOG, FL_LOG_START_FIELD_SERVER),
	// T_PT_RELOAD = MakeMessageType(PRE_TOOL, PT_RELOAD), // this message will be sent from my custom tool to the preserver to reload patches and ti_Item
	T_PAUTH_CONNECT_LOGIN = MakeMessageType(PAUTH_CONNECT, PAUTH_CONNECT_LOGIN),
	T_PAUTH_CONNECT_LOGIN_OK = MakeMessageType(PAUTH_CONNECT, PAUTH_CONNECT_LOGIN_OK),
	T_PAUTH_CONNECT_LOGIN_FAIL = MakeMessageType(PAUTH_CONNECT, PAUTH_CONNECT_LOGIN_FAIL),
	T_PAUTH_CONNECT_LOGIN_SHUTDOWN = MakeMessageType(PAUTH_CONNECT, PAUTH_CONNECT_LOGIN_SHUTDOWN),
	T_PM_GET_NUM_CLIENTS = MakeMessageType(PM_MONITOR, PM_GET_NUM_CLIENTS),
	T_PM_GET_NUM_CLIENTS_OK = MakeMessageType(PM_MONITOR, PM_GET_NUM_CLIENTS_OK),
	T_PM_SHUTDOWN = MakeMessageType(PM_MONITOR, PM_SHUTDOWN),
	T_PM_SHUTDOWN_OK = MakeMessageType(PM_MONITOR, PM_SHUTDOWN_OK),
	T_PM_CLOSE = MakeMessageType(PM_MONITOR, PM_CLOSE),
	T_PM_CLOSE_OK = MakeMessageType(PM_MONITOR, PM_CLOSE_OK),
	T_PM_PING = MakeMessageType(PM_MONITOR, PM_PING),
	T_PM_PING_OK = MakeMessageType(PM_MONITOR, PM_PING_OK),
	T_PM_RELOAD_VERSION_INFO = MakeMessageType(PM_MONITOR, PM_RELOAD_VERSION_INFO),
	T_PM_RELOAD_VERSION_INFO_OK = MakeMessageType(PM_MONITOR, PM_RELOAD_VERSION_INFO_OK),
	T_PM_CHANGE_BANDWIDTH_FLAG = MakeMessageType(PM_MONITOR, PM_CHANGE_BANDWIDTH_FLAG),
	T_PM_CHANGE_BANDWIDTH_FLAG_OK = MakeMessageType(PM_MONITOR, PM_CHANGE_BANDWIDTH_FLAG_OK),
	T_PM_SET_MSG_PRINT_LEVEL = MakeMessageType(PM_MONITOR, PM_SET_MSG_PRINT_LEVEL),
	T_PM_PAUSE_SERVICE = MakeMessageType(PM_MONITOR, PM_PAUSE_SERVICE),
	T_PM_PAUSE_SERVICE_OK = MakeMessageType(PM_MONITOR, PM_PAUSE_SERVICE_OK),
	T_PM_START_SERVICE = MakeMessageType(PM_MONITOR, PM_START_SERVICE),
	T_PM_START_SERVICE_OK = MakeMessageType(PM_MONITOR, PM_START_SERVICE_OK),
	T_PM_GET_SERVER_GROUP_INFO = MakeMessageType(PM_MONITOR, PM_GET_SERVER_GROUP_INFO),
	T_PM_GET_SERVER_GROUP_INFO_ACK = MakeMessageType(PM_MONITOR, PM_GET_SERVER_GROUP_INFO_ACK),
	T_PM_SET_LIMIT_GROUP_USER_COUNTS = MakeMessageType(PM_MONITOR, PM_SET_LIMIT_GROUP_USER_COUNTS),
	T_PM_SERVER_THREAD_STATUS = MakeMessageType(PM_MONITOR, PM_SERVER_THREAD_STATUS),
	T_PM_RELOAD_BLOCKED_ACCOUNTS = MakeMessageType(PM_MONITOR, PM_RELOAD_BLOCKED_ACCOUNTS),
	T_PM_RELOAD_BLOCKED_ACCOUNTS_OK = MakeMessageType(PM_MONITOR, PM_RELOAD_BLOCKED_ACCOUNTS_OK),
	T_PM_CHANGE_ENABLE_SERVER_GROUP = MakeMessageType(PM_MONITOR, PM_CHANGE_ENABLE_SERVER_GROUP),
	T_PM_PREPARE_SHUTDOWN = MakeMessageType(PM_MONITOR, PM_PREPARE_SHUTDOWN),
	T_PM_AUTO_UPDATE_HTTP_SERVER_SETTING = MakeMessageType(PM_MONITOR, PM_AUTO_UPDATE_HTTP_SERVER_SETTING),
	T_PM_RELOAD_VERSION_INFO_HEADER = MakeMessageType(PM_MONITOR, PM_RELOAD_VERSION_INFO_HEADER),
	T_PM_RELOAD_VERSION_INFO_LIST = MakeMessageType(PM_MONITOR, PM_RELOAD_VERSION_INFO_LIST),
	T_PM_RELOAD_VERSION_INFO_DONE = MakeMessageType(PM_MONITOR, PM_RELOAD_VERSION_INFO_DONE),
	T_IM_GET_NUM_CLIENTS = MakeMessageType(IM_MONITOR, IM_GET_NUM_CLIENTS),
	T_IM_GET_NUM_CLIENTS_OK = MakeMessageType(IM_MONITOR, IM_GET_NUM_CLIENTS_OK),
	T_IM_SHUTDOWN = MakeMessageType(IM_MONITOR, IM_SHUTDOWN),
	T_IM_SHUTDOWN_OK = MakeMessageType(IM_MONITOR, IM_SHUTDOWN_OK),
	T_IM_PING = MakeMessageType(IM_MONITOR, IM_PING),
	T_IM_PING_OK = MakeMessageType(IM_MONITOR, IM_PING_OK),
	T_IM_PRINTMAP = MakeMessageType(IM_MONITOR, IM_PRINTMAP),
	T_IM_PRINT_DEBUG_MSG = MakeMessageType(IM_MONITOR, IM_PRINT_DEBUG_MSG),
	T_IM_CHANGE_BANDWIDTH_FLAG = MakeMessageType(IM_MONITOR, IM_CHANGE_BANDWIDTH_FLAG),
	T_IM_CHANGE_BANDWIDTH_FLAG_OK = MakeMessageType(IM_MONITOR, IM_CHANGE_BANDWIDTH_FLAG_OK),
	T_IM_SET_MSG_PRINT_LEVEL = MakeMessageType(IM_MONITOR, IM_SET_MSG_PRINT_LEVEL),
	T_IM_GET_TOTAL_USER_COUNTS = MakeMessageType(IM_MONITOR, IM_GET_TOTAL_USER_COUNTS),
	T_IM_GET_TOTAL_USER_COUNTS_ACK = MakeMessageType(IM_MONITOR, IM_GET_TOTAL_USER_COUNTS_ACK),
	T_IM_SERVER_THREAD_STATUS = MakeMessageType(IM_MONITOR, IM_SERVER_THREAD_STATUS),
	T_FM_GET_NUM_CLIENTS = MakeMessageType(FM_MONITOR, FM_GET_NUM_CLIENTS),
	T_FM_GET_NUM_CLIENTS_OK = MakeMessageType(FM_MONITOR, FM_GET_NUM_CLIENTS_OK),
	T_FM_SHUTDOWN = MakeMessageType(FM_MONITOR, FM_SHUTDOWN),
	T_FM_SHUTDOWN_OK = MakeMessageType(FM_MONITOR, FM_SHUTDOWN_OK),
	T_FM_PING = MakeMessageType(FM_MONITOR, FM_PING),
	T_FM_PING_OK = MakeMessageType(FM_MONITOR, FM_PING_OK),
	T_FM_PRINTMAP = MakeMessageType(FM_MONITOR, FM_PRINTMAP),
	T_FM_SAVE_MAPBLOCK_INFO = MakeMessageType(FM_MONITOR, FM_SAVE_MAPBLOCK_INFO),
	T_FM_PRINT_DEBUG_MSG = MakeMessageType(FM_MONITOR, FM_PRINT_DEBUG_MSG),
	T_FM_SEND_CHANNEL_INFO = MakeMessageType(FM_MONITOR, FM_SEND_CHANNEL_INFO),
	T_FM_CHANGE_BANDWIDTH_FLAG = MakeMessageType(FM_MONITOR, FM_CHANGE_BANDWIDTH_FLAG),
	T_FM_CHANGE_BANDWIDTH_FLAG_OK = MakeMessageType(FM_MONITOR, FM_CHANGE_BANDWIDTH_FLAG_OK),
	T_FM_SET_MSG_PRINT_LEVEL = MakeMessageType(FM_MONITOR, FM_SET_MSG_PRINT_LEVEL),
	T_FM_GET_CHARACTER_INFO = MakeMessageType(FM_MONITOR, FM_GET_CHARACTER_INFO),
	T_FM_GET_CHARACTER_INFO_OK = MakeMessageType(FM_MONITOR, FM_GET_CHARACTER_INFO_OK),
	T_FM_GET_MAP_USER_COUNTS = MakeMessageType(FM_MONITOR, FM_GET_MAP_USER_COUNTS),
	T_FM_GET_MAP_USER_COUNTS_ACK = MakeMessageType(FM_MONITOR, FM_GET_MAP_USER_COUNTS_ACK),
	T_FM_RELOAD_ITEM_INFO = MakeMessageType(FM_MONITOR, FM_RELOAD_ITEM_INFO),
	T_FM_RELOAD_ITEM_INFO_OK = MakeMessageType(FM_MONITOR, FM_RELOAD_ITEM_INFO_OK),
	T_FM_RESET_NPC_SERVER = MakeMessageType(FM_MONITOR, FM_RESET_NPC_SERVER),
	T_FM_RESET_NPC_SERVER_OK = MakeMessageType(FM_MONITOR, FM_RESET_NPC_SERVER_OK),
	T_FM_SERVER_THREAD_STATUS = MakeMessageType(FM_MONITOR, FM_SERVER_THREAD_STATUS),
	T_FM_SET_SERVICE_STATE = MakeMessageType(FM_MONITOR, FM_SET_SERVICE_STATE),
	T_FM_SET_SERVICE_STATE_OK = MakeMessageType(FM_MONITOR, FM_SET_SERVICE_STATE_OK),
	T_FM_RELOAD_SERVER_INFO = MakeMessageType(FM_MONITOR, FM_RELOAD_SERVER_INFO),
	T_FM_RELOAD_SERVER_INFO_OK = MakeMessageType(FM_MONITOR, FM_RELOAD_SERVER_INFO_OK),
	T_FM_INCREASE_CHANNEL = MakeMessageType(FM_MONITOR, FM_INCREASE_CHANNEL),
	T_FM_INCREASE_CHANNEL_OK = MakeMessageType(FM_MONITOR, FM_INCREASE_CHANNEL_OK),
	T_FM_SET_CHANNEL_STATE = MakeMessageType(FM_MONITOR, FM_SET_CHANNEL_STATE),
	T_FM_SET_CHANNEL_STATE_OK = MakeMessageType(FM_MONITOR, FM_SET_CHANNEL_STATE_OK),
	T_FM_CITYWAR_CHANGE_WAR_TIME = MakeMessageType(FM_MONITOR, FM_CITYWAR_CHANGE_WAR_TIME),
	T_FM_CITYWAR_CHANGED_OCCUPY_INFO = MakeMessageType(FM_MONITOR, FM_CITYWAR_CHANGED_OCCUPY_INFO),
	T_NM_GET_NUM_MONSTERS = MakeMessageType(NM_MONITOR, NM_GET_NUM_MONSTERS),
	T_NM_GET_NUM_MONSTERS_OK = MakeMessageType(NM_MONITOR, NM_GET_NUM_MONSTERS_OK),
	T_NM_SHUTDOWN = MakeMessageType(NM_MONITOR, NM_SHUTDOWN),
	T_NM_SHUTDOWN_OK = MakeMessageType(NM_MONITOR, NM_SHUTDOWN_OK),
	T_NM_PING = MakeMessageType(NM_MONITOR, NM_PING),
	T_NM_PING_OK = MakeMessageType(NM_MONITOR, NM_PING_OK),
	T_NM_PRINTMAP = MakeMessageType(NM_MONITOR, NM_PRINTMAP),
	T_NM_SAVE_MAPBLOCK_INFO = MakeMessageType(NM_MONITOR, NM_SAVE_MAPBLOCK_INFO),
	T_NM_SEND_CHANNEL_INFO = MakeMessageType(NM_MONITOR, NM_SEND_CHANNEL_INFO),
	T_NM_CHANGE_BANDWIDTH_FLAG = MakeMessageType(NM_MONITOR, NM_CHANGE_BANDWIDTH_FLAG),
	T_NM_CHANGE_BANDWIDTH_FLAG_OK = MakeMessageType(NM_MONITOR, NM_CHANGE_BANDWIDTH_FLAG_OK),
	T_NM_SET_MSG_PRINT_LEVEL = MakeMessageType(NM_MONITOR, NM_SET_MSG_PRINT_LEVEL),
	T_NM_GET_MAP_USER_COUNTS = MakeMessageType(NM_MONITOR, NM_GET_MAP_USER_COUNTS),
	T_NM_GET_MAP_USER_COUNTS_ACK = MakeMessageType(NM_MONITOR, NM_GET_MAP_USER_COUNTS_ACK),
	T_NM_SET_LIMIT_MONSTER_COUNT = MakeMessageType(NM_MONITOR, NM_SET_LIMIT_MONSTER_COUNT),
	T_NM_SET_LIMIT_MONSTER_COUNT_ACK = MakeMessageType(NM_MONITOR, NM_SET_LIMIT_MONSTER_COUNT_ACK),
	T_NM_SERVER_THREAD_STATUS = MakeMessageType(NM_MONITOR, NM_SERVER_THREAD_STATUS),
	T_NM_SET_CHANNEL_STATE_OK = MakeMessageType(NM_MONITOR, NM_SET_CHANNEL_STATE_OK),
	T_PA_ADMIN_CONNECT = MakeMessageType(PA_ADMIN, PA_ADMIN_CONNECT),
	T_PA_ADMIN_CONNECT_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_CONNECT_OK),
	T_PA_ADMIN_CHANGE_SERVER_STATE = MakeMessageType(PA_ADMIN, PA_ADMIN_CHANGE_SERVER_STATE),
	T_PA_ADMIN_GET_ACCOUNT_INFO = MakeMessageType(PA_ADMIN, PA_ADMIN_GET_ACCOUNT_INFO),
	T_PA_ADMIN_GET_ACCOUNT_INFO_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_GET_ACCOUNT_INFO_OK),
	T_PA_ADMIN_DISCONNECT_USER = MakeMessageType(PA_ADMIN, PA_ADMIN_DISCONNECT_USER),
	T_PA_ADMIN_DISCONNECT_USER_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_DISCONNECT_USER_OK),
	T_PA_ADMIN_BLOCK_ACCOUNT = MakeMessageType(PA_ADMIN, PA_ADMIN_BLOCK_ACCOUNT),
	T_PA_ADMIN_BLOCK_ACCOUNT_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_BLOCK_ACCOUNT_OK),
	T_PA_ADMIN_UNBLOCK_ACCOUNT = MakeMessageType(PA_ADMIN, PA_ADMIN_UNBLOCK_ACCOUNT),
	T_PA_ADMIN_UNBLOCK_ACCOUNT_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_UNBLOCK_ACCOUNT_OK),
	T_PA_ADMIN_GET_SERVER_INFO = MakeMessageType(PA_ADMIN, PA_ADMIN_GET_SERVER_INFO),
	T_PA_ADMIN_GET_SERVER_INFO_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_GET_SERVER_INFO_OK),
	T_PA_ADMIN_GET_ACCOUNT_LIST = MakeMessageType(PA_ADMIN, PA_ADMIN_GET_ACCOUNT_LIST),
	T_PA_ADMIN_GET_ACCOUNT_LIST_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_GET_ACCOUNT_LIST_OK),
	T_PA_ADMIN_RELOAD_HAPPYEV = MakeMessageType(PA_ADMIN, PA_ADMIN_RELOAD_HAPPYEV),
	T_PA_ADMIN_RELOAD_ITEMEV = MakeMessageType(PA_ADMIN, PA_ADMIN_RELOAD_ITEMEV),
	T_PA_ADMIN_UPDATE_PCBANGLIST = MakeMessageType(PA_ADMIN, PA_ADMIN_UPDATE_PCBANGLIST),
	T_PA_ADMIN_UPDATE_STRATEGYPOINT_NOTSUMMONTIME = MakeMessageType(PA_ADMIN, PA_ADMIN_UPDATE_STRATEGYPOINT_NOTSUMMONTIME),
	T_PA_ADMIN_PETITION_SET_PERIOD = MakeMessageType(PA_ADMIN, PA_ADMIN_PETITION_SET_PERIOD),
	T_PA_ADMIN_SET_DBSERVER_GROUP = MakeMessageType(PA_ADMIN, PA_ADMIN_SET_DBSERVER_GROUP),
	T_PA_ADMIN_SET_DBSERVER_GROUP_OK = MakeMessageType(PA_ADMIN, PA_ADMIN_SET_DBSERVER_GROUP_OK),
	T_PA_ADMIN_RELOAD_ADMIN_NOTICE_SYSTEM = MakeMessageType(PA_ADMIN, PA_ADMIN_RELOAD_ADMIN_NOTICE_SYSTEM),
	T_PA_ADMIN_RELOAD_WORLDRANKING = MakeMessageType(PA_ADMIN, PA_ADMIN_RELOAD_WORLDRANKING),
	T_PA_ADMIN_RELOAD_INFLUENCERATE = MakeMessageType(PA_ADMIN, PA_ADMIN_RELOAD_INFLUENCERATE),
	T_PA_ADMIN_LOG_ACCOUNT_ACCOUNTTYPE_CHANGE = MakeMessageType(PA_ADMIN, PA_ADMIN_LOG_ACCOUNT_ACCOUNTTYPE_CHANGE),
	T_PA_ADMIN_LOG_CHARACTER_RACEACCOUNTTYPE_CHANGE = MakeMessageType(PA_ADMIN, PA_ADMIN_LOG_CHARACTER_RACEACCOUNTTYPE_CHANGE),
	T_PA_ADMIN_STRATRGYPOINT_INFO_CHANGE = MakeMessageType(PA_ADMIN, PA_ADMIN_STRATRGYPOINT_INFO_CHANGE),
	T_IA_ADMIN_CONNECT = MakeMessageType(IA_ADMIN, IA_ADMIN_CONNECT),
	T_IA_ADMIN_CONNECT_OK = MakeMessageType(IA_ADMIN, IA_ADMIN_CONNECT_OK),
	T_IA_ADMIN_CHANGE_SERVER_STATE = MakeMessageType(IA_ADMIN, IA_ADMIN_CHANGE_SERVER_STATE),
	T_IA_ADMIN_GET_CHARACTER = MakeMessageType(IA_ADMIN, IA_ADMIN_GET_CHARACTER),
	T_IA_ADMIN_GET_CHARACTER_OK = MakeMessageType(IA_ADMIN, IA_ADMIN_GET_CHARACTER_OK),
	T_IA_ADMIN_CHAT_ALL = MakeMessageType(IA_ADMIN, IA_ADMIN_CHAT_ALL),
	T_IA_ADMIN_GET_SERVER_INFO = MakeMessageType(IA_ADMIN, IA_ADMIN_GET_SERVER_INFO),
	T_IA_ADMIN_GET_SERVER_INFO_OK = MakeMessageType(IA_ADMIN, IA_ADMIN_GET_SERVER_INFO_OK),
	T_FA_ADMIN_CONNECT = MakeMessageType(FA_ADMIN, FA_ADMIN_CONNECT),
	T_FA_ADMIN_CONNECT_OK = MakeMessageType(FA_ADMIN, FA_ADMIN_CONNECT_OK),
	T_FA_ADMIN_CHANGE_SERVER_STATE = MakeMessageType(FA_ADMIN, FA_ADMIN_CHANGE_SERVER_STATE),
	T_PRE_IOCP = MakeMessageType(PRE, PRE_IOCP),
	T_PRE_DB = MakeMessageType(PRE, PRE_DB),
	T_IM_IOCP = MakeMessageType(IM, IM_IOCP),
	T_IM_DB = MakeMessageType(IM, IM_DB),
	T_FIELD_IOCP = MakeMessageType(FIELD, FIELD_IOCP),
	T_FIELD_DB = MakeMessageType(FIELD, FIELD_DB),
	T_NPC_IOCP = MakeMessageType(NPC, NPC_IOCP),
	T_NPC_DB = MakeMessageType(NPC, NPC_DB),
	T_FC_TRIGGER_MAP_BUFF_SKILL = MakeMessageType(FC_TRIGGER, FC_TRIGGER_MAP_BUFF_SKILL),
	T_FC_SET_LIMITTIME = MakeMessageType(FC_TRIGGER, FC_SET_LIMITTIME),
	T_FC_COLLECTION_INFO = MakeMessageType(FC_COLLECTION, FC_COLLECTION_INFO),
	T_FC_COLLECTION_SHAPE_CHANGE = MakeMessageType(FC_COLLECTION, FC_COLLECTION_SHAPE_CHANGE),
	T_FC_COLLECTION_MONTHLY_AROMOR_EVENT_INIT = MakeMessageType(FC_COLLECTION, FC_COLLECTION_MONTHLY_AROMOR_EVENT_INIT),
	T_FC_COLLECTION_MONTHLY_AROMOR_EVENT_INFO = MakeMessageType(FC_COLLECTION, FC_COLLECTION_MONTHLY_AROMOR_EVENT_INFO),
	T_TIMER = MakeMessageType(TIMER, TIMER),
	T_DB = MakeMessageType(DB, DB),
	T_ERROR = MakeMessageType(ATUMERROR, ATUMERROR),
	T_NA = MakeMessageType(NA, NA),
};
