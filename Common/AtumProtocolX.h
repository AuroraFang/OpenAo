//Copyright[2002] MasangSoft
#pragma once

namespace protocol
{
	template<MessageType_t> struct info { static constexpr size_t msg_size = 0; using struct_t = void; };

	template<> struct info<T_PC_DEFAULT_UPDATE_LAUNCHER_VERSION> { static constexpr size_t msg_size = sizeof(MSG_PC_DEFAULT_UPDATE_LAUNCHER_VERSION); using struct_t = MSG_PC_DEFAULT_UPDATE_LAUNCHER_VERSION; };
	template<> struct info<T_PC_DEFAULT_UPDATE_LAUNCHER_UPDATE_INFO> { static constexpr size_t msg_size = sizeof(MSG_PC_DEFAULT_UPDATE_LAUNCHER_UPDATE_INFO); using struct_t = MSG_PC_DEFAULT_UPDATE_LAUNCHER_UPDATE_INFO; };
	template<> struct info<T_PC_DEFAULT_NEW_UPDATE_LAUNCHER_VERSION> { static constexpr size_t msg_size = sizeof(MSG_PC_DEFAULT_NEW_UPDATE_LAUNCHER_VERSION); using struct_t = MSG_PC_DEFAULT_NEW_UPDATE_LAUNCHER_VERSION; };
	template<> struct info<T_PC_DEFAULT_NEW_UPDATE_LAUNCHER_UPDATE_INFO> { static constexpr size_t msg_size = sizeof(MSG_PC_DEFAULT_NEW_UPDATE_LAUNCHER_UPDATE_INFO); using struct_t = MSG_PC_DEFAULT_NEW_UPDATE_LAUNCHER_UPDATE_INFO; };
	template<> struct info<T_PC_CONNECT_CLOSE> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_CLOSE); using struct_t = MSG_PC_CONNECT_CLOSE; };
	template<> struct info<T_PC_CONNECT_VERSION> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_VERSION); using struct_t = MSG_PC_CONNECT_VERSION; };
	template<> struct info<T_PC_CONNECT_UPDATE_INFO> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_UPDATE_INFO); using struct_t = MSG_PC_CONNECT_UPDATE_INFO; };
	template<> struct info<T_PC_CONNECT_REINSTALL_CLIENT> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_REINSTALL_CLIENT); using struct_t = MSG_PC_CONNECT_REINSTALL_CLIENT; };
	template<> struct info<T_PC_CONNECT_LOGIN> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_LOGIN); using struct_t = MSG_PC_CONNECT_LOGIN; };
	template<> struct info<T_PC_CONNECT_LOGIN_OK> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_LOGIN_OK); using struct_t = MSG_PC_CONNECT_LOGIN_OK; };
	template<> struct info<T_PC_CONNECT_SINGLE_FILE_VERSION_CHECK> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_SINGLE_FILE_VERSION_CHECK); using struct_t = MSG_PC_CONNECT_SINGLE_FILE_VERSION_CHECK; };
	template<> struct info<T_PC_CONNECT_SINGLE_FILE_UPDATE_INFO> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_SINGLE_FILE_UPDATE_INFO); using struct_t = MSG_PC_CONNECT_SINGLE_FILE_UPDATE_INFO; };

	template<> struct info<T_PC_CONNECT_GET_SERVER_GROUP_LIST_OK>
	{
		static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_GET_SERVER_GROUP_LIST_OK);

		using struct_t = MSG_PC_CONNECT_GET_SERVER_GROUP_LIST_OK;
		using array_t = MEX_SERVER_GROUP_INFO_FOR_LAUNCHER;

		static auto& array_c(struct_t* ptr) { return ptr->NumOfServerGroup; }
		static auto& array_c(const struct_t* ptr) { return ptr->NumOfServerGroup; }
	};

	template<> struct info<T_PC_CONNECT_GET_GAME_SERVER_GROUP_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_GET_GAME_SERVER_GROUP_LIST_OK); using struct_t = MSG_PC_CONNECT_GET_GAME_SERVER_GROUP_LIST_OK; };
	template<> struct info<T_PC_CONNECT_NETWORK_CHECK> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_NETWORK_CHECK); using struct_t = MSG_PC_CONNECT_NETWORK_CHECK; };
	template<> struct info<T_PC_CONNECT_NETWORK_CHECK_OK> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_NETWORK_CHECK_OK); using struct_t = MSG_PC_CONNECT_NETWORK_CHECK_OK; };
	template<> struct info<T_PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST_OK); using struct_t = MSG_PC_CONNECT_GET_NEW_GAME_SERVER_GROUP_LIST_OK; };
	template<> struct info<T_PC_CONNECT_LOGIN_BLOCKED> { static constexpr size_t msg_size = sizeof(MSG_PC_CONNECT_LOGIN_BLOCKED); using struct_t = MSG_PC_CONNECT_LOGIN_BLOCKED; };
	template<> struct info<T_FN_CONNECT_INCREASE_CHANNEL> { static constexpr size_t msg_size = sizeof(MSG_FN_CONNECT_INCREASE_CHANNEL); using struct_t = MSG_FN_CONNECT_INCREASE_CHANNEL; };
	template<> struct info<T_FN_CONNECT_SET_CHANNEL_STATE> { static constexpr size_t msg_size = sizeof(MSG_FN_CONNECT_SET_CHANNEL_STATE); using struct_t = MSG_FN_CONNECT_SET_CHANNEL_STATE; };
	template<> struct info<T_FC_BATTLE_ATTACK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK); using struct_t = MSG_FC_BATTLE_ATTACK; };
	template<> struct info<T_FC_BATTLE_ATTACK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_OK); using struct_t = MSG_FC_BATTLE_ATTACK_OK; };
	template<> struct info<T_FC_BATTLE_ATTACK_FIND> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_FIND); using struct_t = MSG_FC_BATTLE_ATTACK_FIND; };
	template<> struct info<T_FC_BATTLE_ATTACK_FIND_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_FIND_OK); using struct_t = MSG_FC_BATTLE_ATTACK_FIND_OK; };
	template<> struct info<T_FC_BATTLE_DROP_MINE> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_DROP_MINE); using struct_t = MSG_FC_BATTLE_DROP_MINE; };
	template<> struct info<T_FC_BATTLE_DROP_MINE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_DROP_MINE_OK); using struct_t = MSG_FC_BATTLE_DROP_MINE_OK; };
	template<> struct info<T_FC_BATTLE_MINE_ATTACK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_MINE_ATTACK); using struct_t = MSG_FC_BATTLE_MINE_ATTACK; };
	template<> struct info<T_FC_BATTLE_MINE_ATTACK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_MINE_ATTACK_OK); using struct_t = MSG_FC_BATTLE_MINE_ATTACK_OK; };
	template<> struct info<T_FC_BATTLE_MINE_ATTACK_FIND> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_MINE_ATTACK_FIND); using struct_t = MSG_FC_BATTLE_MINE_ATTACK_FIND; };
	template<> struct info<T_FC_BATTLE_MINE_ATTACK_FIND_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_MINE_ATTACK_FIND_OK); using struct_t = MSG_FC_BATTLE_MINE_ATTACK_FIND_OK; };
	template<> struct info<T_FC_BATTLE_REQUEST_PK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_REQUEST_PK_OK); using struct_t = MSG_FC_BATTLE_REQUEST_PK_OK; };
	template<> struct info<T_FC_BATTLE_REQUEST_P2P_PK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_REQUEST_P2P_PK); using struct_t = MSG_FC_BATTLE_REQUEST_P2P_PK; };
	template<> struct info<T_FC_BATTLE_REQUEST_P2P_PK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_REQUEST_P2P_PK_OK); using struct_t = MSG_FC_BATTLE_REQUEST_P2P_PK_OK; };
	template<> struct info<T_FC_BATTLE_ACCEPT_REQUEST_P2P_PK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ACCEPT_REQUEST_P2P_PK); using struct_t = MSG_FC_BATTLE_ACCEPT_REQUEST_P2P_PK; };
	template<> struct info<T_FC_BATTLE_ACCEPT_REQUEST_P2P_PK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ACCEPT_REQUEST_P2P_PK_OK); using struct_t = MSG_FC_BATTLE_ACCEPT_REQUEST_P2P_PK_OK; };
	template<> struct info<T_FC_BATTLE_REJECT_REQUEST_P2P_PK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_REJECT_REQUEST_P2P_PK); using struct_t = MSG_FC_BATTLE_REJECT_REQUEST_P2P_PK; };
	template<> struct info<T_FC_BATTLE_REJECT_REQUEST_P2P_PK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_REJECT_REQUEST_P2P_PK_OK); using struct_t = MSG_FC_BATTLE_REJECT_REQUEST_P2P_PK_OK; };
	template<> struct info<T_FC_BATTLE_SURRENDER_P2P_PK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_SURRENDER_P2P_PK); using struct_t = MSG_FC_BATTLE_SURRENDER_P2P_PK; };
	template<> struct info<T_FC_BATTLE_SURRENDER_P2P_PK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_SURRENDER_P2P_PK_OK); using struct_t = MSG_FC_BATTLE_SURRENDER_P2P_PK_OK; };
	template<> struct info<T_FC_BATTLE_ACCEPT_SURRENDER_P2P_PK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ACCEPT_SURRENDER_P2P_PK); using struct_t = MSG_FC_BATTLE_ACCEPT_SURRENDER_P2P_PK; };
	template<> struct info<T_FC_BATTLE_REJECT_SURRENDER_P2P_PK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_REJECT_SURRENDER_P2P_PK); using struct_t = MSG_FC_BATTLE_REJECT_SURRENDER_P2P_PK; };
	template<> struct info<T_FC_BATTLE_REJECT_SURRENDER_P2P_PK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_REJECT_SURRENDER_P2P_PK_OK); using struct_t = MSG_FC_BATTLE_REJECT_SURRENDER_P2P_PK_OK; };
	template<> struct info<T_FC_BATTLE_END_P2P_PK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_END_P2P_PK); using struct_t = MSG_FC_BATTLE_END_P2P_PK; };
	template<> struct info<T_FC_BATTLE_ATTACK_EXPLODE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_EXPLODE_ITEM); using struct_t = MSG_FC_BATTLE_ATTACK_EXPLODE_ITEM; };
	template<> struct info<T_FC_BATTLE_ATTACK_HIDE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_HIDE_ITEM); using struct_t = MSG_FC_BATTLE_ATTACK_HIDE_ITEM; };
	template<> struct info<T_FC_BATTLE_ATTACK_EXPLODE_ITEM_W_KIND> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_EXPLODE_ITEM_W_KIND); using struct_t = MSG_FC_BATTLE_ATTACK_EXPLODE_ITEM_W_KIND; };
	template<> struct info<T_FC_BATTLE_ATTACK_HIDE_ITEM_W_KIND> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_HIDE_ITEM_W_KIND); using struct_t = MSG_FC_BATTLE_ATTACK_HIDE_ITEM_W_KIND; };
	template<> struct info<T_FC_BATTLE_TOGGLE_SHIELD_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_TOGGLE_SHIELD_RESULT); using struct_t = MSG_FC_BATTLE_TOGGLE_SHIELD_RESULT; };
	template<> struct info<T_FC_BATTLE_DROP_DUMMY> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_DROP_DUMMY); using struct_t = MSG_FC_BATTLE_DROP_DUMMY; };
	template<> struct info<T_FC_BATTLE_DROP_DUMMY_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_DROP_DUMMY_OK); using struct_t = MSG_FC_BATTLE_DROP_DUMMY_OK; };
	template<> struct info<T_FC_BATTLE_DROP_FIXER> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_DROP_FIXER); using struct_t = MSG_FC_BATTLE_DROP_FIXER; };
	template<> struct info<T_FC_BATTLE_DROP_FIXER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_DROP_FIXER_OK); using struct_t = MSG_FC_BATTLE_DROP_FIXER_OK; };
	template<> struct info<T_FC_BATTLE_PRI_BULLET_RELOADED> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_PRI_BULLET_RELOADED); using struct_t = MSG_FC_BATTLE_PRI_BULLET_RELOADED; };
	template<> struct info<T_FC_BATTLE_SEC_BULLET_RELOADED> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_SEC_BULLET_RELOADED); using struct_t = MSG_FC_BATTLE_SEC_BULLET_RELOADED; };
	template<> struct info<T_FC_BATTLE_SHIELD_DAMAGE> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_SHIELD_DAMAGE); using struct_t = MSG_FC_BATTLE_SHIELD_DAMAGE; };
	template<> struct info<T_FC_BATTLE_TOGGLE_DECOY_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_TOGGLE_DECOY_OK); using struct_t = MSG_FC_BATTLE_TOGGLE_DECOY_OK; };
	template<> struct info<T_FC_BATTLE_SHOW_DAMAGE> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_SHOW_DAMAGE); using struct_t = MSG_FC_BATTLE_SHOW_DAMAGE; };
	template<> struct info<T_FC_BATTLE_ATTACK_EVASION> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_EVASION); using struct_t = MSG_FC_BATTLE_ATTACK_EVASION; };
	template<> struct info<T_FC_BATTLE_ATTACK_EVASION_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_ATTACK_EVASION_OK); using struct_t = MSG_FC_BATTLE_ATTACK_EVASION_OK; };
	template<> struct info<T_FC_BATTLE_DELETE_DUMMY_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_DELETE_DUMMY_OK); using struct_t = MSG_FC_BATTLE_DELETE_DUMMY_OK; };
	template<> struct info<T_FC_BATTLE_EXPLODE_DUMMY_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_EXPLODE_DUMMY_OK); using struct_t = MSG_FC_BATTLE_EXPLODE_DUMMY_OK; };
	template<> struct info<T_FC_BATTLE_MONSTER_BARRIER_USING> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_MONSTER_BARRIER_USING); using struct_t = MSG_FC_BATTLE_MONSTER_BARRIER_USING; };
	template<> struct info<T_FC_BATTLE_MONSTER_BARRIER_USE> { static constexpr size_t msg_size = sizeof(MSG_FC_BATTLE_MONSTER_BARRIER_USE); using struct_t = MSG_FC_BATTLE_MONSTER_BARRIER_USE; };
	template<> struct info<T_FP_CONNECT_AUTH_USER> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_AUTH_USER); using struct_t = MSG_FP_CONNECT_AUTH_USER; };
	template<> struct info<T_FP_CONNECT_AUTH_USER_OK> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_AUTH_USER_OK); using struct_t = MSG_FP_CONNECT_AUTH_USER_OK; };
	template<> struct info<T_FP_CONNECT_FIELD_CONNECT> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_FIELD_CONNECT); using struct_t = MSG_FP_CONNECT_FIELD_CONNECT; };
	template<> struct info<T_FP_CONNECT_FIELD_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_FIELD_CONNECT_OK); using struct_t = MSG_FP_CONNECT_FIELD_CONNECT_OK; };
	template<> struct info<T_FP_CONNECT_NOTIFY_CLOSE> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_NOTIFY_CLOSE); using struct_t = MSG_FP_CONNECT_NOTIFY_CLOSE; };
	template<> struct info<T_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE); using struct_t = MSG_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE; };
	template<> struct info<T_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE_OK> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE_OK); using struct_t = MSG_FP_CONNECT_NOTIFY_FIELDSERVER_CHANGE_OK; };
	template<> struct info<T_FP_CONNECT_UPDATE_DBSERVER_GROUP> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_UPDATE_DBSERVER_GROUP); using struct_t = MSG_FP_CONNECT_UPDATE_DBSERVER_GROUP; };
	template<> struct info<T_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT); using struct_t = MSG_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT; };
	template<> struct info<T_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT_OK> { static constexpr size_t msg_size = sizeof(MSG_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT_OK); using struct_t = MSG_FP_CONNECT_CHECK_CONNECTABLE_ACCOUNT_OK; };
	template<> struct info<T_FP_AUTHENTICATION_SHUTDOWN> { static constexpr size_t msg_size = sizeof(MSG_FP_AUTHENTICATION_SHUTDOWN); using struct_t = MSG_FP_AUTHENTICATION_SHUTDOWN; };
	template<> struct info<T_IP_CONNECT_IM_CONNECT> { static constexpr size_t msg_size = sizeof(MSG_IP_CONNECT_IM_CONNECT); using struct_t = MSG_IP_CONNECT_IM_CONNECT; };
	template<> struct info<T_IP_GET_SERVER_GROUP_INFO_ACK> { static constexpr size_t msg_size = sizeof(MSG_IP_GET_SERVER_GROUP_INFO_ACK); using struct_t = MSG_IP_GET_SERVER_GROUP_INFO_ACK; };
	template<> struct info<T_IP_ADMIN_PETITION_SET_PERIOD> { static constexpr size_t msg_size = sizeof(MSG_IP_ADMIN_PETITION_SET_PERIOD); using struct_t = MSG_IP_ADMIN_PETITION_SET_PERIOD; };
	template<> struct info<T_IP_AUTHENTICATION_SHUTDOWN> { static constexpr size_t msg_size = sizeof(MSG_IP_AUTHENTICATION_SHUTDOWN); using struct_t = MSG_IP_AUTHENTICATION_SHUTDOWN; };
	template<> struct info<T_IP_SELECTIVE_SHUTDOWN_NOTICE> { static constexpr size_t msg_size = sizeof(MSG_IP_SELECTIVE_SHUTDOWN_NOTICE); using struct_t = MSG_IP_SELECTIVE_SHUTDOWN_NOTICE; };
	template<> struct info<T_FI_CONNECT> { static constexpr size_t msg_size = sizeof(MSG_FI_CONNECT); using struct_t = MSG_FI_CONNECT; };
	template<> struct info<T_FI_CONNECT_NOTIFY_FIELDSERVER_IP> { static constexpr size_t msg_size = sizeof(MSG_FI_CONNECT_NOTIFY_FIELDSERVER_IP); using struct_t = MSG_FI_CONNECT_NOTIFY_FIELDSERVER_IP; };
	template<> struct info<T_FI_CONNECT_NOTIFY_GAMEEND> { static constexpr size_t msg_size = sizeof(MSG_FI_CONNECT_NOTIFY_GAMEEND); using struct_t = MSG_FI_CONNECT_NOTIFY_GAMEEND; };
	template<> struct info<T_FI_CONNECT_NOTIFY_DEAD> { static constexpr size_t msg_size = sizeof(MSG_FI_CONNECT_NOTIFY_DEAD); using struct_t = MSG_FI_CONNECT_NOTIFY_DEAD; };
	template<> struct info<T_FI_GET_FIELD_USER_COUNTS_ACK> { static constexpr size_t msg_size = sizeof(MSG_FI_GET_FIELD_USER_COUNTS_ACK); using struct_t = MSG_FI_GET_FIELD_USER_COUNTS_ACK; };
	template<> struct info<T_FI_CONNECT_NOTIFY_GAMESTART> { static constexpr size_t msg_size = sizeof(MSG_FI_CONNECT_NOTIFY_GAMESTART); using struct_t = MSG_FI_CONNECT_NOTIFY_GAMESTART; };
	template<> struct info<T_FI_CONNECT_NOTIFY_DEAD_GAMESTART> { static constexpr size_t msg_size = sizeof(MSG_FI_CONNECT_NOTIFY_DEAD_GAMESTART); using struct_t = MSG_FI_CONNECT_NOTIFY_DEAD_GAMESTART; };
	template<> struct info<T_FI_CONNECT_PREPARE_SHUTDOWN> { static constexpr size_t msg_size = sizeof(MSG_FI_CONNECT_PREPARE_SHUTDOWN); using struct_t = MSG_FI_CONNECT_PREPARE_SHUTDOWN; };
	template<> struct info<T_IC_CONNECT_CLOSE> { static constexpr size_t msg_size = sizeof(MSG_IC_CONNECT_CLOSE); using struct_t = MSG_IC_CONNECT_CLOSE; };
	template<> struct info<T_IC_CONNECT_LOGIN> { static constexpr size_t msg_size = sizeof(MSG_IC_CONNECT_LOGIN); using struct_t = MSG_IC_CONNECT_LOGIN; };
	template<> struct info<T_PM_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_PM_CONNECT_OK); using struct_t = MSG_PM_CONNECT_OK; };
	template<> struct info<T_FM_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_FM_CONNECT_OK); using struct_t = MSG_FM_CONNECT_OK; };
	template<> struct info<T_IM_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_IM_CONNECT_OK); using struct_t = MSG_IM_CONNECT_OK; };
	template<> struct info<T_NM_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_NM_CONNECT_OK); using struct_t = MSG_NM_CONNECT_OK; };
	template<> struct info<T_FtoA_MFSINFO> { static constexpr size_t msg_size = sizeof(MSG_FtoA_MFSINFO); using struct_t = MSG_FtoA_MFSINFO; };
	template<> struct info<T_FtoA_AUTH_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FtoA_AUTH_CHARACTER); using struct_t = MSG_FtoA_AUTH_CHARACTER; };
	template<> struct info<T_FtoA_AUTH_CHARACTER_OK> { static constexpr size_t msg_size = sizeof(MSG_FtoA_AUTH_CHARACTER_OK); using struct_t = MSG_FtoA_AUTH_CHARACTER_OK; };
	template<> struct info<T_FtoA_ARENA_STATE_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_STATE_CHANGE); using struct_t = MSG_FtoA_ARENA_STATE_CHANGE; };
	template<> struct info<T_FtoA_ARENA_TEAM_MATCHING> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_TEAM_MATCHING); using struct_t = MSG_FtoA_ARENA_TEAM_MATCHING; };
	template<> struct info<T_FtoA_ARENA_TEAM_MATCHING_OK> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_TEAM_MATCHING_OK); using struct_t = MSG_FtoA_ARENA_TEAM_MATCHING_OK; };
	template<> struct info<T_FtoA_ARENA_SERVER_PAY> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_SERVER_PAY); using struct_t = MSG_FtoA_ARENA_SERVER_PAY; };
	template<> struct info<T_FtoA_ARENA_CHARACTER_PAY> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_CHARACTER_PAY); using struct_t = MSG_FtoA_ARENA_CHARACTER_PAY; };
	template<> struct info<T_FtoA_ARENA_CHARACTER_DISCONNECT> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_CHARACTER_DISCONNECT); using struct_t = MSG_FtoA_ARENA_CHARACTER_DISCONNECT; };
	template<> struct info<T_FtoA_ARENA_CHARACTERARENAINFO_UPDATA> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_CHARACTERARENAINFO_UPDATA); using struct_t = MSG_FtoA_ARENA_CHARACTERARENAINFO_UPDATA; };
	template<> struct info<T_FtoA_ARENA_CHARACTER_RESET_RELOAD> { static constexpr size_t msg_size = sizeof(MSG_FtoA_ARENA_CHARACTER_RESET_RELOAD); using struct_t = MSG_FtoA_ARENA_CHARACTER_RESET_RELOAD; };
	template<> struct info<T_FtoA_INFINITY_IMPUTE_LIST> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_IMPUTE_LIST); using struct_t = MSG_FtoA_INFINITY_IMPUTE_LIST; };
	template<> struct info<T_FtoA_INFINITY_START> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_START); using struct_t = MSG_FtoA_INFINITY_START; };
	template<> struct info<T_FtoA_INFINITY_START_OK> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_START_OK); using struct_t = MSG_FtoA_INFINITY_START_OK; };
	template<> struct info<T_FtoA_INFINITY_IMPUTE> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_IMPUTE); using struct_t = MSG_FtoA_INFINITY_IMPUTE; };
	template<> struct info<T_FtoA_INFINITY_UPDATE_ALL_ITEM_COUNT> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_UPDATE_ALL_ITEM_COUNT); using struct_t = MSG_FtoA_INFINITY_UPDATE_ALL_ITEM_COUNT; };
	template<> struct info<T_FtoA_INFINITY_INSERT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_INSERT_ITEM); using struct_t = MSG_FtoA_INFINITY_INSERT_ITEM; };
	template<> struct info<T_FtoA_INFINITY_UPDATE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_UPDATE_ITEM); using struct_t = MSG_FtoA_INFINITY_UPDATE_ITEM; };
	template<> struct info<T_FtoA_INFINITY_DELETE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_DELETE_ITEM); using struct_t = MSG_FtoA_INFINITY_DELETE_ITEM; };
	template<> struct info<T_FtoA_INFINITY_UPDATE_USER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_UPDATE_USER_INFO); using struct_t = MSG_FtoA_INFINITY_UPDATE_USER_INFO; };
	template<> struct info<T_FtoA_INFINITY_READY_FINISH_MAINSVR_START> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_READY_FINISH_MAINSVR_START); using struct_t = MSG_FtoA_INFINITY_READY_FINISH_MAINSVR_START; };
	template<> struct info<T_FtoA_INFINITY_LOG> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_LOG); using struct_t = MSG_FtoA_INFINITY_LOG; };
	template<> struct info<T_FtoA_INFINITY_USING_TIME_LIMIT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_USING_TIME_LIMIT_ITEM); using struct_t = MSG_FtoA_INFINITY_USING_TIME_LIMIT_ITEM; };
	template<> struct info<T_FtoA_INFINITY_STATE_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_STATE_CHANGE); using struct_t = MSG_FtoA_INFINITY_STATE_CHANGE; };
	template<> struct info<T_FtoA_INFINITY_START_CHECK> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_START_CHECK); using struct_t = MSG_FtoA_INFINITY_START_CHECK; };
	template<> struct info<T_FtoA_INFINITY_START_CHECK_ACK> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_START_CHECK_ACK); using struct_t = MSG_FtoA_INFINITY_START_CHECK_ACK; };
	template<> struct info<T_FtoA_UPDATE_ITEM_NOTI> { static constexpr size_t msg_size = sizeof(MSG_FtoA_UPDATE_ITEM_NOTI); using struct_t = MSG_FtoA_UPDATE_ITEM_NOTI; };
	template<> struct info<T_FtoA_INFINITY_UPDATE_USER_MAP_INFO> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_UPDATE_USER_MAP_INFO); using struct_t = MSG_FtoA_INFINITY_UPDATE_USER_MAP_INFO; };
	template<> struct info<T_FtoA_INFINITY_COME_BACK_PREWORK> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_COME_BACK_PREWORK); using struct_t = MSG_FtoA_INFINITY_COME_BACK_PREWORK; };
	template<> struct info<T_FtoA_INFINITY_UPDATE_ITEM_PET> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_UPDATE_ITEM_PET); using struct_t = MSG_FtoA_INFINITY_UPDATE_ITEM_PET; };
	template<> struct info<T_FtoA_INFINITY_COME_BACK_POSTWORK> { static constexpr size_t msg_size = sizeof(MSG_FtoA_INFINITY_COME_BACK_POSTWORK); using struct_t = MSG_FtoA_INFINITY_COME_BACK_POSTWORK; };
	template<> struct info<T_PP_CONNECT> { static constexpr size_t msg_size = sizeof(MSG_PP_CONNECT); using struct_t = MSG_PP_CONNECT; };
	template<> struct info<T_PP_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_PP_CONNECT_OK); using struct_t = MSG_PP_CONNECT_OK; };
	template<> struct info<T_FC_ADMIN_GET_SERVER_STAT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ADMIN_GET_SERVER_STAT_OK); using struct_t = MSG_FC_ADMIN_GET_SERVER_STAT_OK; };
	template<> struct info<T_FC_CONNECT_CLOSE> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_CLOSE); using struct_t = MSG_FC_CONNECT_CLOSE; };
	template<> struct info<T_FC_CONNECT_LOGIN> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_LOGIN); using struct_t = MSG_FC_CONNECT_LOGIN; };
	template<> struct info<T_FC_CONNECT_LOGIN_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_LOGIN_OK); using struct_t = MSG_FC_CONNECT_LOGIN_OK; };
	template<> struct info<T_FC_CONNECT_SYNC_TIME> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_SYNC_TIME); using struct_t = MSG_FC_CONNECT_SYNC_TIME; };
	template<> struct info<T_FC_CONNECT_NETWORK_CHECK> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_NETWORK_CHECK); using struct_t = MSG_FC_CONNECT_NETWORK_CHECK; };
	template<> struct info<T_FC_CONNECT_NETWORK_CHECK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_NETWORK_CHECK_OK); using struct_t = MSG_FC_CONNECT_NETWORK_CHECK_OK; };
	template<> struct info<T_FC_CONNECT_ARENASERVER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_ARENASERVER_INFO); using struct_t = MSG_FC_CONNECT_ARENASERVER_INFO; };
	template<> struct info<T_FC_CONNECT_ARENASERVER_LOGIN> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_ARENASERVER_LOGIN); using struct_t = MSG_FC_CONNECT_ARENASERVER_LOGIN; };
	template<> struct info<T_FC_CONNECT_ARENASERVER_LOGIN_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_ARENASERVER_LOGIN_OK); using struct_t = MSG_FC_CONNECT_ARENASERVER_LOGIN_OK; };
	template<> struct info<T_FC_CONNECT_ARENASERVER_SSERVER_GROUP_FOR_CLIENT> { static constexpr size_t msg_size = sizeof(MSG_FC_CONNECT_ARENASERVER_SSERVER_GROUP_FOR_CLIENT); using struct_t = MSG_FC_CONNECT_ARENASERVER_SSERVER_GROUP_FOR_CLIENT; };
	template<> struct info<T_FC_CHARACTER_CREATE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CREATE); using struct_t = MSG_FC_CHARACTER_CREATE; };
	template<> struct info<T_FC_CHARACTER_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CREATE_OK); using struct_t = MSG_FC_CHARACTER_CREATE_OK; };
	template<> struct info<T_FC_CHARACTER_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DELETE); using struct_t = MSG_FC_CHARACTER_DELETE; };
	template<> struct info<T_FC_CHARACTER_GET_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_CHARACTER); using struct_t = MSG_FC_CHARACTER_GET_CHARACTER; };
	template<> struct info<T_FC_CHARACTER_GET_CHARACTER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_CHARACTER_OK); using struct_t = MSG_FC_CHARACTER_GET_CHARACTER_OK; };
	template<> struct info<T_FC_CHARACTER_GAMESTART> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GAMESTART); using struct_t = MSG_FC_CHARACTER_GAMESTART; };
	template<> struct info<T_FC_CHARACTER_GAMESTART_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GAMESTART_OK); using struct_t = MSG_FC_CHARACTER_GAMESTART_OK; };
	template<> struct info<T_FC_CHARACTER_CONNECT_GAMESTART> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CONNECT_GAMESTART); using struct_t = MSG_FC_CHARACTER_CONNECT_GAMESTART; };
	template<> struct info<T_FC_CHARACTER_CONNECT_GAMESTART_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CONNECT_GAMESTART_OK); using struct_t = MSG_FC_CHARACTER_CONNECT_GAMESTART_OK; };
	template<> struct info<T_FC_CHARACTER_GAMEEND> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GAMEEND); using struct_t = MSG_FC_CHARACTER_GAMEEND; };
	template<> struct info<T_FC_CHARACTER_GAMEEND_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GAMEEND_OK); using struct_t = MSG_FC_CHARACTER_GAMEEND_OK; };
	template<> struct info<T_FC_CHARACTER_REPAIR> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_REPAIR); using struct_t = MSG_FC_CHARACTER_REPAIR; };
	template<> struct info<T_FC_CHARACTER_REPAIR_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_REPAIR_OK); using struct_t = MSG_FC_CHARACTER_REPAIR_OK; };
	template<> struct info<T_FC_CHARACTER_REPAIR_ERR> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_REPAIR_ERR); using struct_t = MSG_FC_CHARACTER_REPAIR_ERR; };
	template<> struct info<T_FC_CHARACTER_DOCKING> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DOCKING); using struct_t = MSG_FC_CHARACTER_DOCKING; };
	template<> struct info<T_FC_CHARACTER_UNDOCKING> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_UNDOCKING); using struct_t = MSG_FC_CHARACTER_UNDOCKING; };
	template<> struct info<T_FC_CHARACTER_DOCKING_ERR> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DOCKING_ERR); using struct_t = MSG_FC_CHARACTER_DOCKING_ERR; };
	template<> struct info<T_FC_CHARACTER_GET_OTHER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_OTHER_INFO); using struct_t = MSG_FC_CHARACTER_GET_OTHER_INFO; };
	template<> struct info<T_FC_CHARACTER_GET_OTHER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_OTHER_INFO_OK); using struct_t = MSG_FC_CHARACTER_GET_OTHER_INFO_OK; };
	template<> struct info<T_FC_CHARACTER_GET_MONSTER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_MONSTER_INFO_OK); using struct_t = MSG_FC_CHARACTER_GET_MONSTER_INFO_OK; };
	template<> struct info<T_FC_CHARACTER_CHANGE_UNITKIND> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_UNITKIND); using struct_t = MSG_FC_CHARACTER_CHANGE_UNITKIND; };
	template<> struct info<T_FC_CHARACTER_CHANGE_STAT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_STAT); using struct_t = MSG_FC_CHARACTER_CHANGE_STAT; };
	template<> struct info<T_FC_CHARACTER_CHANGE_TOTALGEAR_STAT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_TOTALGEAR_STAT); using struct_t = MSG_FC_CHARACTER_CHANGE_TOTALGEAR_STAT; };
	template<> struct info<T_FC_CHARACTER_CHANGE_EXP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_EXP); using struct_t = MSG_FC_CHARACTER_CHANGE_EXP; };
	template<> struct info<T_FC_CHARACTER_CHANGE_BODYCONDITION> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_BODYCONDITION); using struct_t = MSG_FC_CHARACTER_CHANGE_BODYCONDITION; };
	template<> struct info<T_FC_CHARACTER_CHANGE_BODYCONDITION_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_BODYCONDITION_SKILL); using struct_t = MSG_FC_CHARACTER_CHANGE_BODYCONDITION_SKILL; };
	template<> struct info<T_FC_CHARACTER_CHANGE_INFLUENCE_TYPE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_INFLUENCE_TYPE); using struct_t = MSG_FC_CHARACTER_CHANGE_INFLUENCE_TYPE; };
	template<> struct info<T_FC_CHARACTER_CHANGE_STATUS> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_STATUS); using struct_t = MSG_FC_CHARACTER_CHANGE_STATUS; };
	template<> struct info<T_FC_CHARACTER_CHANGE_PKPOINT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_PKPOINT); using struct_t = MSG_FC_CHARACTER_CHANGE_PKPOINT; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CURRENTHPDPSPEP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CURRENTHPDPSPEP); using struct_t = MSG_FC_CHARACTER_CHANGE_CURRENTHPDPSPEP; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CURRENTHP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CURRENTHP); using struct_t = MSG_FC_CHARACTER_CHANGE_CURRENTHP; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CURRENTDP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CURRENTDP); using struct_t = MSG_FC_CHARACTER_CHANGE_CURRENTDP; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CURRENTSP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CURRENTSP); using struct_t = MSG_FC_CHARACTER_CHANGE_CURRENTSP; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CURRENTEP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CURRENTEP); using struct_t = MSG_FC_CHARACTER_CHANGE_CURRENTEP; };
	template<> struct info<T_FC_CHARACTER_CHANGE_MAPNAME> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_MAPNAME); using struct_t = MSG_FC_CHARACTER_CHANGE_MAPNAME; };
	template<> struct info<T_FC_CHARACTER_CHANGE_PETINFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_PETINFO); using struct_t = MSG_FC_CHARACTER_CHANGE_PETINFO; };
	template<> struct info<T_FC_CHARACTER_CHANGE_POSITION> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_POSITION); using struct_t = MSG_FC_CHARACTER_CHANGE_POSITION; };
	template<> struct info<T_FC_CHARACTER_CHANGE_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_LEVEL); using struct_t = MSG_FC_CHARACTER_CHANGE_LEVEL; };
	template<> struct info<T_FC_CHARACTER_USE_BONUSSTAT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_USE_BONUSSTAT); using struct_t = MSG_FC_CHARACTER_USE_BONUSSTAT; };
	template<> struct info<T_FC_CHARACTER_DEAD_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DEAD_NOTIFY); using struct_t = MSG_FC_CHARACTER_DEAD_NOTIFY; };
	template<> struct info<T_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER); using struct_t = MSG_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER; };
	template<> struct info<T_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER_OK); using struct_t = MSG_FC_CHARACTER_GET_ACCOUNTUNIQUENUMBER_OK; };
	template<> struct info<T_FC_CHARACTER_APPLY_COLLISION_DAMAGE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_APPLY_COLLISION_DAMAGE); using struct_t = MSG_FC_CHARACTER_APPLY_COLLISION_DAMAGE; };
	template<> struct info<T_FC_CHARACTER_GET_OTHER_MOVE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_OTHER_MOVE); using struct_t = MSG_FC_CHARACTER_GET_OTHER_MOVE; };
	template<> struct info<T_FC_CHARACTER_DELETE_OTHER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DELETE_OTHER_INFO); using struct_t = MSG_FC_CHARACTER_DELETE_OTHER_INFO; };
	template<> struct info<T_FC_CHARACTER_DEAD_GAMESTART> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DEAD_GAMESTART); using struct_t = MSG_FC_CHARACTER_DEAD_GAMESTART; };
	template<> struct info<T_FC_CHARACTER_OTHER_REVIVED> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_OTHER_REVIVED); using struct_t = MSG_FC_CHARACTER_OTHER_REVIVED; };
	template<> struct info<T_FC_CHARACTER_GET_OTHER_RENDER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_OTHER_RENDER_INFO); using struct_t = MSG_FC_CHARACTER_GET_OTHER_RENDER_INFO; };
	template<> struct info<T_FC_CHARACTER_GET_OTHER_RENDER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_OTHER_RENDER_INFO_OK); using struct_t = MSG_FC_CHARACTER_GET_OTHER_RENDER_INFO_OK; };
	template<> struct info<T_FC_CHARACTER_CHANGE_BODYCONDITION_ALL> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_BODYCONDITION_ALL); using struct_t = MSG_FC_CHARACTER_CHANGE_BODYCONDITION_ALL; };
	template<> struct info<T_FC_CHARACTER_CHANGE_PROPENSITY> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_PROPENSITY); using struct_t = MSG_FC_CHARACTER_CHANGE_PROPENSITY; };
	template<> struct info<T_FC_CHARACTER_CHANGE_HPDPSPEP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_HPDPSPEP); using struct_t = MSG_FC_CHARACTER_CHANGE_HPDPSPEP; };
	template<> struct info<T_FC_CHARACTER_SHOW_EFFECT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_SHOW_EFFECT); using struct_t = MSG_FC_CHARACTER_SHOW_EFFECT; };
	template<> struct info<T_FC_CHARACTER_SHOW_EFFECT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_SHOW_EFFECT_OK); using struct_t = MSG_FC_CHARACTER_SHOW_EFFECT_OK; };
	template<> struct info<T_FC_CHARACTER_GET_OTHER_PARAMFACTOR> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_OTHER_PARAMFACTOR); using struct_t = MSG_FC_CHARACTER_GET_OTHER_PARAMFACTOR; };
	template<> struct info<T_FC_CHARACTER_GET_OTHER_PARAMFACTOR_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_OTHER_PARAMFACTOR_OK); using struct_t = MSG_FC_CHARACTER_GET_OTHER_PARAMFACTOR_OK; };
	template<> struct info<T_FC_CHARACTER_SEND_PARAMFACTOR_IN_RANGE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_SEND_PARAMFACTOR_IN_RANGE); using struct_t = MSG_FC_CHARACTER_SEND_PARAMFACTOR_IN_RANGE; };
	template<> struct info<T_FC_CHARACTER_SPEED_HACK_USER> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_SPEED_HACK_USER); using struct_t = MSG_FC_CHARACTER_SPEED_HACK_USER; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CHARACTER_MENT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CHARACTER_MENT); using struct_t = MSG_FC_CHARACTER_CHANGE_CHARACTER_MENT; };
	template<> struct info<T_FC_CHARACTER_GET_CASH_MONEY_COUNT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_CASH_MONEY_COUNT_OK); using struct_t = MSG_FC_CHARACTER_GET_CASH_MONEY_COUNT_OK; };
	template<> struct info<T_FC_CHARACTER_CASH_PREMIUM_CARD_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CASH_PREMIUM_CARD_INFO); using struct_t = MSG_FC_CHARACTER_CASH_PREMIUM_CARD_INFO; };
	template<> struct info<T_FC_CHARACTER_TUTORIAL_SKIP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_TUTORIAL_SKIP); using struct_t = MSG_FC_CHARACTER_TUTORIAL_SKIP; };
	template<> struct info<T_FC_CHARACTER_TUTORIAL_SKIP_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_TUTORIAL_SKIP_OK); using struct_t = MSG_FC_CHARACTER_TUTORIAL_SKIP_OK; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CHARACTER_MODE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CHARACTER_MODE); using struct_t = MSG_FC_CHARACTER_CHANGE_CHARACTER_MODE; };
	template<> struct info<T_FC_CHARACTER_CHANGE_CHARACTER_MODE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_CHARACTER_MODE_OK); using struct_t = MSG_FC_CHARACTER_CHANGE_CHARACTER_MODE_OK; };
	template<> struct info<T_FC_CHARACTER_GET_REAL_WEAPON_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_REAL_WEAPON_INFO_OK); using struct_t = MSG_FC_CHARACTER_GET_REAL_WEAPON_INFO_OK; };
	template<> struct info<T_FC_CHARACTER_GET_REAL_ENGINE_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_REAL_ENGINE_INFO_OK); using struct_t = MSG_FC_CHARACTER_GET_REAL_ENGINE_INFO_OK; };
	template<> struct info<T_FC_CHARACTER_GET_REAL_TOTAL_WEIGHT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_REAL_TOTAL_WEIGHT_OK); using struct_t = MSG_FC_CHARACTER_GET_REAL_TOTAL_WEIGHT_OK; };
	template<> struct info<T_FC_CHARACTER_MEMORY_HACK_USER> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_MEMORY_HACK_USER); using struct_t = MSG_FC_CHARACTER_MEMORY_HACK_USER; };
	template<> struct info<T_FC_CHARACTER_USE_BONUSSTAT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_USE_BONUSSTAT_OK); using struct_t = MSG_FC_CHARACTER_USE_BONUSSTAT_OK; };
	template<> struct info<T_FC_CHARACTER_UPDATE_SUBLEADER> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_UPDATE_SUBLEADER); using struct_t = MSG_FC_CHARACTER_UPDATE_SUBLEADER; };
	template<> struct info<T_FC_CHARACTER_OBSERVER_START> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_OBSERVER_START); using struct_t = MSG_FC_CHARACTER_OBSERVER_START; };
	template<> struct info<T_FC_CHARACTER_UPDATE_SUBLEADER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_UPDATE_SUBLEADER_OK); using struct_t = MSG_FC_CHARACTER_UPDATE_SUBLEADER_OK; };
	template<> struct info<T_FC_CHARACTER_OBSERVER_END> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_OBSERVER_END); using struct_t = MSG_FC_CHARACTER_OBSERVER_END; };
	template<> struct info<T_FC_CHARACTER_OBSERVER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_OBSERVER_INFO); using struct_t = MSG_FC_CHARACTER_OBSERVER_INFO; };
	template<> struct info<T_FC_CHARACTER_OBSERVER_REG> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_OBSERVER_REG); using struct_t = MSG_FC_CHARACTER_OBSERVER_REG; };
	template<> struct info<T_FC_CHARACTER_SHOW_MAP_EFFECT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_SHOW_MAP_EFFECT); using struct_t = MSG_FC_CHARACTER_SHOW_MAP_EFFECT; };
	template<> struct info<T_FC_CHARACTER_SHOW_MAP_EFFECT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_SHOW_MAP_EFFECT_OK); using struct_t = MSG_FC_CHARACTER_SHOW_MAP_EFFECT_OK; };
	template<> struct info<T_FC_CHARACTER_PAY_WARPOINT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_PAY_WARPOINT); using struct_t = MSG_FC_CHARACTER_PAY_WARPOINT; };
	template<> struct info<T_FC_CHARACTER_WATCH_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_WATCH_INFO); using struct_t = MSG_FC_CHARACTER_WATCH_INFO; };
	template<> struct info<T_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER); using struct_t = MSG_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER; };
	template<> struct info<T_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER_OK); using struct_t = MSG_FC_CHARACTER_READY_GAMESTART_FROM_ARENA_TO_MAINSERVER_OK; };
	template<> struct info<T_FC_CHARACTER_GAMESTART_FROM_ARENA_TO_MAINSERVER> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GAMESTART_FROM_ARENA_TO_MAINSERVER); using struct_t = MSG_FC_CHARACTER_GAMESTART_FROM_ARENA_TO_MAINSERVER; };
	template<> struct info<T_FC_CHARACTER_GET_USER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_USER_INFO); using struct_t = MSG_FC_CHARACTER_GET_USER_INFO; };
	template<> struct info<T_FC_CHARACTER_GET_USER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_USER_INFO_OK); using struct_t = MSG_FC_CHARACTER_GET_USER_INFO_OK; };
	template<> struct info<T_FC_CHARACTER_CHANGE_INFO_OPTION_SECRET> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_INFO_OPTION_SECRET); using struct_t = MSG_FC_CHARACTER_CHANGE_INFO_OPTION_SECRET; };
	template<> struct info<T_FC_CHARACTER_CHANGE_NICKNAME> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_NICKNAME); using struct_t = MSG_FC_CHARACTER_CHANGE_NICKNAME; };
	template<> struct info<T_FC_CHARACTER_CHANGE_NICKNAME_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_NICKNAME_OK); using struct_t = MSG_FC_CHARACTER_CHANGE_NICKNAME_OK; };
	template<> struct info<T_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX); using struct_t = MSG_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX; };
	template<> struct info<T_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX_OK); using struct_t = MSG_FC_CHARACTER_CHANGE_START_CITY_MAPINDEX_OK; };
	template<> struct info<T_FC_CHARACTER_CHANGE_ADDED_INVENTORY_COUNT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_CHANGE_ADDED_INVENTORY_COUNT); using struct_t = MSG_FC_CHARACTER_CHANGE_ADDED_INVENTORY_COUNT; };
	template<> struct info<T_FC_CHARACTER_DEBUFF_DOT_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DEBUFF_DOT_INFO); using struct_t = MSG_FC_CHARACTER_DEBUFF_DOT_INFO; };
	template<> struct info<T_FC_CHARACTER_DEBUFF_DOT_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DEBUFF_DOT_INFO_OK); using struct_t = MSG_FC_CHARACTER_DEBUFF_DOT_INFO_OK; };
	template<> struct info<T_FC_CHARACTER_DEBUFF_DOT_APPLYING> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DEBUFF_DOT_APPLYING); using struct_t = MSG_FC_CHARACTER_DEBUFF_DOT_APPLYING; };
	template<> struct info<T_FC_CHARACTER_DEBUFF_DOT_RELEASE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_DEBUFF_DOT_RELEASE); using struct_t = MSG_FC_CHARACTER_DEBUFF_DOT_RELEASE; };
	template<> struct info<T_FC_CHARACTER_GET_USER_ITEM_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_USER_ITEM_INFO); using struct_t = MSG_FC_CHARACTER_GET_USER_ITEM_INFO; };
	template<> struct info<T_FC_CHARACTER_GET_USER_ITEM_INFO_OK_DONE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_USER_ITEM_INFO_OK_DONE); using struct_t = MSG_FC_CHARACTER_GET_USER_ITEM_INFO_OK_DONE; };
	template<> struct info<T_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET); using struct_t = MSG_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET; };
	template<> struct info<T_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET_OK); using struct_t = MSG_FC_CHARACTER_GET_USER_ITEM_INFO_SECRET_OK; };
	template<> struct info<T_FC_CHARACTER_KILLCOUNT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_KILLCOUNT); using struct_t = MSG_FC_CHARACTER_KILLCOUNT; };
	template<> struct info<T_FC_CHARACTER_RESTCOUNT> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_RESTCOUNT); using struct_t = MSG_FC_CHARACTER_RESTCOUNT; };
	template<> struct info<T_FC_CHARACTER_BONUS_EXP_RATE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHARACTER_BONUS_EXP_RATE); using struct_t = MSG_FC_CHARACTER_BONUS_EXP_RATE; };
	template<> struct info<T_FC_CHAT_MAP> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_MAP); using struct_t = MSG_FC_CHAT_MAP; };
	template<> struct info<T_FC_CHAT_REGION> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_REGION); using struct_t = MSG_FC_CHAT_REGION; };
	template<> struct info<T_FC_CHAT_CASH_ALL> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_CASH_ALL); using struct_t = MSG_FC_CHAT_CASH_ALL; };
	template<> struct info<T_FC_CHAT_ARENA> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ARENA); using struct_t = MSG_FC_CHAT_ARENA; };
	template<> struct info<T_FC_CHAT_CNC> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_CNC); using struct_t = MSG_FC_CHAT_CNC; };
	template<> struct info<T_FC_CHAT_ALL_INFLUENCE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALL_INFLUENCE); using struct_t = MSG_FC_CHAT_ALL_INFLUENCE; };
	template<> struct info<T_FC_CHAT_OUTPOST_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_OUTPOST_GUILD); using struct_t = MSG_FC_CHAT_OUTPOST_GUILD; };
	template<> struct info<T_FC_CHAT_INFINITY> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_INFINITY); using struct_t = MSG_FC_CHAT_INFINITY; };
	template<> struct info<T_FC_CHAT_LETTER_REQUEST_TITLE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_LETTER_REQUEST_TITLE_OK); using struct_t = MSG_FC_CHAT_LETTER_REQUEST_TITLE_OK; };
	template<> struct info<T_FC_CHAT_LETTER_READ> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_LETTER_READ); using struct_t = MSG_FC_CHAT_LETTER_READ; };
	template<> struct info<T_FC_CHAT_LETTER_READ_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_LETTER_READ_OK); using struct_t = MSG_FC_CHAT_LETTER_READ_OK; };
	template<> struct info<T_FC_CHAT_LETTER_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_LETTER_DELETE); using struct_t = MSG_FC_CHAT_LETTER_DELETE; };
	template<> struct info<T_FC_CHAT_LETTER_DELETE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_LETTER_DELETE_OK); using struct_t = MSG_FC_CHAT_LETTER_DELETE_OK; };
	template<> struct info<T_FC_CHAT_LETTER_SEND> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_LETTER_SEND); using struct_t = MSG_FC_CHAT_LETTER_SEND; };
	template<> struct info<T_FC_CHAT_LETTER_RECEIVE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_LETTER_RECEIVE); using struct_t = MSG_FC_CHAT_LETTER_RECEIVE; };
	template<> struct info<T_FC_CHAT_ALLLETTER_REQUEST_TITLE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALLLETTER_REQUEST_TITLE_OK); using struct_t = MSG_FC_CHAT_ALLLETTER_REQUEST_TITLE_OK; };
	template<> struct info<T_FC_CHAT_ALLLETTER_READ> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALLLETTER_READ); using struct_t = MSG_FC_CHAT_ALLLETTER_READ; };
	template<> struct info<T_FC_CHAT_ALLLETTER_READ_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALLLETTER_READ_OK); using struct_t = MSG_FC_CHAT_ALLLETTER_READ_OK; };
	template<> struct info<T_FC_CHAT_ALLLETTER_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALLLETTER_DELETE); using struct_t = MSG_FC_CHAT_ALLLETTER_DELETE; };
	template<> struct info<T_FC_CHAT_ALLLETTER_DELETE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALLLETTER_DELETE_OK); using struct_t = MSG_FC_CHAT_ALLLETTER_DELETE_OK; };
	template<> struct info<T_FC_CHAT_ALLLETTER_SEND> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALLLETTER_SEND); using struct_t = MSG_FC_CHAT_ALLLETTER_SEND; };
	template<> struct info<T_FC_CHAT_ALLLETTER_RECEIVE> { static constexpr size_t msg_size = sizeof(MSG_FC_CHAT_ALLLETTER_RECEIVE); using struct_t = MSG_FC_CHAT_ALLLETTER_RECEIVE; };
	template<> struct info<T_FC_CITY_GET_BUILDING_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_GET_BUILDING_LIST); using struct_t = MSG_FC_CITY_GET_BUILDING_LIST; };
	template<> struct info<T_FC_CITY_GET_BUILDING_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_GET_BUILDING_LIST_OK); using struct_t = MSG_FC_CITY_GET_BUILDING_LIST_OK; };
	template<> struct info<T_FC_CITY_REQUEST_ENTER_BUILDING> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_REQUEST_ENTER_BUILDING); using struct_t = MSG_FC_CITY_REQUEST_ENTER_BUILDING; };
	template<> struct info<T_FC_CITY_REQUEST_ENTER_BUILDING_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_REQUEST_ENTER_BUILDING_OK); using struct_t = MSG_FC_CITY_REQUEST_ENTER_BUILDING_OK; };
	template<> struct info<T_FC_CITY_CHECK_WARP_STATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_CHECK_WARP_STATE_OK); using struct_t = MSG_FC_CITY_CHECK_WARP_STATE_OK; };
	template<> struct info<T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_HEADER> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_HEADER); using struct_t = MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK_HEADER; };
	template<> struct info<T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK); using struct_t = MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_LIST_OK; };
	template<> struct info<T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO); using struct_t = MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO; };
	template<> struct info<T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK); using struct_t = MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK; };
	template<> struct info<T_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK_GUILDMARK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK_GUILDMARK); using struct_t = MSG_FC_CITY_POLL_REQUEST_LEADER_CANDIDATE_INFO_OK_GUILDMARK; };
	template<> struct info<T_FC_CITY_POLL_REG_LEADER_CANDIDATE> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REG_LEADER_CANDIDATE); using struct_t = MSG_FC_CITY_POLL_REG_LEADER_CANDIDATE; };
	template<> struct info<T_FC_CITY_POLL_REG_LEADER_CANDIDATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REG_LEADER_CANDIDATE_OK); using struct_t = MSG_FC_CITY_POLL_REG_LEADER_CANDIDATE_OK; };
	template<> struct info<T_FC_CITY_POLL_DELETE_LEADER_CANDIDATE> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_DELETE_LEADER_CANDIDATE); using struct_t = MSG_FC_CITY_POLL_DELETE_LEADER_CANDIDATE; };
	template<> struct info<T_FC_CITY_POLL_VOTE> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_VOTE); using struct_t = MSG_FC_CITY_POLL_VOTE; };
	template<> struct info<T_FC_CITY_POLL_REQUEST_POLL_DATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_REQUEST_POLL_DATE_OK); using struct_t = MSG_FC_CITY_POLL_REQUEST_POLL_DATE_OK; };
	template<> struct info<T_FC_CITY_POLL_LEADER_ELECTION_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_POLL_LEADER_ELECTION_INFO); using struct_t = MSG_FC_CITY_POLL_LEADER_ELECTION_INFO; };
	template<> struct info<T_FC_CITY_WARINFO_INFLUENCE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_WARINFO_INFLUENCE_OK); using struct_t = MSG_FC_CITY_WARINFO_INFLUENCE_OK; };
	template<> struct info<T_FC_CITY_WARINFO_OUTPOST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITY_WARINFO_OUTPOST_OK); using struct_t = MSG_FC_CITY_WARINFO_OUTPOST_OK; };
	template<> struct info<T_FC_CLIENT_REPORT> { static constexpr size_t msg_size = sizeof(MSG_FC_CLIENT_REPORT); using struct_t = MSG_FC_CLIENT_REPORT; };
	template<> struct info<T_FC_EVENT_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_WARP); using struct_t = MSG_FC_EVENT_WARP; };
	template<> struct info<T_FC_EVENT_WARP_SAME_MAP> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_WARP_SAME_MAP); using struct_t = MSG_FC_EVENT_WARP_SAME_MAP; };
	template<> struct info<T_FC_EVENT_WARP_SAME_FIELD_SERVER> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_WARP_SAME_FIELD_SERVER); using struct_t = MSG_FC_EVENT_WARP_SAME_FIELD_SERVER; };
	template<> struct info<T_FC_EVENT_OTHER_WARPED> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_OTHER_WARPED); using struct_t = MSG_FC_EVENT_OTHER_WARPED; };
	template<> struct info<T_FC_EVENT_WARP_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_WARP_CONNECT_OK); using struct_t = MSG_FC_EVENT_WARP_CONNECT_OK; };
	template<> struct info<T_FC_EVENT_ENTER_BUILDING> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_ENTER_BUILDING); using struct_t = MSG_FC_EVENT_ENTER_BUILDING; };
	template<> struct info<T_FC_EVENT_ENTER_BUILDING_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_ENTER_BUILDING_OK); using struct_t = MSG_FC_EVENT_ENTER_BUILDING_OK; };
	template<> struct info<T_FC_EVENT_LEAVE_BUILDING> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_LEAVE_BUILDING); using struct_t = MSG_FC_EVENT_LEAVE_BUILDING; };
	template<> struct info<T_FC_EVENT_LEAVE_BUILDING_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_LEAVE_BUILDING_OK); using struct_t = MSG_FC_EVENT_LEAVE_BUILDING_OK; };
	template<> struct info<T_FC_EVENT_REQUEST_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_REQUEST_WARP); using struct_t = MSG_FC_EVENT_REQUEST_WARP; };
	template<> struct info<T_FC_EVENT_REJECT_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_REJECT_WARP); using struct_t = MSG_FC_EVENT_REJECT_WARP; };
	template<> struct info<T_FC_EVENT_REQUEST_OBJECT_EVENT> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_REQUEST_OBJECT_EVENT); using struct_t = MSG_FC_EVENT_REQUEST_OBJECT_EVENT; };
	template<> struct info<T_FC_EVENT_CHANGE_WEATHER> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_CHANGE_WEATHER); using struct_t = MSG_FC_EVENT_CHANGE_WEATHER; };
	template<> struct info<T_FC_EVENT_SUGGEST_CHANNELS> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_SUGGEST_CHANNELS); using struct_t = MSG_FC_EVENT_SUGGEST_CHANNELS; };
	template<> struct info<T_FC_EVENT_SELECT_CHANNEL> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_SELECT_CHANNEL); using struct_t = MSG_FC_EVENT_SELECT_CHANNEL; };
	template<> struct info<T_FC_EVENT_SELECT_CHANNEL_WITH_PARTY> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_SELECT_CHANNEL_WITH_PARTY); using struct_t = MSG_FC_EVENT_SELECT_CHANNEL_WITH_PARTY; };
	template<> struct info<T_FC_EVENT_REQUEST_RACING_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_REQUEST_RACING_WARP); using struct_t = MSG_FC_EVENT_REQUEST_RACING_WARP; };
	template<> struct info<T_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST); using struct_t = MSG_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST; };
	template<> struct info<T_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST_OK); using struct_t = MSG_FC_EVENT_GET_SHOP_WARP_TARGET_MAP_LIST_OK; };
	template<> struct info<T_FC_EVENT_REQUEST_SHOP_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_REQUEST_SHOP_WARP); using struct_t = MSG_FC_EVENT_REQUEST_SHOP_WARP; };
	template<> struct info<T_FC_EVENT_CHARACTERMODE_ENTER_BUILDING> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_CHARACTERMODE_ENTER_BUILDING); using struct_t = MSG_FC_EVENT_CHARACTERMODE_ENTER_BUILDING; };
	template<> struct info<T_FC_EVENT_CALL_WARP_EVENT_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_CALL_WARP_EVENT_REQUEST); using struct_t = MSG_FC_EVENT_CALL_WARP_EVENT_REQUEST; };
	template<> struct info<T_FC_EVENT_CALL_WARP_EVENT_REQUEST_ACK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_CALL_WARP_EVENT_REQUEST_ACK); using struct_t = MSG_FC_EVENT_CALL_WARP_EVENT_REQUEST_ACK; };
	template<> struct info<T_FC_EVENT_CLICK_TELEPORT> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_CLICK_TELEPORT); using struct_t = MSG_FC_EVENT_CLICK_TELEPORT; };
	template<> struct info<T_FC_EVENT_CLICK_TELEPORT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_CLICK_TELEPORT_OK); using struct_t = MSG_FC_EVENT_CLICK_TELEPORT_OK; };
	template<> struct info<T_FC_EVENT_TELEPORT_BUILDCOMPLETE> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_TELEPORT_BUILDCOMPLETE); using struct_t = MSG_FC_EVENT_TELEPORT_BUILDCOMPLETE; };
	template<> struct info<T_FC_EVENT_TELEPORT_DESTROY> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_TELEPORT_DESTROY); using struct_t = MSG_FC_EVENT_TELEPORT_DESTROY; };
	template<> struct info<T_FC_EVENT_NOTIFY_MSG_GET_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_NOTIFY_MSG_GET_OK); using struct_t = MSG_FC_EVENT_NOTIFY_MSG_GET_OK; };
	template<> struct info<T_FC_EVENT_NOTIFY_MSG_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_NOTIFY_MSG_DELETE); using struct_t = MSG_FC_EVENT_NOTIFY_MSG_DELETE; };
	template<> struct info<T_FC_EVENT_COUPON_EVENT_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_COUPON_EVENT_INFO); using struct_t = MSG_FC_EVENT_COUPON_EVENT_INFO; };
	template<> struct info<T_FC_EVENT_COUPON_EVENT_USE_COUPON> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_COUPON_EVENT_USE_COUPON); using struct_t = MSG_FC_EVENT_COUPON_EVENT_USE_COUPON; };
	template<> struct info<T_FC_EVENT_COUPON_EVENT_USE_COUPON_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_COUPON_EVENT_USE_COUPON_OK); using struct_t = MSG_FC_EVENT_COUPON_EVENT_USE_COUPON_OK; };
	template<> struct info<T_FC_EVENT_INFLUENCEMARK> { static constexpr size_t msg_size = sizeof(MSG_FC_EVENT_INFLUENCEMARK); using struct_t = MSG_FC_EVENT_INFLUENCEMARK; };
	template<> struct info<T_FC_GUILD_GET_MAP_OWNER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_GET_MAP_OWNER_INFO); using struct_t = MSG_FC_GUILD_GET_MAP_OWNER_INFO; };
	template<> struct info<T_FC_GUILD_GET_MAP_OWNER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_GET_MAP_OWNER_INFO_OK); using struct_t = MSG_FC_GUILD_GET_MAP_OWNER_INFO_OK; };
	template<> struct info<T_FC_GUILD_REQUEST_GUILD_WAR> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_REQUEST_GUILD_WAR); using struct_t = MSG_FC_GUILD_REQUEST_GUILD_WAR; };
	template<> struct info<T_FC_GUILD_REQUEST_GUILD_WAR_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_REQUEST_GUILD_WAR_RESULT); using struct_t = MSG_FC_GUILD_REQUEST_GUILD_WAR_RESULT; };
	template<> struct info<T_FC_GUILD_GET_CHALLENGER_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_GET_CHALLENGER_GUILD); using struct_t = MSG_FC_GUILD_GET_CHALLENGER_GUILD; };
	template<> struct info<T_FC_GUILD_GET_CHALLENGER_GUILD_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_GET_CHALLENGER_GUILD_OK); using struct_t = MSG_FC_GUILD_GET_CHALLENGER_GUILD_OK; };
	template<> struct info<T_FC_GUILD_GET_WAR_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_GET_WAR_INFO); using struct_t = MSG_FC_GUILD_GET_WAR_INFO; };
	template<> struct info<T_FC_GUILD_GET_WAR_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_GET_WAR_INFO_OK); using struct_t = MSG_FC_GUILD_GET_WAR_INFO_OK; };
	template<> struct info<T_FC_GUILD_SUMMON_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_SUMMON_MEMBER); using struct_t = MSG_FC_GUILD_SUMMON_MEMBER; };
	template<> struct info<T_FC_GUILD_SUMMON_MEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_SUMMON_MEMBER_OK); using struct_t = MSG_FC_GUILD_SUMMON_MEMBER_OK; };
	template<> struct info<T_FC_GUILD_DISMEMBER> { static constexpr size_t msg_size = sizeof(MSG_FC_GUILD_DISMEMBER); using struct_t = MSG_FC_GUILD_DISMEMBER; };
	template<> struct info<T_FC_INFO_GET_MONSTER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_MONSTER_INFO); using struct_t = MSG_FC_INFO_GET_MONSTER_INFO; };
	template<> struct info<T_FC_INFO_GET_MONSTER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_MONSTER_INFO_OK); using struct_t = MSG_FC_INFO_GET_MONSTER_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_MAPOBJECT_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_MAPOBJECT_INFO); using struct_t = MSG_FC_INFO_GET_MAPOBJECT_INFO; };
	template<> struct info<T_FC_INFO_GET_MAPOBJECT_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_MAPOBJECT_INFO_OK); using struct_t = MSG_FC_INFO_GET_MAPOBJECT_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_ITEM_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_ITEM_INFO); using struct_t = MSG_FC_INFO_GET_ITEM_INFO; };
	template<> struct info<T_FC_INFO_GET_ITEM_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_ITEM_INFO_OK); using struct_t = MSG_FC_INFO_GET_ITEM_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_RARE_ITEM_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_RARE_ITEM_INFO); using struct_t = MSG_FC_INFO_GET_RARE_ITEM_INFO; };
	template<> struct info<T_FC_INFO_GET_RARE_ITEM_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_RARE_ITEM_INFO_OK); using struct_t = MSG_FC_INFO_GET_RARE_ITEM_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_BUILDINGNPC_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_BUILDINGNPC_INFO); using struct_t = MSG_FC_INFO_GET_BUILDINGNPC_INFO; };
	template<> struct info<T_FC_INFO_GET_BUILDINGNPC_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_BUILDINGNPC_INFO_OK); using struct_t = MSG_FC_INFO_GET_BUILDINGNPC_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_SIMPLE_ITEM_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_SIMPLE_ITEM_INFO); using struct_t = MSG_FC_INFO_GET_SIMPLE_ITEM_INFO; };
	template<> struct info<T_FC_INFO_GET_SIMPLE_ITEM_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_SIMPLE_ITEM_INFO_OK); using struct_t = MSG_FC_INFO_GET_SIMPLE_ITEM_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_ENCHANT_COST> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_ENCHANT_COST); using struct_t = MSG_FC_INFO_GET_ENCHANT_COST; };
	template<> struct info<T_FC_INFO_GET_ENCHANT_COST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_ENCHANT_COST_OK); using struct_t = MSG_FC_INFO_GET_ENCHANT_COST_OK; };
	template<> struct info<T_FC_INFO_GET_CURRENT_MAP_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_CURRENT_MAP_INFO); using struct_t = MSG_FC_INFO_GET_CURRENT_MAP_INFO; };
	template<> struct info<T_FC_INFO_GET_CURRENT_MAP_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_CURRENT_MAP_INFO_OK); using struct_t = MSG_FC_INFO_GET_CURRENT_MAP_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_OK); using struct_t = MSG_FC_INFO_GET_HAPPY_HOUR_EVENT_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_GAME_EVENT_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_GAME_EVENT_INFO_OK); using struct_t = MSG_FC_INFO_GET_GAME_EVENT_INFO_OK; };
	template<> struct info<T_FC_INFO_GET_SERVER_DATE_TIME_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_SERVER_DATE_TIME_OK); using struct_t = MSG_FC_INFO_GET_SERVER_DATE_TIME_OK; };
	template<> struct info<T_FC_INFO_CHECK_RESOBJ_CHECKSUM> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_CHECK_RESOBJ_CHECKSUM); using struct_t = MSG_FC_INFO_CHECK_RESOBJ_CHECKSUM; };
	template<> struct info<T_FC_INFO_NOTICE_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_NOTICE_REQUEST); using struct_t = MSG_FC_INFO_NOTICE_REQUEST; };
	template<> struct info<T_FC_INFO_NOTICE_REQUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_NOTICE_REQUEST_OK); using struct_t = MSG_FC_INFO_NOTICE_REQUEST_OK; };
	template<> struct info<T_FC_INFO_NOTICE_REG> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_NOTICE_REG); using struct_t = MSG_FC_INFO_NOTICE_REG; };
	template<> struct info<T_FC_INFO_NOTICE_MODIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_NOTICE_MODIFY); using struct_t = MSG_FC_INFO_NOTICE_MODIFY; };
	template<> struct info<T_FC_INFO_EXPEDIENCYFUND_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_EXPEDIENCYFUND_REQUEST); using struct_t = MSG_FC_INFO_EXPEDIENCYFUND_REQUEST; };
	template<> struct info<T_FC_INFO_EXPEDIENCYFUND_REQUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_EXPEDIENCYFUND_REQUEST_OK); using struct_t = MSG_FC_INFO_EXPEDIENCYFUND_REQUEST_OK; };
	template<> struct info<T_FC_INFO_EXPEDIENCYFUND_PAYBACK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_EXPEDIENCYFUND_PAYBACK); using struct_t = MSG_FC_INFO_EXPEDIENCYFUND_PAYBACK; };
	template<> struct info<T_FC_INFO_EXPEDIENCYFUND_PAYBACK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_EXPEDIENCYFUND_PAYBACK_OK); using struct_t = MSG_FC_INFO_EXPEDIENCYFUND_PAYBACK_OK; };
	template<> struct info<T_FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD); using struct_t = MSG_FC_INFO_SECONDARYPASSWORD_UPDATE_PASSWORD; };
	template<> struct info<T_FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD); using struct_t = MSG_FC_INFO_SECONDARYPASSWORD_CHECK_PASSWORD; };
	template<> struct info<T_FC_INFO_SECONDARYPASSWORD_LOCK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_SECONDARYPASSWORD_LOCK); using struct_t = MSG_FC_INFO_SECONDARYPASSWORD_LOCK; };
	template<> struct info<T_FC_INFO_SECONDARYPASSWORD_LOCK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_SECONDARYPASSWORD_LOCK_OK); using struct_t = MSG_FC_INFO_SECONDARYPASSWORD_LOCK_OK; };
	template<> struct info<T_FC_INFO_GET_GUILDMARK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_GUILDMARK); using struct_t = MSG_FC_INFO_GET_GUILDMARK; };
	template<> struct info<T_FC_INFO_GET_GUILDMARK_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_GET_GUILDMARK_OK); using struct_t = MSG_FC_INFO_GET_GUILDMARK_OK; };
	template<> struct info<T_FC_INFO_MSWARINFO_DISPLAY> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_MSWARINFO_DISPLAY); using struct_t = MSG_FC_INFO_MSWARINFO_DISPLAY; };
	template<> struct info<T_FC_INFO_MSWARINFO_DISPLAY_OPTION> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_MSWARINFO_DISPLAY_OPTION); using struct_t = MSG_FC_INFO_MSWARINFO_DISPLAY_OPTION; };
	template<> struct info<T_FC_INFO_MSWARINFO_DISPLAY_OPTION_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_MSWARINFO_DISPLAY_OPTION_OK); using struct_t = MSG_FC_INFO_MSWARINFO_DISPLAY_OPTION_OK; };
	template<> struct info<T_FC_INFO_MSWARINFO_RESULT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_MSWARINFO_RESULT_OK); using struct_t = MSG_FC_INFO_MSWARINFO_RESULT_OK; };
	template<> struct info<T_FC_INFO_DECLARATION_MSWAR_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_DECLARATION_MSWAR_INFO_OK); using struct_t = MSG_FC_INFO_DECLARATION_MSWAR_INFO_OK; };
	template<> struct info<T_FC_INFO_DECLARATION_MSWAR_SET> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_DECLARATION_MSWAR_SET); using struct_t = MSG_FC_INFO_DECLARATION_MSWAR_SET; };
	template<> struct info<T_FC_INFO_STRATEGICPOINTINFO_DISPLAY_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_STRATEGICPOINTINFO_DISPLAY_LIST); using struct_t = MSG_FC_INFO_STRATEGICPOINTINFO_DISPLAY_LIST; };
	template<> struct info<T_FC_INFO_STRATEGICPOINTINFO_DISPLAY> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_STRATEGICPOINTINFO_DISPLAY); using struct_t = MSG_FC_INFO_STRATEGICPOINTINFO_DISPLAY; };
	template<> struct info<T_FC_INFO_WRK_GET_SERVICE_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_WRK_GET_SERVICE_INFO_OK); using struct_t = MSG_FC_INFO_WRK_GET_SERVICE_INFO_OK; };
	template<> struct info<T_FC_INFO_WRK_GET_SERVICE_INFO_OK_IMAGE> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_WRK_GET_SERVICE_INFO_OK_IMAGE); using struct_t = MSG_FC_INFO_WRK_GET_SERVICE_INFO_OK_IMAGE; };
	template<> struct info<T_FC_INFO_WRK_GET_RANKER_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_WRK_GET_RANKER_LIST); using struct_t = MSG_FC_INFO_WRK_GET_RANKER_LIST; };
	template<> struct info<T_FC_INFO_WRK_GET_LEVEL_RANKER_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_WRK_GET_LEVEL_RANKER_LIST_OK); using struct_t = MSG_FC_INFO_WRK_GET_LEVEL_RANKER_LIST_OK; };
	template<> struct info<T_FC_INFO_WRK_GET_FAME_RANKER_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_WRK_GET_FAME_RANKER_LIST_OK); using struct_t = MSG_FC_INFO_WRK_GET_FAME_RANKER_LIST_OK; };
	template<> struct info<T_FC_INFO_WRK_GET_PVP_RANKER_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_WRK_GET_PVP_RANKER_LIST_OK); using struct_t = MSG_FC_INFO_WRK_GET_PVP_RANKER_LIST_OK; };
	template<> struct info<T_FC_INFO_WRK_GET_SELF_RANKING_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_WRK_GET_SELF_RANKING_OK); using struct_t = MSG_FC_INFO_WRK_GET_SELF_RANKING_OK; };
	template<> struct info<T_FC_INFO_APPLY_RESISTANCE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_APPLY_RESISTANCE_ITEM); using struct_t = MSG_FC_INFO_APPLY_RESISTANCE_ITEM; };
	template<> struct info<T_FC_INFO_APPLY_DESTPARAM> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_APPLY_DESTPARAM); using struct_t = MSG_FC_INFO_APPLY_DESTPARAM; };
	template<> struct info<T_FC_INFO_APPLY_DESTPARAM_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_INFO_APPLY_DESTPARAM_LIST); using struct_t = MSG_FC_INFO_APPLY_DESTPARAM_LIST; };
	template<> struct info<T_FC_ITEM_SHOW_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_SHOW_ITEM); using struct_t = MSG_FC_ITEM_SHOW_ITEM; };
	template<> struct info<T_FC_ITEM_HIDE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_HIDE_ITEM); using struct_t = MSG_FC_ITEM_HIDE_ITEM; };
	template<> struct info<T_FC_ITEM_GET_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_GET_ITEM); using struct_t = MSG_FC_ITEM_GET_ITEM; };
	template<> struct info<T_FC_ITEM_GET_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_GET_ITEM_OK); using struct_t = MSG_FC_ITEM_GET_ITEM_OK; };
	template<> struct info<T_FC_ITEM_GET_ITEM_FAIL> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_GET_ITEM_FAIL); using struct_t = MSG_FC_ITEM_GET_ITEM_FAIL; };
	template<> struct info<T_FC_ITEM_PUT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PUT_ITEM); using struct_t = MSG_FC_ITEM_PUT_ITEM; };
	template<> struct info<T_FC_ITEM_CHANGE_WINDOW_POSITION> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_CHANGE_WINDOW_POSITION); using struct_t = MSG_FC_ITEM_CHANGE_WINDOW_POSITION; };
	template<> struct info<T_FC_ITEM_CHANGE_WINDOW_POSITION_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_CHANGE_WINDOW_POSITION_OK); using struct_t = MSG_FC_ITEM_CHANGE_WINDOW_POSITION_OK; };
	template<> struct info<T_FC_ITEM_UPDATE_WINDOW_ITEM_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_UPDATE_WINDOW_ITEM_LIST); using struct_t = MSG_FC_ITEM_UPDATE_WINDOW_ITEM_LIST; };
	template<> struct info<T_FC_ITEM_THROW_AWAY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_THROW_AWAY_ITEM); using struct_t = MSG_FC_ITEM_THROW_AWAY_ITEM; };
	template<> struct info<T_FC_ITEM_THROW_AWAY_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_THROW_AWAY_ITEM_OK); using struct_t = MSG_FC_ITEM_THROW_AWAY_ITEM_OK; };
	template<> struct info<T_FC_ITEM_USE_ENERGY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_ENERGY); using struct_t = MSG_FC_ITEM_USE_ENERGY; };
	template<> struct info<T_FC_ITEM_USE_ENERGY_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_ENERGY_OK); using struct_t = MSG_FC_ITEM_USE_ENERGY_OK; };
	template<> struct info<T_FC_ITEM_USE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_ITEM); using struct_t = MSG_FC_ITEM_USE_ITEM; };
	template<> struct info<T_FC_ITEM_USE_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_ITEM_OK); using struct_t = MSG_FC_ITEM_USE_ITEM_OK; };
	template<> struct info<T_FC_ITEM_DELETE_ITEM_ADMIN> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_DELETE_ITEM_ADMIN); using struct_t = MSG_FC_ITEM_DELETE_ITEM_ADMIN; };
	template<> struct info<T_FC_ITEM_USE_ENCHANT> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_ENCHANT); using struct_t = MSG_FC_ITEM_USE_ENCHANT; };
	template<> struct info<T_FC_ITEM_USE_ENCHANT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_ENCHANT_OK); using struct_t = MSG_FC_ITEM_USE_ENCHANT_OK; };
	template<> struct info<T_FC_ITEM_PUT_ENCHANT> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PUT_ENCHANT); using struct_t = MSG_FC_ITEM_PUT_ENCHANT; };
	template<> struct info<T_FC_ITEM_DELETE_ALL_ENCHANT> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_DELETE_ALL_ENCHANT); using struct_t = MSG_FC_ITEM_DELETE_ALL_ENCHANT; };
	template<> struct info<T_FC_ITEM_DELETE_DROP_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_DELETE_DROP_ITEM); using struct_t = MSG_FC_ITEM_DELETE_DROP_ITEM; };
	template<> struct info<T_FC_ITEM_UPDATE_ITEM_POS> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_UPDATE_ITEM_POS); using struct_t = MSG_FC_ITEM_UPDATE_ITEM_POS; };
	template<> struct info<T_FC_ITEM_MIX_ITEMS> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_MIX_ITEMS); using struct_t = MSG_FC_ITEM_MIX_ITEMS; };
	template<> struct info<T_FC_ITEM_MIX_ITEMS_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_MIX_ITEMS_RESULT); using struct_t = MSG_FC_ITEM_MIX_ITEMS_RESULT; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_GUILDSUMMON> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_GUILDSUMMON); using struct_t = MSG_FC_ITEM_USE_CARDITEM_GUILDSUMMON; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_GUILDSUMMON_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_GUILDSUMMON_NOTIFY); using struct_t = MSG_FC_ITEM_USE_CARDITEM_GUILDSUMMON_NOTIFY; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_RESTORE> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_RESTORE); using struct_t = MSG_FC_ITEM_USE_CARDITEM_RESTORE; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_RESTORE_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_RESTORE_NOTIFY); using struct_t = MSG_FC_ITEM_USE_CARDITEM_RESTORE_NOTIFY; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_GUILD); using struct_t = MSG_FC_ITEM_USE_CARDITEM_GUILD; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_GUILD_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_GUILD_NOTIFY); using struct_t = MSG_FC_ITEM_USE_CARDITEM_GUILD_NOTIFY; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_MONSTERSUMMON> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_MONSTERSUMMON); using struct_t = MSG_FC_ITEM_USE_CARDITEM_MONSTERSUMMON; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_MONSTERSUMMON_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_MONSTERSUMMON_NOTIFY); using struct_t = MSG_FC_ITEM_USE_CARDITEM_MONSTERSUMMON_NOTIFY; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME); using struct_t = MSG_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME_NOTIFY); using struct_t = MSG_FC_ITEM_USE_CARDITEM_CHANGECHARACTERNAME_NOTIFY; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE); using struct_t = MSG_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE_NOTIFY); using struct_t = MSG_FC_ITEM_USE_CARDITEM_SKILLINITIALIZE_NOTIFY; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE); using struct_t = MSG_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE_NOTIFY); using struct_t = MSG_FC_ITEM_USE_CARDITEM_CHANGEPILOTFACE_NOTIFY; };
	template<> struct info<T_FC_ITEM_USE_INFLUENCE_BUFF> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_INFLUENCE_BUFF); using struct_t = MSG_FC_ITEM_USE_INFLUENCE_BUFF; };
	template<> struct info<T_FC_ITEM_USE_INFLUENCE_BUFF_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_INFLUENCE_BUFF_OK); using struct_t = MSG_FC_ITEM_USE_INFLUENCE_BUFF_OK; };
	template<> struct info<T_FC_ITEM_USE_INFLUENCE_GAMEEVENT> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_INFLUENCE_GAMEEVENT); using struct_t = MSG_FC_ITEM_USE_INFLUENCE_GAMEEVENT; };
	template<> struct info<T_FC_ITEM_USE_INFLUENCE_GAMEEVENT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_INFLUENCE_GAMEEVENT_OK); using struct_t = MSG_FC_ITEM_USE_INFLUENCE_GAMEEVENT_OK; };
	template<> struct info<T_FC_ITEM_USE_RANDOMBOX> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_RANDOMBOX); using struct_t = MSG_FC_ITEM_USE_RANDOMBOX; };
	template<> struct info<T_FC_ITEM_USE_RANDOMBOX_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_RANDOMBOX_OK); using struct_t = MSG_FC_ITEM_USE_RANDOMBOX_OK; };
	template<> struct info<T_FC_ITEM_USE_SKILL_SUPPORT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_SKILL_SUPPORT_ITEM); using struct_t = MSG_FC_ITEM_USE_SKILL_SUPPORT_ITEM; };
	template<> struct info<T_FC_ITEM_USE_SKILL_SUPPORT_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_SKILL_SUPPORT_ITEM_OK); using struct_t = MSG_FC_ITEM_USE_SKILL_SUPPORT_ITEM_OK; };
	template<> struct info<T_FC_ITEM_USE_LUCKY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_LUCKY_ITEM); using struct_t = MSG_FC_ITEM_USE_LUCKY_ITEM; };
	template<> struct info<T_FC_ITEM_USE_LUCKY_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_LUCKY_ITEM_OK); using struct_t = MSG_FC_ITEM_USE_LUCKY_ITEM_OK; };
	template<> struct info<T_FC_ITEM_CHANGED_SHAPEITEMNUM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_CHANGED_SHAPEITEMNUM); using struct_t = MSG_FC_ITEM_CHANGED_SHAPEITEMNUM; };
	template<> struct info<T_FC_ITEM_CHANGED_EFFECTITEMNUM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_CHANGED_EFFECTITEMNUM); using struct_t = MSG_FC_ITEM_CHANGED_EFFECTITEMNUM; };
	template<> struct info<T_FC_ITEM_USE_INVOKING_WEAR_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_INVOKING_WEAR_ITEM); using struct_t = MSG_FC_ITEM_USE_INVOKING_WEAR_ITEM; };
	template<> struct info<T_FC_ITEM_EXPIRE_TIME_INVOKING_WEAR_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_EXPIRE_TIME_INVOKING_WEAR_ITEM); using struct_t = MSG_FC_ITEM_EXPIRE_TIME_INVOKING_WEAR_ITEM; };
	template<> struct info<T_FC_ITEM_END_COOLINGTIME_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_END_COOLINGTIME_ITEM); using struct_t = MSG_FC_ITEM_END_COOLINGTIME_ITEM; };
	template<> struct info<T_FC_ITEM_END_COOLINGTIME_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_END_COOLINGTIME_ITEM_OK); using struct_t = MSG_FC_ITEM_END_COOLINGTIME_ITEM_OK; };
	template<> struct info<T_FC_ITEM_GET_COOLINGTIME_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_GET_COOLINGTIME_INFO_OK); using struct_t = MSG_FC_ITEM_GET_COOLINGTIME_INFO_OK; };
	template<> struct info<T_FC_ITEM_USE_INVOKING_WEAR_ITEM_BUFF> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_INVOKING_WEAR_ITEM_BUFF); using struct_t = MSG_FC_ITEM_USE_INVOKING_WEAR_ITEM_BUFF; };
	template<> struct info<T_FC_ITEM_UPDATE_TRANSFORMER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_UPDATE_TRANSFORMER_OK); using struct_t = MSG_FC_ITEM_UPDATE_TRANSFORMER_OK; };
	template<> struct info<T_FC_ITEM_HOMEPREMIUM_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_HOMEPREMIUM_INFO); using struct_t = MSG_FC_ITEM_HOMEPREMIUM_INFO; };
	template<> struct info<T_FC_DISSOLVED_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_DISSOLVED_ITEM); using struct_t = MSG_FC_DISSOLVED_ITEM; };
	template<> struct info<T_FC_ITEM_PET_SET_NAME> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_NAME); using struct_t = MSG_FC_ITEM_PET_SET_NAME; };
	template<> struct info<T_FC_ITEM_PET_SET_NAME_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_NAME_OK); using struct_t = MSG_FC_ITEM_PET_SET_NAME_OK; };
	template<> struct info<T_FC_ITEM_PET_SET_EXP_RATIO> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_EXP_RATIO); using struct_t = MSG_FC_ITEM_PET_SET_EXP_RATIO; };
	template<> struct info<T_FC_ITEM_PET_SET_EXP_RATIO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_EXP_RATIO_OK); using struct_t = MSG_FC_ITEM_PET_SET_EXP_RATIO_OK; };
	template<> struct info<T_FC_ITEM_PET_CHANGE_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_CHANGE_LEVEL); using struct_t = MSG_FC_ITEM_PET_CHANGE_LEVEL; };
	template<> struct info<T_FC_ITEM_PET_CHANGE_EXP> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_CHANGE_EXP); using struct_t = MSG_FC_ITEM_PET_CHANGE_EXP; };
	template<> struct info<T_FC_ITEM_PET_SET_SOCKET> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_SOCKET); using struct_t = MSG_FC_ITEM_PET_SET_SOCKET; };
	template<> struct info<T_FC_ITEM_PET_SET_SOCKET_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_SOCKET_OK); using struct_t = MSG_FC_ITEM_PET_SET_SOCKET_OK; };
	template<> struct info<T_FC_ITEM_PET_SET_KIT_SLOT> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_KIT_SLOT); using struct_t = MSG_FC_ITEM_PET_SET_KIT_SLOT; };
	template<> struct info<T_FC_ITEM_PET_SET_KIT_SLOT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_KIT_SLOT_OK); using struct_t = MSG_FC_ITEM_PET_SET_KIT_SLOT_OK; };
	template<> struct info<T_FC_ITEM_PET_SET_AUTOSKILL_SLOT> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_AUTOSKILL_SLOT); using struct_t = MSG_FC_ITEM_PET_SET_AUTOSKILL_SLOT; };
	template<> struct info<T_FC_ITEM_PET_SET_AUTOSKILL_SLOT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_PET_SET_AUTOSKILL_SLOT_OK); using struct_t = MSG_FC_ITEM_PET_SET_AUTOSKILL_SLOT_OK; };
	template<> struct info<T_FC_ITEM_USE_PET_SOCKET_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_PET_SOCKET_ITEM); using struct_t = MSG_FC_ITEM_USE_PET_SOCKET_ITEM; };
	template<> struct info<T_FC_ITEM_USE_PET_SOCKET_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_PET_SOCKET_ITEM_OK); using struct_t = MSG_FC_ITEM_USE_PET_SOCKET_ITEM_OK; };
	template<> struct info<T_FC_ITEM_CANCEL_PET_SOCKET_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_CANCEL_PET_SOCKET_ITEM); using struct_t = MSG_FC_ITEM_CANCEL_PET_SOCKET_ITEM; };
	template<> struct info<T_FC_ITEM_CANCEL_PET_SOCKET_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_CANCEL_PET_SOCKET_ITEM_OK); using struct_t = MSG_FC_ITEM_CANCEL_PET_SOCKET_ITEM_OK; };
	template<> struct info<T_FC_ITEM_NOTIFY_WINDOW_POSITION> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_NOTIFY_WINDOW_POSITION); using struct_t = MSG_FC_ITEM_NOTIFY_WINDOW_POSITION; };
	template<> struct info<T_FC_ITEM_USE_CARDITEM_CHANGE_NATION_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_ITEM_USE_CARDITEM_CHANGE_NATION_REQUEST); using struct_t = MSG_FC_ITEM_USE_CARDITEM_CHANGE_NATION_REQUEST; };
	template<> struct info<T_FC_MONSTER_CREATED> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_CREATED); using struct_t = MSG_FC_MONSTER_CREATED; };
	template<> struct info<T_FC_MONSTER_MOVE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_MOVE_OK); using struct_t = MSG_FC_MONSTER_MOVE_OK; };
	template<> struct info<T_FC_MONSTER_HIDE> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_HIDE); using struct_t = MSG_FC_MONSTER_HIDE; };
	template<> struct info<T_FC_MONSTER_SHOW> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_SHOW); using struct_t = MSG_FC_MONSTER_SHOW; };
	template<> struct info<T_FC_MONSTER_CHANGE_HP> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_CHANGE_HP); using struct_t = MSG_FC_MONSTER_CHANGE_HP; };
	template<> struct info<T_FC_MONSTER_CHANGE_BODYCONDITION> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_CHANGE_BODYCONDITION); using struct_t = MSG_FC_MONSTER_CHANGE_BODYCONDITION; };
	template<> struct info<T_FC_MONSTER_SKILL_USE_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_SKILL_USE_SKILL); using struct_t = MSG_FC_MONSTER_SKILL_USE_SKILL; };
	template<> struct info<T_FC_MONSTER_SKILL_END_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_SKILL_END_SKILL); using struct_t = MSG_FC_MONSTER_SKILL_END_SKILL; };
	template<> struct info<T_FC_MONSTER_SUMMON_MONSTER> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_SUMMON_MONSTER); using struct_t = MSG_FC_MONSTER_SUMMON_MONSTER; };
	template<> struct info<T_FC_MONSTER_TUTORIAL_MONSTER_DEAD_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_TUTORIAL_MONSTER_DEAD_NOTIFY); using struct_t = MSG_FC_MONSTER_TUTORIAL_MONSTER_DEAD_NOTIFY; };
	template<> struct info<T_FC_MONSTER_TUTORIAL_MONSTER_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_TUTORIAL_MONSTER_DELETE); using struct_t = MSG_FC_MONSTER_TUTORIAL_MONSTER_DELETE; };
	template<> struct info<T_FC_MONSTER_HPTALK> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_HPTALK); using struct_t = MSG_FC_MONSTER_HPTALK; };
	template<> struct info<T_FC_MONSTER_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_SKILL); using struct_t = MSG_FC_MONSTER_SKILL; };
	template<> struct info<T_FC_MONSTER_CREATED_ALIVE_FOR_GAMECLEAR> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_CREATED_ALIVE_FOR_GAMECLEAR); using struct_t = MSG_FC_MONSTER_CREATED_ALIVE_FOR_GAMECLEAR; };
	template<> struct info<T_FC_MONSTER_SKILL_CANCEL> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_SKILL_CANCEL); using struct_t = MSG_FC_MONSTER_SKILL_CANCEL; };
	template<> struct info<T_FC_MONSTER_CHANGE_INDEX> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_CHANGE_INDEX); using struct_t = MSG_FC_MONSTER_CHANGE_INDEX; };
	template<> struct info<T_FC_MONSTER_CINEMA_DELETE_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_MONSTER_CINEMA_DELETE_NOTIFY); using struct_t = MSG_FC_MONSTER_CINEMA_DELETE_NOTIFY; };
	template<> struct info<T_FC_MOVE> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE); using struct_t = MSG_FC_MOVE; };
	template<> struct info<T_FC_MOVE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_OK); using struct_t = MSG_FC_MOVE_OK; };
	template<> struct info<T_FC_MOVE_LOCKON> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_LOCKON); using struct_t = MSG_FC_MOVE_LOCKON; };
	template<> struct info<T_FC_MOVE_LOCKON_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_LOCKON_OK); using struct_t = MSG_FC_MOVE_LOCKON_OK; };
	template<> struct info<T_FC_MOVE_UNLOCKON> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_UNLOCKON); using struct_t = MSG_FC_MOVE_UNLOCKON; };
	template<> struct info<T_FC_MOVE_UNLOCKON_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_UNLOCKON_OK); using struct_t = MSG_FC_MOVE_UNLOCKON_OK; };
	template<> struct info<T_FC_MOVE_LANDING> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_LANDING); using struct_t = MSG_FC_MOVE_LANDING; };
	template<> struct info<T_FC_MOVE_LANDING_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_LANDING_OK); using struct_t = MSG_FC_MOVE_LANDING_OK; };
	template<> struct info<T_FC_MOVE_LANDING_DONE> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_LANDING_DONE); using struct_t = MSG_FC_MOVE_LANDING_DONE; };
	template<> struct info<T_FC_MOVE_TAKEOFF> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_TAKEOFF); using struct_t = MSG_FC_MOVE_TAKEOFF; };
	template<> struct info<T_FC_MOVE_TAKEOFF_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_TAKEOFF_OK); using struct_t = MSG_FC_MOVE_TAKEOFF_OK; };
	template<> struct info<T_FC_MISSILE_MOVE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MISSILE_MOVE_OK); using struct_t = MSG_FC_MISSILE_MOVE_OK; };
	template<> struct info<T_FC_MOVE_TARGET> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_TARGET); using struct_t = MSG_FC_MOVE_TARGET; };
	template<> struct info<T_FC_MOVE_WEAPON_VEL> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_WEAPON_VEL); using struct_t = MSG_FC_MOVE_WEAPON_VEL; };
	template<> struct info<T_FC_MOVE_WEAPON_VEL_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_WEAPON_VEL_OK); using struct_t = MSG_FC_MOVE_WEAPON_VEL_OK; };
	template<> struct info<T_FC_MOVE_ROLLING> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_ROLLING); using struct_t = MSG_FC_MOVE_ROLLING; };
	template<> struct info<T_FC_MOVE_ROLLING_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_ROLLING_OK); using struct_t = MSG_FC_MOVE_ROLLING_OK; };
	template<> struct info<T_FC_MOVE_HACKSHIELD_CRCReqMsg> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_HACKSHIELD_CRCReqMsg); using struct_t = MSG_FC_MOVE_HACKSHIELD_CRCReqMsg; };
	template<> struct info<T_FC_MOVE_HACKSHIELD_CRCAckMsg> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_HACKSHIELD_CRCAckMsg); using struct_t = MSG_FC_MOVE_HACKSHIELD_CRCAckMsg; };
	template<> struct info<T_FC_MOVE_HACKSHIELD_HACKING_CLIENT> { static constexpr size_t msg_size = sizeof(MSG_FC_MOVE_HACKSHIELD_HACKING_CLIENT); using struct_t = MSG_FC_MOVE_HACKSHIELD_HACKING_CLIENT; };
	template<> struct info<T_FC_PARTY_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_CREATE_OK); using struct_t = MSG_FC_PARTY_CREATE_OK; };
	template<> struct info<T_FC_PARTY_REQUEST_INVITE> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REQUEST_INVITE); using struct_t = MSG_FC_PARTY_REQUEST_INVITE; };
	template<> struct info<T_FC_PARTY_REQUEST_INVITE_QUESTION> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REQUEST_INVITE_QUESTION); using struct_t = MSG_FC_PARTY_REQUEST_INVITE_QUESTION; };
	template<> struct info<T_FC_PARTY_ACCEPT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_ACCEPT_INVITE); using struct_t = MSG_FC_PARTY_ACCEPT_INVITE; };
	template<> struct info<T_FC_PARTY_REJECT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REJECT_INVITE); using struct_t = MSG_FC_PARTY_REJECT_INVITE; };
	template<> struct info<T_FC_PARTY_REJECT_INVITE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REJECT_INVITE_OK); using struct_t = MSG_FC_PARTY_REJECT_INVITE_OK; };
	template<> struct info<T_FC_PARTY_GET_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_GET_MEMBER); using struct_t = MSG_FC_PARTY_GET_MEMBER; };
	template<> struct info<T_FC_PARTY_PUT_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_PUT_MEMBER); using struct_t = MSG_FC_PARTY_PUT_MEMBER; };
	template<> struct info<T_FC_PARTY_GET_ALL_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_GET_ALL_MEMBER); using struct_t = MSG_FC_PARTY_GET_ALL_MEMBER; };
	template<> struct info<T_FC_PARTY_PUT_ALL_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_PUT_ALL_MEMBER); using struct_t = MSG_FC_PARTY_PUT_ALL_MEMBER; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_ALL> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_ALL); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_ALL; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_LEVEL); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_LEVEL; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_HP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_HP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_HP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_HP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_HP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_HP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_DP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_DP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_DP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_DP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_DP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_DP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_SP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_SP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_SP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_SP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_SP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_SP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_EP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_EP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_EP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_EP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_EP); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_CURRENT_EP; };
	template<> struct info<T_FC_PARTY_UPDATE_MEMBER_INFO_BODYCONDITION> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_UPDATE_MEMBER_INFO_BODYCONDITION); using struct_t = MSG_FC_PARTY_UPDATE_MEMBER_INFO_BODYCONDITION; };
	template<> struct info<T_FC_PARTY_REQUEST_PARTY_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REQUEST_PARTY_WARP); using struct_t = MSG_FC_PARTY_REQUEST_PARTY_WARP; };
	template<> struct info<T_FC_PARTY_REQUEST_PARTY_WARP_WITH_MAP_NAME> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REQUEST_PARTY_WARP_WITH_MAP_NAME); using struct_t = MSG_FC_PARTY_REQUEST_PARTY_WARP_WITH_MAP_NAME; };
	template<> struct info<T_FC_PARTY_REQUEST_PARTY_OBJECT_EVENT> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REQUEST_PARTY_OBJECT_EVENT); using struct_t = MSG_FC_PARTY_REQUEST_PARTY_OBJECT_EVENT; };
	template<> struct info<T_FC_PARTY_GET_OTHER_MOVE> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_GET_OTHER_MOVE); using struct_t = MSG_FC_PARTY_GET_OTHER_MOVE; };
	template<> struct info<T_FC_PARTY_BATTLE_START> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_BATTLE_START); using struct_t = MSG_FC_PARTY_BATTLE_START; };
	template<> struct info<T_FC_PARTY_BATTLE_END> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_BATTLE_END); using struct_t = MSG_FC_PARTY_BATTLE_END; };
	template<> struct info<T_FC_PARTY_PUT_ITEM_OTHER> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_PUT_ITEM_OTHER); using struct_t = MSG_FC_PARTY_PUT_ITEM_OTHER; };
	template<> struct info<T_FC_PARTY_AUTO_CREATED> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_AUTO_CREATED); using struct_t = MSG_FC_PARTY_AUTO_CREATED; };
	template<> struct info<T_FC_PARTY_AUTO_CREATED_THE_ARENA> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_AUTO_CREATED_THE_ARENA); using struct_t = MSG_FC_PARTY_AUTO_CREATED_THE_ARENA; };
	template<> struct info<T_FC_PARTY_REQUEST_INVITE_QUESTION_THE_ARENA> { static constexpr size_t msg_size = sizeof(MSG_FC_PARTY_REQUEST_INVITE_QUESTION_THE_ARENA); using struct_t = MSG_FC_PARTY_REQUEST_INVITE_QUESTION_THE_ARENA; };
	template<> struct info<T_FC_QUEST_REQUEST_START> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_START); using struct_t = MSG_FC_QUEST_REQUEST_START; };
	template<> struct info<T_FC_QUEST_REQUEST_START_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_START_RESULT); using struct_t = MSG_FC_QUEST_REQUEST_START_RESULT; };
	template<> struct info<T_FC_QUEST_ACCEPT_QUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_ACCEPT_QUEST); using struct_t = MSG_FC_QUEST_ACCEPT_QUEST; };
	template<> struct info<T_FC_QUEST_CANCEL_QUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_CANCEL_QUEST); using struct_t = MSG_FC_QUEST_CANCEL_QUEST; };
	template<> struct info<T_FC_QUEST_REQUEST_SUCCESS> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_SUCCESS); using struct_t = MSG_FC_QUEST_REQUEST_SUCCESS; };
	template<> struct info<T_FC_QUEST_REQUEST_SUCCESS_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_SUCCESS_RESULT); using struct_t = MSG_FC_QUEST_REQUEST_SUCCESS_RESULT; };
	template<> struct info<T_FC_QUEST_PUT_ALL_QUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_PUT_ALL_QUEST); using struct_t = MSG_FC_QUEST_PUT_ALL_QUEST; };
	template<> struct info<T_FC_QUEST_DISCARD_QUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_DISCARD_QUEST); using struct_t = MSG_FC_QUEST_DISCARD_QUEST; };
	template<> struct info<T_FC_QUEST_DISCARD_QUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_DISCARD_QUEST_OK); using struct_t = MSG_FC_QUEST_DISCARD_QUEST_OK; };
	template<> struct info<T_FC_QUEST_MOVE_QUEST_MAP> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_MOVE_QUEST_MAP); using struct_t = MSG_FC_QUEST_MOVE_QUEST_MAP; };
	template<> struct info<T_FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT); using struct_t = MSG_FC_QUEST_PUT_ALL_QUEST_MONSTER_COUNT; };
	template<> struct info<T_FC_QUEST_UPDATE_MONSTER_COUNT> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_UPDATE_MONSTER_COUNT); using struct_t = MSG_FC_QUEST_UPDATE_MONSTER_COUNT; };
	template<> struct info<T_FC_QUEST_REQUEST_SUCCESS_CHECK> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_SUCCESS_CHECK); using struct_t = MSG_FC_QUEST_REQUEST_SUCCESS_CHECK; };
	template<> struct info<T_FC_QUEST_REQUEST_SUCCESS_CHECK_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_SUCCESS_CHECK_RESULT); using struct_t = MSG_FC_QUEST_REQUEST_SUCCESS_CHECK_RESULT; };
	template<> struct info<T_FC_QUEST_REQUEST_PARTY_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_PARTY_WARP); using struct_t = MSG_FC_QUEST_REQUEST_PARTY_WARP; };
	template<> struct info<T_FC_QUEST_REQUEST_PARTY_WARP_ACK> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_PARTY_WARP_ACK); using struct_t = MSG_FC_QUEST_REQUEST_PARTY_WARP_ACK; };
	template<> struct info<T_FC_QUEST_REQUEST_MISSIONMASTER_HELP> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_MISSIONMASTER_HELP); using struct_t = MSG_FC_QUEST_REQUEST_MISSIONMASTER_HELP; };
	template<> struct info<T_FC_QUEST_REQUEST_MISSIONMASTER_HELP_INVITE> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_REQUEST_MISSIONMASTER_HELP_INVITE); using struct_t = MSG_FC_QUEST_REQUEST_MISSIONMASTER_HELP_INVITE; };
	template<> struct info<T_FC_QUEST_MISSIONMASTER_HELP_INVITE> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_MISSIONMASTER_HELP_INVITE); using struct_t = MSG_FC_QUEST_MISSIONMASTER_HELP_INVITE; };
	template<> struct info<T_FC_QUEST_MISSIONMASTER_HELP_INVITE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_MISSIONMASTER_HELP_INVITE_OK); using struct_t = MSG_FC_QUEST_MISSIONMASTER_HELP_INVITE_OK; };
	template<> struct info<T_FC_QUEST_MISSIONMASTER_HELP_REJECT> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_MISSIONMASTER_HELP_REJECT); using struct_t = MSG_FC_QUEST_MISSIONMASTER_HELP_REJECT; };
	template<> struct info<T_FC_QUEST_MISSIONMASTER_HELP_REJECT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_MISSIONMASTER_HELP_REJECT_OK); using struct_t = MSG_FC_QUEST_MISSIONMASTER_HELP_REJECT_OK; };
	template<> struct info<T_FC_QUEST_INSERT_QUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_INSERT_QUEST); using struct_t = MSG_FC_QUEST_INSERT_QUEST; };
	template<> struct info<T_FC_QUEST_DELETE_QUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_QUEST_DELETE_QUEST); using struct_t = MSG_FC_QUEST_DELETE_QUEST; };
	template<> struct info<T_FC_RACING_RACINGLIST_REQUEST_ACK> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_RACINGLIST_REQUEST_ACK); using struct_t = MSG_FC_RACING_RACINGLIST_REQUEST_ACK; };
	template<> struct info<T_FC_RACING_RACINGINFO_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_RACINGINFO_REQUEST); using struct_t = MSG_FC_RACING_RACINGINFO_REQUEST; };
	template<> struct info<T_FC_RACING_RACINGINFO_REQUEST_ACK> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_RACINGINFO_REQUEST_ACK); using struct_t = MSG_FC_RACING_RACINGINFO_REQUEST_ACK; };
	template<> struct info<T_FC_RACING_RACINGNOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_RACINGNOTIFY); using struct_t = MSG_FC_RACING_RACINGNOTIFY; };
	template<> struct info<T_FC_RACING_JOIN_ENABLE> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_JOIN_ENABLE); using struct_t = MSG_FC_RACING_JOIN_ENABLE; };
	template<> struct info<T_FC_RACING_JOIN_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_JOIN_REQUEST); using struct_t = MSG_FC_RACING_JOIN_REQUEST; };
	template<> struct info<T_FC_RACING_JOIN_REQUEST_ACK> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_JOIN_REQUEST_ACK); using struct_t = MSG_FC_RACING_JOIN_REQUEST_ACK; };
	template<> struct info<T_FC_RACING_COUNTDOWN> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_COUNTDOWN); using struct_t = MSG_FC_RACING_COUNTDOWN; };
	template<> struct info<T_FC_RACING_CHECKPOINT_CHECK> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_CHECKPOINT_CHECK); using struct_t = MSG_FC_RACING_CHECKPOINT_CHECK; };
	template<> struct info<T_FC_RACING_CHECKPOINT_CHECK_ACK> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_CHECKPOINT_CHECK_ACK); using struct_t = MSG_FC_RACING_CHECKPOINT_CHECK_ACK; };
	template<> struct info<T_FC_RACING_FINISHED> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_FINISHED); using struct_t = MSG_FC_RACING_FINISHED; };
	template<> struct info<T_FC_RACING_OTHER_FINISHED> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_OTHER_FINISHED); using struct_t = MSG_FC_RACING_OTHER_FINISHED; };
	template<> struct info<T_FC_RACING_FINALRANKING> { static constexpr size_t msg_size = sizeof(MSG_FC_RACING_FINALRANKING); using struct_t = MSG_FC_RACING_FINALRANKING; };
	template<> struct info<T_FC_REQUEST_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_REQUEST_REQUEST); using struct_t = MSG_FC_REQUEST_REQUEST; };
	template<> struct info<T_FC_REQUEST_REQUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_REQUEST_REQUEST_OK); using struct_t = MSG_FC_REQUEST_REQUEST_OK; };
	template<> struct info<T_FC_REQUEST_ACCEPT_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_REQUEST_ACCEPT_REQUEST); using struct_t = MSG_FC_REQUEST_ACCEPT_REQUEST; };
	template<> struct info<T_FC_REQUEST_ACCEPT_REQUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_REQUEST_ACCEPT_REQUEST_OK); using struct_t = MSG_FC_REQUEST_ACCEPT_REQUEST_OK; };
	template<> struct info<T_FC_REQUEST_REJECT_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_REQUEST_REJECT_REQUEST); using struct_t = MSG_FC_REQUEST_REJECT_REQUEST; };
	template<> struct info<T_FC_REQUEST_REJECT_REQUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_REQUEST_REJECT_REQUEST_OK); using struct_t = MSG_FC_REQUEST_REJECT_REQUEST_OK; };
	template<> struct info<T_FC_REQUEST_CANCEL_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_REQUEST_CANCEL_REQUEST); using struct_t = MSG_FC_REQUEST_CANCEL_REQUEST; };
	template<> struct info<T_FC_SHOP_PUT_ITEM_HEADER> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_PUT_ITEM_HEADER); using struct_t = MSG_FC_SHOP_PUT_ITEM_HEADER; };
	template<> struct info<T_FC_SHOP_PUT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_PUT_ITEM); using struct_t = MSG_FC_SHOP_PUT_ITEM; };
	template<> struct info<T_FC_SHOP_PUT_ITEM_DONE> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_PUT_ITEM_DONE); using struct_t = MSG_FC_SHOP_PUT_ITEM_DONE; };
	template<> struct info<T_FC_SHOP_GET_ITEMINFO> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_GET_ITEMINFO); using struct_t = MSG_FC_SHOP_GET_ITEMINFO; };
	template<> struct info<T_FC_SHOP_GET_ITEMINFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_GET_ITEMINFO_OK); using struct_t = MSG_FC_SHOP_GET_ITEMINFO_OK; };
	template<> struct info<T_FC_SHOP_BUY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_ITEM); using struct_t = MSG_FC_SHOP_BUY_ITEM; };
	template<> struct info<T_FC_SHOP_BUY_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_ITEM_OK); using struct_t = MSG_FC_SHOP_BUY_ITEM_OK; };
	template<> struct info<T_FC_SHOP_SELL_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_SELL_ITEM); using struct_t = MSG_FC_SHOP_SELL_ITEM; };
	template<> struct info<T_FC_SHOP_SELL_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_SELL_ITEM_OK); using struct_t = MSG_FC_SHOP_SELL_ITEM_OK; };
	template<> struct info<T_FC_SHOP_GET_USED_ITEM_PRICE> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_GET_USED_ITEM_PRICE); using struct_t = MSG_FC_SHOP_GET_USED_ITEM_PRICE; };
	template<> struct info<T_FC_SHOP_GET_USED_ITEM_PRICE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_GET_USED_ITEM_PRICE_OK); using struct_t = MSG_FC_SHOP_GET_USED_ITEM_PRICE_OK; };
	template<> struct info<T_FC_SHOP_GET_SHOP_ITEM_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_GET_SHOP_ITEM_LIST); using struct_t = MSG_FC_SHOP_GET_SHOP_ITEM_LIST; };
	template<> struct info<T_FC_SHOP_REQUEST_REPAIR> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_REQUEST_REPAIR); using struct_t = MSG_FC_SHOP_REQUEST_REPAIR; };
	template<> struct info<T_FC_SHOP_REQUEST_REPAIR_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_REQUEST_REPAIR_OK); using struct_t = MSG_FC_SHOP_REQUEST_REPAIR_OK; };
	template<> struct info<T_FC_SHOP_BUY_CASH_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_CASH_ITEM); using struct_t = MSG_FC_SHOP_BUY_CASH_ITEM; };
	template<> struct info<T_FC_SHOP_BUY_CASH_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_CASH_ITEM_OK); using struct_t = MSG_FC_SHOP_BUY_CASH_ITEM_OK; };
	template<> struct info<T_FC_SHOP_BUY_COLOR_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_COLOR_ITEM); using struct_t = MSG_FC_SHOP_BUY_COLOR_ITEM; };
	template<> struct info<T_FC_SHOP_BUY_COLOR_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_COLOR_ITEM_OK); using struct_t = MSG_FC_SHOP_BUY_COLOR_ITEM_OK; };
	template<> struct info<T_FC_SHOP_BUY_WARPOINT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_WARPOINT_ITEM); using struct_t = MSG_FC_SHOP_BUY_WARPOINT_ITEM; };
	template<> struct info<T_FC_SHOP_BUY_WARPOINT_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_WARPOINT_ITEM_OK); using struct_t = MSG_FC_SHOP_BUY_WARPOINT_ITEM_OK; };
	template<> struct info<T_FC_SHOP_CHECK_GIVE_TARGET> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_CHECK_GIVE_TARGET); using struct_t = MSG_FC_SHOP_CHECK_GIVE_TARGET; };
	template<> struct info<T_FC_SHOP_CHECK_GIVE_TARGET_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_CHECK_GIVE_TARGET_OK); using struct_t = MSG_FC_SHOP_CHECK_GIVE_TARGET_OK; };
	template<> struct info<T_FC_SHOP_INFINITY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_INFINITY_ITEM); using struct_t = MSG_FC_SHOP_INFINITY_ITEM; };
	template<> struct info<T_FC_SHOP_INFINITY_BUY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_INFINITY_BUY_ITEM); using struct_t = MSG_FC_SHOP_INFINITY_BUY_ITEM; };
	template<> struct info<T_FC_SHOP_CLOSE> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_CLOSE); using struct_t = MSG_FC_SHOP_CLOSE; };
	template<> struct info<T_FC_SHOP_BUY_ITEM_UPDATE> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_BUY_ITEM_UPDATE); using struct_t = MSG_FC_SHOP_BUY_ITEM_UPDATE; };
	template<> struct info<T_FC_SHOP_INFLUENCE_BUFF> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_INFLUENCE_BUFF); using struct_t = MSG_FC_SHOP_INFLUENCE_BUFF; };
	template<> struct info<T_FC_SHOP_INFLUENCE_BUFF_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SHOP_INFLUENCE_BUFF_OK); using struct_t = MSG_FC_SHOP_INFLUENCE_BUFF_OK; };
	template<> struct info<T_FC_SKILL_SETUP_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_SETUP_SKILL); using struct_t = MSG_FC_SKILL_SETUP_SKILL; };
	template<> struct info<T_FC_SKILL_SETUP_SKILL_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_SETUP_SKILL_OK); using struct_t = MSG_FC_SKILL_SETUP_SKILL_OK; };
	template<> struct info<T_FC_SKILL_USE_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_USE_SKILL); using struct_t = MSG_FC_SKILL_USE_SKILL; };
	template<> struct info<T_FC_SKILL_USE_SKILL_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_USE_SKILL_OK); using struct_t = MSG_FC_SKILL_USE_SKILL_OK; };
	template<> struct info<T_FC_SKILL_CANCEL_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_CANCEL_SKILL); using struct_t = MSG_FC_SKILL_CANCEL_SKILL; };
	template<> struct info<T_FC_SKILL_INVALIDATE_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_INVALIDATE_SKILL); using struct_t = MSG_FC_SKILL_INVALIDATE_SKILL; };
	template<> struct info<T_FC_SKILL_PREPARE_USE> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_PREPARE_USE); using struct_t = MSG_FC_SKILL_PREPARE_USE; };
	template<> struct info<T_FC_SKILL_PREPARE_USE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_PREPARE_USE_OK); using struct_t = MSG_FC_SKILL_PREPARE_USE_OK; };
	template<> struct info<T_FC_SKILL_CANCEL_PREPARE> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_CANCEL_PREPARE); using struct_t = MSG_FC_SKILL_CANCEL_PREPARE; };
	template<> struct info<T_FC_SKILL_CANCEL_PREPARE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_CANCEL_PREPARE_OK); using struct_t = MSG_FC_SKILL_CANCEL_PREPARE_OK; };
	template<> struct info<T_FC_SKILL_CONFIRM_USE> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_CONFIRM_USE); using struct_t = MSG_FC_SKILL_CONFIRM_USE; };
	template<> struct info<T_FC_SKILL_CONFIRM_USE_ACK> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_CONFIRM_USE_ACK); using struct_t = MSG_FC_SKILL_CONFIRM_USE_ACK; };
	template<> struct info<T_FC_SKILL_CANCEL_SKILL_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_SKILL_CANCEL_SKILL_OK); using struct_t = MSG_FC_SKILL_CANCEL_SKILL_OK; };
	template<> struct info<T_FC_STORE_GET_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_GET_ITEM); using struct_t = MSG_FC_STORE_GET_ITEM; };
	template<> struct info<T_FC_STORE_PUT_ITEM_HEADER> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_PUT_ITEM_HEADER); using struct_t = MSG_FC_STORE_PUT_ITEM_HEADER; };
	template<> struct info<T_FC_STORE_PUT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_PUT_ITEM); using struct_t = MSG_FC_STORE_PUT_ITEM; };
	template<> struct info<T_FC_STORE_PUT_ITEM_DONE> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_PUT_ITEM_DONE); using struct_t = MSG_FC_STORE_PUT_ITEM_DONE; };
	template<> struct info<T_FC_STORE_MOVE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_MOVE_ITEM); using struct_t = MSG_FC_STORE_MOVE_ITEM; };
	template<> struct info<T_FC_STORE_MOVE_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_MOVE_ITEM_OK); using struct_t = MSG_FC_STORE_MOVE_ITEM_OK; };
	template<> struct info<T_FC_STORE_INSERT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_INSERT_ITEM); using struct_t = MSG_FC_STORE_INSERT_ITEM; };
	template<> struct info<T_FC_STORE_DELETE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_DELETE_ITEM); using struct_t = MSG_FC_STORE_DELETE_ITEM; };
	template<> struct info<T_FC_STORE_UPDATE_ITEM_COUNT> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_ITEM_COUNT); using struct_t = MSG_FC_STORE_UPDATE_ITEM_COUNT; };
	template<> struct info<T_FC_STORE_UPDATE_ENDURANCE> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_ENDURANCE); using struct_t = MSG_FC_STORE_UPDATE_ENDURANCE; };
	template<> struct info<T_FC_STORE_UPDATE_POSSESS> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_POSSESS); using struct_t = MSG_FC_STORE_UPDATE_POSSESS; };
	template<> struct info<T_FC_STORE_UPDATE_RARE_FIX> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_RARE_FIX); using struct_t = MSG_FC_STORE_UPDATE_RARE_FIX; };
	template<> struct info<T_FC_STORE_INSERT_USINGITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_INSERT_USINGITEM); using struct_t = MSG_FC_STORE_INSERT_USINGITEM; };
	template<> struct info<T_FC_STORE_DELETE_USINGITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_DELETE_USINGITEM); using struct_t = MSG_FC_STORE_DELETE_USINGITEM; };
	template<> struct info<T_FC_STORE_UPDATE_USINGITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_USINGITEM); using struct_t = MSG_FC_STORE_UPDATE_USINGITEM; };
	template<> struct info<T_FC_STORE_EXPIRE_USINGITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_EXPIRE_USINGITEM); using struct_t = MSG_FC_STORE_EXPIRE_USINGITEM; };
	template<> struct info<T_FC_STORE_UPDATE_ITEMSTORAGE> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_ITEMSTORAGE); using struct_t = MSG_FC_STORE_UPDATE_ITEMSTORAGE; };
	template<> struct info<T_FC_STORE_UPDATE_ITEMNUM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_ITEMNUM); using struct_t = MSG_FC_STORE_UPDATE_ITEMNUM; };
	template<> struct info<T_FC_STORE_REQUEST_QUICKSLOT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_REQUEST_QUICKSLOT_OK); using struct_t = MSG_FC_STORE_REQUEST_QUICKSLOT_OK; };
	template<> struct info<T_FC_STORE_SAVE_QUICKSLOT> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_SAVE_QUICKSLOT); using struct_t = MSG_FC_STORE_SAVE_QUICKSLOT; };
	template<> struct info<T_FC_STORE_LOG_GUILD_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_LOG_GUILD_ITEM); using struct_t = MSG_FC_STORE_LOG_GUILD_ITEM; };
	template<> struct info<T_FC_STORE_LOG_GUILD_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_LOG_GUILD_ITEM_OK); using struct_t = MSG_FC_STORE_LOG_GUILD_ITEM_OK; };
	template<> struct info<T_FC_STORE_UPDATE_ARMOR_ITEM_EVENT_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_STORE_UPDATE_ARMOR_ITEM_EVENT_INFO); using struct_t = MSG_FC_STORE_UPDATE_ARMOR_ITEM_EVENT_INFO; };
	template<> struct info<T_FC_STRING_128> { static constexpr size_t msg_size = sizeof(MSG_FC_STRING_128); using struct_t = MSG_FC_STRING_128; };
	template<> struct info<T_FC_STRING_256> { static constexpr size_t msg_size = sizeof(MSG_FC_STRING_256); using struct_t = MSG_FC_STRING_256; };
	template<> struct info<T_FC_STRING_512> { static constexpr size_t msg_size = sizeof(MSG_FC_STRING_512); using struct_t = MSG_FC_STRING_512; };
	template<> struct info<T_FC_TIMER_START_TIMER> { static constexpr size_t msg_size = sizeof(MSG_FC_TIMER_START_TIMER); using struct_t = MSG_FC_TIMER_START_TIMER; };
	template<> struct info<T_FC_TIMER_STOP_TIMER> { static constexpr size_t msg_size = sizeof(MSG_FC_TIMER_STOP_TIMER); using struct_t = MSG_FC_TIMER_STOP_TIMER; };
	template<> struct info<T_FC_TIMER_UPDATE_TIMER> { static constexpr size_t msg_size = sizeof(MSG_FC_TIMER_UPDATE_TIMER); using struct_t = MSG_FC_TIMER_UPDATE_TIMER; };
	template<> struct info<T_FC_TIMER_PAUSE_TIMER> { static constexpr size_t msg_size = sizeof(MSG_FC_TIMER_PAUSE_TIMER); using struct_t = MSG_FC_TIMER_PAUSE_TIMER; };
	template<> struct info<T_FC_TIMER_CONTINUE_TIMER> { static constexpr size_t msg_size = sizeof(MSG_FC_TIMER_CONTINUE_TIMER); using struct_t = MSG_FC_TIMER_CONTINUE_TIMER; };
	template<> struct info<T_FC_TIMER_TIMEOUT> { static constexpr size_t msg_size = sizeof(MSG_FC_TIMER_TIMEOUT); using struct_t = MSG_FC_TIMER_TIMEOUT; };
	template<> struct info<T_FC_TRADE_REQUEST_TRADE> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_REQUEST_TRADE); using struct_t = MSG_FC_TRADE_REQUEST_TRADE; };
	template<> struct info<T_FC_TRADE_REQUEST_TRADE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_REQUEST_TRADE_OK); using struct_t = MSG_FC_TRADE_REQUEST_TRADE_OK; };
	template<> struct info<T_FC_TRADE_CANCEL_REQUEST> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_CANCEL_REQUEST); using struct_t = MSG_FC_TRADE_CANCEL_REQUEST; };
	template<> struct info<T_FC_TRADE_CANCEL_REQUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_CANCEL_REQUEST_OK); using struct_t = MSG_FC_TRADE_CANCEL_REQUEST_OK; };
	template<> struct info<T_FC_TRADE_ACCEPT_TRADE> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_ACCEPT_TRADE); using struct_t = MSG_FC_TRADE_ACCEPT_TRADE; };
	template<> struct info<T_FC_TRADE_ACCEPT_TRADE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_ACCEPT_TRADE_OK); using struct_t = MSG_FC_TRADE_ACCEPT_TRADE_OK; };
	template<> struct info<T_FC_TRADE_REJECT_TRADE> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_REJECT_TRADE); using struct_t = MSG_FC_TRADE_REJECT_TRADE; };
	template<> struct info<T_FC_TRADE_REJECT_TRADE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_REJECT_TRADE_OK); using struct_t = MSG_FC_TRADE_REJECT_TRADE_OK; };
	template<> struct info<T_FC_TRADE_REJECT_TRADING> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_REJECT_TRADING); using struct_t = MSG_FC_TRADE_REJECT_TRADING; };
	template<> struct info<T_FC_TRADE_SHOW_TRADE_WINDOW> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_SHOW_TRADE_WINDOW); using struct_t = MSG_FC_TRADE_SHOW_TRADE_WINDOW; };
	template<> struct info<T_FC_TRADE_TRANS_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_TRANS_ITEM); using struct_t = MSG_FC_TRADE_TRANS_ITEM; };
	template<> struct info<T_FC_TRADE_TRANS_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_TRANS_ITEM_OK); using struct_t = MSG_FC_TRADE_TRANS_ITEM_OK; };
	template<> struct info<T_FC_TRADE_SEE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_SEE_ITEM); using struct_t = MSG_FC_TRADE_SEE_ITEM; };
	template<> struct info<T_FC_TRADE_SEE_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_SEE_ITEM_OK); using struct_t = MSG_FC_TRADE_SEE_ITEM_OK; };
	template<> struct info<T_FC_TRADE_OK_TRADE> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_OK_TRADE); using struct_t = MSG_FC_TRADE_OK_TRADE; };
	template<> struct info<T_FC_TRADE_OK_TRADE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_OK_TRADE_OK); using struct_t = MSG_FC_TRADE_OK_TRADE_OK; };
	template<> struct info<T_FC_TRADE_CANCEL_TRADE> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_CANCEL_TRADE); using struct_t = MSG_FC_TRADE_CANCEL_TRADE; };
	template<> struct info<T_FC_TRADE_CANCEL_TRADE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_CANCEL_TRADE_OK); using struct_t = MSG_FC_TRADE_CANCEL_TRADE_OK; };
	template<> struct info<T_FC_TRADE_INSERT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_INSERT_ITEM); using struct_t = MSG_FC_TRADE_INSERT_ITEM; };
	template<> struct info<T_FC_TRADE_DELETE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_DELETE_ITEM); using struct_t = MSG_FC_TRADE_DELETE_ITEM; };
	template<> struct info<T_FC_TRADE_UPDATE_ITEM_COUNT> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_UPDATE_ITEM_COUNT); using struct_t = MSG_FC_TRADE_UPDATE_ITEM_COUNT; };
	template<> struct info<T_FC_TRADE_OK_TRADE_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_FC_TRADE_OK_TRADE_NOTIFY); using struct_t = MSG_FC_TRADE_OK_TRADE_NOTIFY; };
	template<> struct info<T_FC_COUNTDOWN_START> { static constexpr size_t msg_size = sizeof(MSG_FC_COUNTDOWN_START); using struct_t = MSG_FC_COUNTDOWN_START; };
	template<> struct info<T_FC_COUNTDOWN_DONE> { static constexpr size_t msg_size = sizeof(MSG_FC_COUNTDOWN_DONE); using struct_t = MSG_FC_COUNTDOWN_DONE; };
	template<> struct info<T_FC_OBJECT_CHANGE_BODYCONDITION> { static constexpr size_t msg_size = sizeof(MSG_FC_OBJECT_CHANGE_BODYCONDITION); using struct_t = MSG_FC_OBJECT_CHANGE_BODYCONDITION; };
	template<> struct info<T_FC_OBJECT_CHANGE_BODYCONDITION_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_OBJECT_CHANGE_BODYCONDITION_OK); using struct_t = MSG_FC_OBJECT_CHANGE_BODYCONDITION_OK; };
	template<> struct info<T_FC_OBJECT_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FC_OBJECT_CHANGE); using struct_t = MSG_FC_OBJECT_CHANGE; };
	template<> struct info<T_FC_AUCTION_REGISTER_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_REGISTER_ITEM); using struct_t = MSG_FC_AUCTION_REGISTER_ITEM; };
	template<> struct info<T_FC_AUCTION_REGISTER_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_REGISTER_ITEM_OK); using struct_t = MSG_FC_AUCTION_REGISTER_ITEM_OK; };
	template<> struct info<T_FC_AUCTION_CANCEL_REGISTER> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_CANCEL_REGISTER); using struct_t = MSG_FC_AUCTION_CANCEL_REGISTER; };
	template<> struct info<T_FC_AUCTION_CANCEL_REGISTER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_CANCEL_REGISTER_OK); using struct_t = MSG_FC_AUCTION_CANCEL_REGISTER_OK; };
	template<> struct info<T_FC_AUCTION_BUY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_BUY_ITEM); using struct_t = MSG_FC_AUCTION_BUY_ITEM; };
	template<> struct info<T_FC_AUCTION_BUY_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_BUY_ITEM_OK); using struct_t = MSG_FC_AUCTION_BUY_ITEM_OK; };
	template<> struct info<T_FC_AUCTION_GET_ITEM_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_GET_ITEM_LIST); using struct_t = MSG_FC_AUCTION_GET_ITEM_LIST; };
	template<> struct info<T_FC_AUCTION_INSERT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_INSERT_ITEM); using struct_t = MSG_FC_AUCTION_INSERT_ITEM; };
	template<> struct info<T_FC_AUCTION_PUT_ENCHANT> { static constexpr size_t msg_size = sizeof(MSG_FC_AUCTION_PUT_ENCHANT); using struct_t = MSG_FC_AUCTION_PUT_ENCHANT; };
	template<> struct info<T_FC_CITYWAR_START_WAR> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_START_WAR); using struct_t = MSG_FC_CITYWAR_START_WAR; };
	template<> struct info<T_FC_CITYWAR_MONSTER_DEAD> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_MONSTER_DEAD); using struct_t = MSG_FC_CITYWAR_MONSTER_DEAD; };
	template<> struct info<T_FC_CITYWAR_END_WAR> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_END_WAR); using struct_t = MSG_FC_CITYWAR_END_WAR; };
	template<> struct info<T_FC_CITYWAR_GET_OCCUPYINFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_GET_OCCUPYINFO_OK); using struct_t = MSG_FC_CITYWAR_GET_OCCUPYINFO_OK; };
	template<> struct info<T_FC_CITYWAR_SET_SETTINGTIME> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_SET_SETTINGTIME); using struct_t = MSG_FC_CITYWAR_SET_SETTINGTIME; };
	template<> struct info<T_FC_CITYWAR_SET_TEX> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_SET_TEX); using struct_t = MSG_FC_CITYWAR_SET_TEX; };
	template<> struct info<T_FC_CITYWAR_SET_BRIEFING> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_SET_BRIEFING); using struct_t = MSG_FC_CITYWAR_SET_BRIEFING; };
	template<> struct info<T_FC_CITYWAR_BRING_SUMOFTEX_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_CITYWAR_BRING_SUMOFTEX_OK); using struct_t = MSG_FC_CITYWAR_BRING_SUMOFTEX_OK; };
	template<> struct info<T_FC_WAR_NOTIFY_INVASION> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_NOTIFY_INVASION); using struct_t = MSG_FC_WAR_NOTIFY_INVASION; };
	template<> struct info<T_FC_WAR_NOTIFY_INFLUENCE_MONSTER_DEAD> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_NOTIFY_INFLUENCE_MONSTER_DEAD); using struct_t = MSG_FC_WAR_NOTIFY_INFLUENCE_MONSTER_DEAD; };
	template<> struct info<T_FC_WAR_NOTIFY_INFLUENCE_MONSTER_INVASION> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_NOTIFY_INFLUENCE_MONSTER_INVASION); using struct_t = MSG_FC_WAR_NOTIFY_INFLUENCE_MONSTER_INVASION; };
	template<> struct info<T_FC_WAR_BOSS_MONSTER_SUMMON_DATA> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_BOSS_MONSTER_SUMMON_DATA); using struct_t = MSG_FC_WAR_BOSS_MONSTER_SUMMON_DATA; };
	template<> struct info<T_FC_WAR_JACO_MONSTER_SUMMON> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_JACO_MONSTER_SUMMON); using struct_t = MSG_FC_WAR_JACO_MONSTER_SUMMON; };
	template<> struct info<T_FC_WAR_STRATEGYPOINT_MONSTER_SUMMON> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_STRATEGYPOINT_MONSTER_SUMMON); using struct_t = MSG_FC_WAR_STRATEGYPOINT_MONSTER_SUMMON; };
	template<> struct info<T_FC_WAR_SIGN_BOARD_INSERT_STRING> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_SIGN_BOARD_INSERT_STRING); using struct_t = MSG_FC_WAR_SIGN_BOARD_INSERT_STRING; };
	template<> struct info<T_FC_WAR_SIGN_BOARD_DELETE_STRING> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_SIGN_BOARD_DELETE_STRING); using struct_t = MSG_FC_WAR_SIGN_BOARD_DELETE_STRING; };
	template<> struct info<T_FC_WAR_REQ_SIGN_BOARD_STRING_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_REQ_SIGN_BOARD_STRING_LIST); using struct_t = MSG_FC_WAR_REQ_SIGN_BOARD_STRING_LIST; };
	template<> struct info<T_FC_WAR_REQ_SIGN_BOARD_STRING_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_REQ_SIGN_BOARD_STRING_LIST_OK); using struct_t = MSG_FC_WAR_REQ_SIGN_BOARD_STRING_LIST_OK; };
	template<> struct info<T_FC_WAR_UPDATE_CONTRIBUTION_POINT_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_UPDATE_CONTRIBUTION_POINT_OK); using struct_t = MSG_FC_WAR_UPDATE_CONTRIBUTION_POINT_OK; };
	template<> struct info<T_FC_WAR_INFLUENCE_DATA> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_INFLUENCE_DATA); using struct_t = MSG_FC_WAR_INFLUENCE_DATA; };
	template<> struct info<T_FC_WAR_MONSTER_CREATED> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_MONSTER_CREATED); using struct_t = MSG_FC_WAR_MONSTER_CREATED; };
	template<> struct info<T_FC_WAR_MONSTER_AUTO_DESTROYED> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_MONSTER_AUTO_DESTROYED); using struct_t = MSG_FC_WAR_MONSTER_AUTO_DESTROYED; };
	template<> struct info<T_FC_WAR_MONSTER_DEAD> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_MONSTER_DEAD); using struct_t = MSG_FC_WAR_MONSTER_DEAD; };
	template<> struct info<T_FC_WAR_BOSS_CONTRIBUTION_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_BOSS_CONTRIBUTION_GUILD); using struct_t = MSG_FC_WAR_BOSS_CONTRIBUTION_GUILD; };
	template<> struct info<T_FC_WAR_INFLUENCE_CONSECUTIVE_VICTORITES> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_INFLUENCE_CONSECUTIVE_VICTORITES); using struct_t = MSG_FC_WAR_INFLUENCE_CONSECUTIVE_VICTORITES; };
	template<> struct info<T_FC_WAR_INFLUENCE_CONSECUTIVE_POINT> { static constexpr size_t msg_size = sizeof(MSG_FC_WAR_INFLUENCE_CONSECUTIVE_POINT); using struct_t = MSG_FC_WAR_INFLUENCE_CONSECUTIVE_POINT; };
	template<> struct info<T_FC_BAZAAR_CUSTOMER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_CUSTOMER_INFO_OK); using struct_t = MSG_FC_BAZAAR_CUSTOMER_INFO_OK; };
	template<> struct info<T_FC_BAZAAR_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_INFO_OK); using struct_t = MSG_FC_BAZAAR_INFO_OK; };
	template<> struct info<T_FC_BAZAAR_SELL_PUT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_PUT_ITEM); using struct_t = MSG_FC_BAZAAR_SELL_PUT_ITEM; };
	template<> struct info<T_FC_BAZAAR_SELL_PUT_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_PUT_ITEM_OK); using struct_t = MSG_FC_BAZAAR_SELL_PUT_ITEM_OK; };
	template<> struct info<T_FC_BAZAAR_SELL_CANCEL_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_CANCEL_ITEM); using struct_t = MSG_FC_BAZAAR_SELL_CANCEL_ITEM; };
	template<> struct info<T_FC_BAZAAR_SELL_CANCEL_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_CANCEL_ITEM_OK); using struct_t = MSG_FC_BAZAAR_SELL_CANCEL_ITEM_OK; };
	template<> struct info<T_FC_BAZAAR_SELL_START> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_START); using struct_t = MSG_FC_BAZAAR_SELL_START; };
	template<> struct info<T_FC_BAZAAR_SELL_REQUEST_ITEMLIST> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_REQUEST_ITEMLIST); using struct_t = MSG_FC_BAZAAR_SELL_REQUEST_ITEMLIST; };
	template<> struct info<T_FC_BAZAAR_SELL_REQUEST_ITEMLIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_REQUEST_ITEMLIST_OK); using struct_t = MSG_FC_BAZAAR_SELL_REQUEST_ITEMLIST_OK; };
	template<> struct info<T_FC_BAZAAR_SELL_ITEM_ENCHANTLIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_ITEM_ENCHANTLIST_OK); using struct_t = MSG_FC_BAZAAR_SELL_ITEM_ENCHANTLIST_OK; };
	template<> struct info<T_FC_BAZAAR_SELL_BUY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_BUY_ITEM); using struct_t = MSG_FC_BAZAAR_SELL_BUY_ITEM; };
	template<> struct info<T_FC_BAZAAR_SELL_BUY_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_SELL_BUY_ITEM_OK); using struct_t = MSG_FC_BAZAAR_SELL_BUY_ITEM_OK; };
	template<> struct info<T_FC_BAZAAR_BUY_PUT_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_PUT_ITEM); using struct_t = MSG_FC_BAZAAR_BUY_PUT_ITEM; };
	template<> struct info<T_FC_BAZAAR_BUY_PUT_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_PUT_ITEM_OK); using struct_t = MSG_FC_BAZAAR_BUY_PUT_ITEM_OK; };
	template<> struct info<T_FC_BAZAAR_BUY_CANCEL_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_CANCEL_ITEM); using struct_t = MSG_FC_BAZAAR_BUY_CANCEL_ITEM; };
	template<> struct info<T_FC_BAZAAR_BUY_CANCEL_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_CANCEL_ITEM_OK); using struct_t = MSG_FC_BAZAAR_BUY_CANCEL_ITEM_OK; };
	template<> struct info<T_FC_BAZAAR_BUY_START> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_START); using struct_t = MSG_FC_BAZAAR_BUY_START; };
	template<> struct info<T_FC_BAZAAR_BUY_REQUEST_ITEMLIST> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_REQUEST_ITEMLIST); using struct_t = MSG_FC_BAZAAR_BUY_REQUEST_ITEMLIST; };
	template<> struct info<T_FC_BAZAAR_BUY_REQUEST_ITEMLIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_REQUEST_ITEMLIST_OK); using struct_t = MSG_FC_BAZAAR_BUY_REQUEST_ITEMLIST_OK; };
	template<> struct info<T_FC_BAZAAR_BUY_SELL_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_SELL_ITEM); using struct_t = MSG_FC_BAZAAR_BUY_SELL_ITEM; };
	template<> struct info<T_FC_BAZAAR_BUY_SELL_ITEM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_BAZAAR_BUY_SELL_ITEM_OK); using struct_t = MSG_FC_BAZAAR_BUY_SELL_ITEM_OK; };
	template<> struct info<T_FC_ARENA_REQUEST_TEAM> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_REQUEST_TEAM); using struct_t = MSG_FC_ARENA_REQUEST_TEAM; };
	template<> struct info<T_FC_ARENA_REQUEST_TEAM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_REQUEST_TEAM_OK); using struct_t = MSG_FC_ARENA_REQUEST_TEAM_OK; };
	template<> struct info<T_FC_ARENA_CREATE_TEAM> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_CREATE_TEAM); using struct_t = MSG_FC_ARENA_CREATE_TEAM; };
	template<> struct info<T_FC_ARENA_CREATE_TEAM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_CREATE_TEAM_OK); using struct_t = MSG_FC_ARENA_CREATE_TEAM_OK; };
	template<> struct info<T_FC_ARENA_ENTER_TEAM> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ENTER_TEAM); using struct_t = MSG_FC_ARENA_ENTER_TEAM; };
	template<> struct info<T_FC_ARENA_ENTER_TEAM_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ENTER_TEAM_OK); using struct_t = MSG_FC_ARENA_ENTER_TEAM_OK; };
	template<> struct info<T_FC_ARENA_TEAM_MEMBER_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_TEAM_MEMBER_LIST); using struct_t = MSG_FC_ARENA_TEAM_MEMBER_LIST; };
	template<> struct info<T_FC_ARENA_REAVE_TEAM> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_REAVE_TEAM); using struct_t = MSG_FC_ARENA_REAVE_TEAM; };
	template<> struct info<T_FC_ARENA_TEAM_READY> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_TEAM_READY); using struct_t = MSG_FC_ARENA_TEAM_READY; };
	template<> struct info<T_FC_ARENA_ENTER_ROOM> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ENTER_ROOM); using struct_t = MSG_FC_ARENA_ENTER_ROOM; };
	template<> struct info<T_FC_ARENA_ENTER_ROOM_WARP> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ENTER_ROOM_WARP); using struct_t = MSG_FC_ARENA_ENTER_ROOM_WARP; };
	template<> struct info<T_FC_ARENA_ROOM_WAR_START> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ROOM_WAR_START); using struct_t = MSG_FC_ARENA_ROOM_WAR_START; };
	template<> struct info<T_FC_ARENA_ROOM_WAR_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ROOM_WAR_INFO); using struct_t = MSG_FC_ARENA_ROOM_WAR_INFO; };
	template<> struct info<T_FC_ARENA_ROOM_WAR_FINISH_HEADER> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ROOM_WAR_FINISH_HEADER); using struct_t = MSG_FC_ARENA_ROOM_WAR_FINISH_HEADER; };
	template<> struct info<T_FC_ARENA_ROOM_WAR_FINISH> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ROOM_WAR_FINISH); using struct_t = MSG_FC_ARENA_ROOM_WAR_FINISH; };
	template<> struct info<T_FC_ARENA_ROOM_WAR_FINISH_DONE> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ROOM_WAR_FINISH_DONE); using struct_t = MSG_FC_ARENA_ROOM_WAR_FINISH_DONE; };
	template<> struct info<T_FC_ARENA_ROOM_WAR_FINISH_DRAW> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_ROOM_WAR_FINISH_DRAW); using struct_t = MSG_FC_ARENA_ROOM_WAR_FINISH_DRAW; };
	template<> struct info<T_FC_ARENA_FINISH_WARP_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_FINISH_WARP_OK); using struct_t = MSG_FC_ARENA_FINISH_WARP_OK; };
	template<> struct info<T_FC_ARENA_REQUEST_CREATE_TEAMINFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_REQUEST_CREATE_TEAMINFO_OK); using struct_t = MSG_FC_ARENA_REQUEST_CREATE_TEAMINFO_OK; };
	template<> struct info<T_FC_ARENA_REQUEST_OTHER_TEAM_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_REQUEST_OTHER_TEAM_INFO_OK); using struct_t = MSG_FC_ARENA_REQUEST_OTHER_TEAM_INFO_OK; };
	template<> struct info<T_FC_ARENA_GM_COMMAND_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_GM_COMMAND_INFO); using struct_t = MSG_FC_ARENA_GM_COMMAND_INFO; };
	template<> struct info<T_FC_ARENA_GM_COMMAND_INFO_DONE> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_GM_COMMAND_INFO_DONE); using struct_t = MSG_FC_ARENA_GM_COMMAND_INFO_DONE; };
	template<> struct info<T_FC_ARENA_WATCH_READY> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_WATCH_READY); using struct_t = MSG_FC_ARENA_WATCH_READY; };
	template<> struct info<T_FC_ARENA_WATCH_START> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_WATCH_START); using struct_t = MSG_FC_ARENA_WATCH_START; };
	template<> struct info<T_FC_ARENA_WATCH_REMOVE_USER> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_WATCH_REMOVE_USER); using struct_t = MSG_FC_ARENA_WATCH_REMOVE_USER; };
	template<> struct info<T_FC_ARENA_POSSIBLE_GAMESTART> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_POSSIBLE_GAMESTART); using struct_t = MSG_FC_ARENA_POSSIBLE_GAMESTART; };
	template<> struct info<T_FC_ARENA_PLAY_CHARACTER_TYPE> { static constexpr size_t msg_size = sizeof(MSG_FC_ARENA_PLAY_CHARACTER_TYPE); using struct_t = MSG_FC_ARENA_PLAY_CHARACTER_TYPE; };
	template<> struct info<T_FC_TUTORIAL_START_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TUTORIAL_START_OK); using struct_t = MSG_FC_TUTORIAL_START_OK; };
	template<> struct info<T_FC_TUTORIAL_COMPLETE> { static constexpr size_t msg_size = sizeof(MSG_FC_TUTORIAL_COMPLETE); using struct_t = MSG_FC_TUTORIAL_COMPLETE; };
	template<> struct info<T_FC_TUTORIAL_COMPLETE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_TUTORIAL_COMPLETE_OK); using struct_t = MSG_FC_TUTORIAL_COMPLETE_OK; };
	template<> struct info<T_FC_OUTPOST_WAR_BEFORE> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_WAR_BEFORE); using struct_t = MSG_FC_OUTPOST_WAR_BEFORE; };
	template<> struct info<T_FC_OUTPOST_WAR_START> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_WAR_START); using struct_t = MSG_FC_OUTPOST_WAR_START; };
	template<> struct info<T_FC_OUTPOST_PROTECTOR_DESTROY> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_PROTECTOR_DESTROY); using struct_t = MSG_FC_OUTPOST_PROTECTOR_DESTROY; };
	template<> struct info<T_FC_OUTPOST_RESET_START> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_RESET_START); using struct_t = MSG_FC_OUTPOST_RESET_START; };
	template<> struct info<T_FC_OUTPOST_RESET_START_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_RESET_START_OK); using struct_t = MSG_FC_OUTPOST_RESET_START_OK; };
	template<> struct info<T_FC_OUTPOST_RESET_DESTROY> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_RESET_DESTROY); using struct_t = MSG_FC_OUTPOST_RESET_DESTROY; };
	template<> struct info<T_FC_OUTPOST_RESET_SUCCESS> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_RESET_SUCCESS); using struct_t = MSG_FC_OUTPOST_RESET_SUCCESS; };
	template<> struct info<T_FC_OUTPOST_WAR_END> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_WAR_END); using struct_t = MSG_FC_OUTPOST_WAR_END; };
	template<> struct info<T_FC_OUTPOST_NEXTWAR_INFO_REQUEST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_NEXTWAR_INFO_REQUEST_OK); using struct_t = MSG_FC_OUTPOST_NEXTWAR_INFO_REQUEST_OK; };
	template<> struct info<T_FC_OUTPOST_NEXTWAR_SET_TIME> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_NEXTWAR_SET_TIME); using struct_t = MSG_FC_OUTPOST_NEXTWAR_SET_TIME; };
	template<> struct info<T_FC_OUTPOST_NEXTWAR_SET_TIME_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_NEXTWAR_SET_TIME_OK); using struct_t = MSG_FC_OUTPOST_NEXTWAR_SET_TIME_OK; };
	template<> struct info<T_FC_OUTPOST_WAR_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_OUTPOST_WAR_INFO); using struct_t = MSG_FC_OUTPOST_WAR_INFO; };
	template<> struct info<T_FC_INFINITY_MODE_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_MODE_LIST_OK); using struct_t = MSG_FC_INFINITY_MODE_LIST_OK; };
	template<> struct info<T_FC_INFINITY_READY_LIST> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_READY_LIST); using struct_t = MSG_FC_INFINITY_READY_LIST; };
	template<> struct info<T_FC_INFINITY_READY_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_READY_LIST_OK); using struct_t = MSG_FC_INFINITY_READY_LIST_OK; };
	template<> struct info<T_FC_INFINITY_CREATE> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CREATE); using struct_t = MSG_FC_INFINITY_CREATE; };
	template<> struct info<T_FC_INFINITY_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CREATE_OK); using struct_t = MSG_FC_INFINITY_CREATE_OK; };
	template<> struct info<T_FC_INFINITY_JOIN> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_JOIN); using struct_t = MSG_FC_INFINITY_JOIN; };
	template<> struct info<T_FC_INFINITY_JOIN_REQUEST_MASTERUSER> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_JOIN_REQUEST_MASTERUSER); using struct_t = MSG_FC_INFINITY_JOIN_REQUEST_MASTERUSER; };
	template<> struct info<T_FC_INFINITY_JOIN_REQUEST_MASTERUSER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_JOIN_REQUEST_MASTERUSER_OK); using struct_t = MSG_FC_INFINITY_JOIN_REQUEST_MASTERUSER_OK; };
	template<> struct info<T_FC_INFINITY_JOIN_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_JOIN_OK); using struct_t = MSG_FC_INFINITY_JOIN_OK; };
	template<> struct info<T_FC_INFINITY_MEMBER_INFO_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_MEMBER_INFO_LIST_OK); using struct_t = MSG_FC_INFINITY_MEMBER_INFO_LIST_OK; };
	template<> struct info<T_FC_INFINITY_CHANGE_MASTER> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CHANGE_MASTER); using struct_t = MSG_FC_INFINITY_CHANGE_MASTER; };
	template<> struct info<T_FC_INFINITY_CHANGE_MASTER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CHANGE_MASTER_OK); using struct_t = MSG_FC_INFINITY_CHANGE_MASTER_OK; };
	template<> struct info<T_FC_INFINITY_LEAVE_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_LEAVE_OK); using struct_t = MSG_FC_INFINITY_LEAVE_OK; };
	template<> struct info<T_FC_INFINITY_BAN> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_BAN); using struct_t = MSG_FC_INFINITY_BAN; };
	template<> struct info<T_FC_INFINITY_BAN_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_BAN_OK); using struct_t = MSG_FC_INFINITY_BAN_OK; };
	template<> struct info<T_FC_INFINITY_READY_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_READY_OK); using struct_t = MSG_FC_INFINITY_READY_OK; };
	template<> struct info<T_FC_INFINITY_READY_CANCEL_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_READY_CANCEL_OK); using struct_t = MSG_FC_INFINITY_READY_CANCEL_OK; };
	template<> struct info<T_FC_INFINITY_ENTER> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_ENTER); using struct_t = MSG_FC_INFINITY_ENTER; };
	template<> struct info<T_FC_INFINITY_CINEMA> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CINEMA); using struct_t = MSG_FC_INFINITY_CINEMA; };
	template<> struct info<T_FC_INFINITY_TENDER_DROPITEM_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_TENDER_DROPITEM_INFO); using struct_t = MSG_FC_INFINITY_TENDER_DROPITEM_INFO; };
	template<> struct info<T_FC_INFINITY_TENDER_START> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_TENDER_START); using struct_t = MSG_FC_INFINITY_TENDER_START; };
	template<> struct info<T_FC_INFINITY_TENDER_PUT_IN_TENDER> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_TENDER_PUT_IN_TENDER); using struct_t = MSG_FC_INFINITY_TENDER_PUT_IN_TENDER; };
	template<> struct info<T_FC_INFINITY_TENDER_PUT_IN_TENDER_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_TENDER_PUT_IN_TENDER_OK); using struct_t = MSG_FC_INFINITY_TENDER_PUT_IN_TENDER_OK; };
	template<> struct info<T_FC_INFINITY_TENDER_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_TENDER_RESULT); using struct_t = MSG_FC_INFINITY_TENDER_RESULT; };
	template<> struct info<T_FC_INFINITY_TENDER_RESULT_TIMEOVER> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_TENDER_RESULT_TIMEOVER); using struct_t = MSG_FC_INFINITY_TENDER_RESULT_TIMEOVER; };
	template<> struct info<T_FC_INFINITY_TENDER_RESULT_ALLGIVEUP> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_TENDER_RESULT_ALLGIVEUP); using struct_t = MSG_FC_INFINITY_TENDER_RESULT_ALLGIVEUP; };
	template<> struct info<T_FC_INFINITY_CHANGE_LIMITTIME> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CHANGE_LIMITTIME); using struct_t = MSG_FC_INFINITY_CHANGE_LIMITTIME; };
	template<> struct info<T_FC_INFINITY_JOIN_CANCEL> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_JOIN_CANCEL); using struct_t = MSG_FC_INFINITY_JOIN_CANCEL; };
	template<> struct info<T_FC_INFINITY_JOIN_CANCEL_REQUEST_MASTERUSER> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_JOIN_CANCEL_REQUEST_MASTERUSER); using struct_t = MSG_FC_INFINITY_JOIN_CANCEL_REQUEST_MASTERUSER; };
	template<> struct info<T_FC_INFINITY_DELETED_CINEMA> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_DELETED_CINEMA); using struct_t = MSG_FC_INFINITY_DELETED_CINEMA; };
	template<> struct info<T_FC_INFINITY_ENTER_BY_DISCONNECT> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_ENTER_BY_DISCONNECT); using struct_t = MSG_FC_INFINITY_ENTER_BY_DISCONNECT; };
	template<> struct info<T_FC_INFINITY_CHANGE_ALIVE_FOR_GAMECLEAR_MONSTERHP> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CHANGE_ALIVE_FOR_GAMECLEAR_MONSTERHP); using struct_t = MSG_FC_INFINITY_CHANGE_ALIVE_FOR_GAMECLEAR_MONSTERHP; };
	template<> struct info<T_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL); using struct_t = MSG_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL; };
	template<> struct info<T_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL_OK); using struct_t = MSG_FC_INFINITY_CHANGE_DIFFICULTY_LEVEL_OK; };
	template<> struct info<T_FC_INFINITY_READY_CANCEL_ALL_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_READY_CANCEL_ALL_OK); using struct_t = MSG_FC_INFINITY_READY_CANCEL_ALL_OK; };
	template<> struct info<T_FC_INFINITY_SKIP_ENDING_CINEMA_OK> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_SKIP_ENDING_CINEMA_OK); using struct_t = MSG_FC_INFINITY_SKIP_ENDING_CINEMA_OK; };
	template<> struct info<T_FC_INFINITY_MOVIE> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_MOVIE); using struct_t = MSG_FC_INFINITY_MOVIE; };
	template<> struct info<T_FC_INFINITY_SET_LIMITTIME> { static constexpr size_t msg_size = sizeof(MSG_FC_INFINITY_SET_LIMITTIME); using struct_t = MSG_FC_INFINITY_SET_LIMITTIME; };
	template<> struct info<T_FI_ADMIN_GET_CHARACTER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FI_ADMIN_GET_CHARACTER_INFO); using struct_t = MSG_FI_ADMIN_GET_CHARACTER_INFO; };
	template<> struct info<T_FI_ADMIN_GET_CHARACTER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_ADMIN_GET_CHARACTER_INFO_OK); using struct_t = MSG_FI_ADMIN_GET_CHARACTER_INFO_OK; };
	template<> struct info<T_FI_ADMIN_CALL_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FI_ADMIN_CALL_CHARACTER); using struct_t = MSG_FI_ADMIN_CALL_CHARACTER; };
	template<> struct info<T_FI_ADMIN_MOVETO_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FI_ADMIN_MOVETO_CHARACTER); using struct_t = MSG_FI_ADMIN_MOVETO_CHARACTER; };
	template<> struct info<T_FI_ADMIN_CHANGE_WEATHER> { static constexpr size_t msg_size = sizeof(MSG_FI_ADMIN_CHANGE_WEATHER); using struct_t = MSG_FI_ADMIN_CHANGE_WEATHER; };
	template<> struct info<T_FI_CHARACTER_DELETE_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FI_CHARACTER_DELETE_CHARACTER); using struct_t = MSG_FI_CHARACTER_DELETE_CHARACTER; };
	template<> struct info<T_FI_CHARACTER_CHANGE_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FI_CHARACTER_CHANGE_LEVEL); using struct_t = MSG_FI_CHARACTER_CHANGE_LEVEL; };
	template<> struct info<T_FI_CHARACTER_UPDATE_GUILD_INFO> { static constexpr size_t msg_size = sizeof(MSG_FI_CHARACTER_UPDATE_GUILD_INFO); using struct_t = MSG_FI_CHARACTER_UPDATE_GUILD_INFO; };
	template<> struct info<T_FI_CHARACTER_UPDATE_MAP_CHANNEL> { static constexpr size_t msg_size = sizeof(MSG_FI_CHARACTER_UPDATE_MAP_CHANNEL); using struct_t = MSG_FI_CHARACTER_UPDATE_MAP_CHANNEL; };
	template<> struct info<T_FI_CHARACTER_CHANGE_INFLUENCE_TYPE> { static constexpr size_t msg_size = sizeof(MSG_FI_CHARACTER_CHANGE_INFLUENCE_TYPE); using struct_t = MSG_FI_CHARACTER_CHANGE_INFLUENCE_TYPE; };
	template<> struct info<T_FI_UPDATE_SUBLEADER> { static constexpr size_t msg_size = sizeof(MSG_FI_UPDATE_SUBLEADER); using struct_t = MSG_FI_UPDATE_SUBLEADER; };
	template<> struct info<T_FI_CREATE_GUILD_BY_SUBLEADER> { static constexpr size_t msg_size = sizeof(MSG_FI_CREATE_GUILD_BY_SUBLEADER); using struct_t = MSG_FI_CREATE_GUILD_BY_SUBLEADER; };
	template<> struct info<T_FI_CHAT_MAP> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_MAP); using struct_t = MSG_FI_CHAT_MAP; };
	template<> struct info<T_FI_CHAT_REGION> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_REGION); using struct_t = MSG_FI_CHAT_REGION; };
	template<> struct info<T_FI_CHAT_CHANGE_CHAT_FLAG> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_CHANGE_CHAT_FLAG); using struct_t = MSG_FI_CHAT_CHANGE_CHAT_FLAG; };
	template<> struct info<T_FI_CHAT_CASH_ALL> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_CASH_ALL); using struct_t = MSG_FI_CHAT_CASH_ALL; };
	template<> struct info<T_FI_CHAT_ARENA> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_ARENA); using struct_t = MSG_FI_CHAT_ARENA; };
	template<> struct info<T_FI_CHAT_OUTPOST_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_OUTPOST_GUILD); using struct_t = MSG_FI_CHAT_OUTPOST_GUILD; };
	template<> struct info<T_FI_CHAT_INFINITY> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_INFINITY); using struct_t = MSG_FI_CHAT_INFINITY; };
	template<> struct info<T_FI_CHAT_CNC> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_CNC); using struct_t = MSG_FI_CHAT_CNC; };
	template<> struct info<T_FI_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT_OK); using struct_t = MSG_FI_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT_OK; };
	template<> struct info<T_IC_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT); using struct_t = MSG_IC_CHAT_ONLINE_EACHOTHER_FRIEND_COUNT; };
	template<> struct info<T_FI_EVENT_NOTIFY_WARP> { static constexpr size_t msg_size = sizeof(MSG_FI_EVENT_NOTIFY_WARP); using struct_t = MSG_FI_EVENT_NOTIFY_WARP; };
	template<> struct info<T_FI_EVENT_CHAT_BLOCK> { static constexpr size_t msg_size = sizeof(MSG_FI_EVENT_CHAT_BLOCK); using struct_t = MSG_FI_EVENT_CHAT_BLOCK; };
	template<> struct info<T_FI_GUILD_NOTIFY_START_WAR> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_NOTIFY_START_WAR); using struct_t = MSG_FI_GUILD_NOTIFY_START_WAR; };
	template<> struct info<T_FI_GUILD_NOTIFY_END_WAR> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_NOTIFY_END_WAR); using struct_t = MSG_FI_GUILD_NOTIFY_END_WAR; };
	template<> struct info<T_FI_GUILD_DELETE_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_DELETE_GUILD); using struct_t = MSG_FI_GUILD_DELETE_GUILD; };
	template<> struct info<T_FI_GUILD_ADD_GUILD_FAME> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_ADD_GUILD_FAME); using struct_t = MSG_FI_GUILD_ADD_GUILD_FAME; };
	template<> struct info<T_FI_GUILD_REG_DELETE_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_REG_DELETE_GUILD); using struct_t = MSG_FI_GUILD_REG_DELETE_GUILD; };
	template<> struct info<T_FI_GUILD_DISMEMBER> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_DISMEMBER); using struct_t = MSG_FI_GUILD_DISMEMBER; };
	template<> struct info<T_FI_GUILD_OUTPOST> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_OUTPOST); using struct_t = MSG_FI_GUILD_OUTPOST; };
	template<> struct info<T_FI_GUILD_BONUS_EXP_RATE> { static constexpr size_t msg_size = sizeof(MSG_FI_GUILD_BONUS_EXP_RATE); using struct_t = MSG_FI_GUILD_BONUS_EXP_RATE; };
	template<> struct info<T_FI_PARTY_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_CREATE_OK); using struct_t = MSG_FI_PARTY_CREATE_OK; };
	template<> struct info<T_FI_PARTY_ACCEPT_INVITE_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_ACCEPT_INVITE_OK); using struct_t = MSG_FI_PARTY_ACCEPT_INVITE_OK; };
	template<> struct info<T_FI_PARTY_BAN_MEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_BAN_MEMBER_OK); using struct_t = MSG_FI_PARTY_BAN_MEMBER_OK; };
	template<> struct info<T_FI_PARTY_LEAVE_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_LEAVE_OK); using struct_t = MSG_FI_PARTY_LEAVE_OK; };
	template<> struct info<T_FI_PARTY_TRANSFER_MASTER_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_TRANSFER_MASTER_OK); using struct_t = MSG_FI_PARTY_TRANSFER_MASTER_OK; };
	template<> struct info<T_FI_PARTY_DISMEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_DISMEMBER_OK); using struct_t = MSG_FI_PARTY_DISMEMBER_OK; };
	template<> struct info<T_FI_PARTY_CHANGE_FLIGHT_FORMATION_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_CHANGE_FLIGHT_FORMATION_OK); using struct_t = MSG_FI_PARTY_CHANGE_FLIGHT_FORMATION_OK; };
	template<> struct info<T_FI_PARTY_CHANGE_FLIGHT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_CHANGE_FLIGHT_POSITION); using struct_t = MSG_FI_PARTY_CHANGE_FLIGHT_POSITION; };
	template<> struct info<T_FI_PARTY_CANCEL_FLIGHT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_CANCEL_FLIGHT_POSITION); using struct_t = MSG_FI_PARTY_CANCEL_FLIGHT_POSITION; };
	template<> struct info<T_FI_PARTY_NOTIFY_BATTLE_PARTY> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_NOTIFY_BATTLE_PARTY); using struct_t = MSG_FI_PARTY_NOTIFY_BATTLE_PARTY; };
	template<> struct info<T_FI_PARTY_NOTIFY_BATTLE_PARTY_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_NOTIFY_BATTLE_PARTY_OK); using struct_t = MSG_FI_PARTY_NOTIFY_BATTLE_PARTY_OK; };
	template<> struct info<T_FI_PARTY_ADD_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_ADD_MEMBER); using struct_t = MSG_FI_PARTY_ADD_MEMBER; };
	template<> struct info<T_FI_PARTY_DELETE_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_DELETE_MEMBER); using struct_t = MSG_FI_PARTY_DELETE_MEMBER; };
	template<> struct info<T_FI_PARTY_UPDATE_ITEM_POS> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_UPDATE_ITEM_POS); using struct_t = MSG_FI_PARTY_UPDATE_ITEM_POS; };
	template<> struct info<T_FI_PARTY_ALL_FLIGHT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_ALL_FLIGHT_POSITION); using struct_t = MSG_FI_PARTY_ALL_FLIGHT_POSITION; };
	template<> struct info<T_FI_PARTY_UPDATE_PARTY_INFO> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_UPDATE_PARTY_INFO); using struct_t = MSG_FI_PARTY_UPDATE_PARTY_INFO; };
	template<> struct info<T_FI_PARTY_CHANGE_EXP_DISTRIBUTE_TYPE> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_CHANGE_EXP_DISTRIBUTE_TYPE); using struct_t = MSG_FI_PARTY_CHANGE_EXP_DISTRIBUTE_TYPE; };
	template<> struct info<T_FI_PARTY_CHANGE_ITEM_DISTRIBUTE_TYPE> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_CHANGE_ITEM_DISTRIBUTE_TYPE); using struct_t = MSG_FI_PARTY_CHANGE_ITEM_DISTRIBUTE_TYPE; };
	template<> struct info<T_FI_PARTY_CHANGE_FORMATION_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_CHANGE_FORMATION_SKILL); using struct_t = MSG_FI_PARTY_CHANGE_FORMATION_SKILL; };
	template<> struct info<T_FI_PARTY_AUTO_CREATE> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_AUTO_CREATE); using struct_t = MSG_FI_PARTY_AUTO_CREATE; };
	template<> struct info<T_FI_PARTY_AUTO_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_AUTO_CREATE_OK); using struct_t = MSG_FI_PARTY_AUTO_CREATE_OK; };
	template<> struct info<T_FI_PARTY_DISCONNECT_LEAVE_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_DISCONNECT_LEAVE_OK); using struct_t = MSG_FI_PARTY_DISCONNECT_LEAVE_OK; };
	template<> struct info<T_FI_PARTY_UPDATE_ITEM_TRANSFORMER_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_UPDATE_ITEM_TRANSFORMER_OK); using struct_t = MSG_FI_PARTY_UPDATE_ITEM_TRANSFORMER_OK; };
	template<> struct info<T_FI_PARTY_ARENA_TEAM_NUM> { static constexpr size_t msg_size = sizeof(MSG_FI_PARTY_ARENA_TEAM_NUM); using struct_t = MSG_FI_PARTY_ARENA_TEAM_NUM; };
	template<> struct info<T_FI_CASH_USING_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FI_CASH_USING_GUILD); using struct_t = MSG_FI_CASH_USING_GUILD; };
	template<> struct info<T_FI_CASH_USING_CHANGE_CHARACTERNAME> { static constexpr size_t msg_size = sizeof(MSG_FI_CASH_USING_CHANGE_CHARACTERNAME); using struct_t = MSG_FI_CASH_USING_CHANGE_CHARACTERNAME; };
	template<> struct info<T_FI_CASH_PREMIUM_CARD_INFO> { static constexpr size_t msg_size = sizeof(MSG_FI_CASH_PREMIUM_CARD_INFO); using struct_t = MSG_FI_CASH_PREMIUM_CARD_INFO; };
	template<> struct info<T_FI_INFO_DECLARATION_MSWAR_SET_OK> { static constexpr size_t msg_size = sizeof(MSG_FI_INFO_DECLARATION_MSWAR_SET_OK); using struct_t = MSG_FI_INFO_DECLARATION_MSWAR_SET_OK; };
	template<> struct info<T_FN_BATTLE_ATTACK_PRIMARY> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_PRIMARY); using struct_t = MSG_FN_BATTLE_ATTACK_PRIMARY; };
	template<> struct info<T_FN_BATTLE_ATTACK_RESULT_PRIMARY> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_RESULT_PRIMARY); using struct_t = MSG_FN_BATTLE_ATTACK_RESULT_PRIMARY; };
	template<> struct info<T_FN_BATTLE_ATTACK_SECONDARY> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_SECONDARY); using struct_t = MSG_FN_BATTLE_ATTACK_SECONDARY; };
	template<> struct info<T_FN_BATTLE_ATTACK_RESULT_SECONDARY> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_RESULT_SECONDARY); using struct_t = MSG_FN_BATTLE_ATTACK_RESULT_SECONDARY; };
	template<> struct info<T_FN_BATTLE_ATTACK_FIND> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_FIND); using struct_t = MSG_FN_BATTLE_ATTACK_FIND; };
	template<> struct info<T_FN_BATTLE_ATTACK_FIND_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_FIND_RESULT); using struct_t = MSG_FN_BATTLE_ATTACK_FIND_RESULT; };
	template<> struct info<T_FN_BATTLE_SET_ATTACK_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_SET_ATTACK_CHARACTER); using struct_t = MSG_FN_BATTLE_SET_ATTACK_CHARACTER; };
	template<> struct info<T_FN_BATTLE_DROP_FIXER> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_DROP_FIXER); using struct_t = MSG_FN_BATTLE_DROP_FIXER; };
	template<> struct info<T_FN_BATTLE_DROP_FIXER_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_DROP_FIXER_OK); using struct_t = MSG_FN_BATTLE_DROP_FIXER_OK; };
	template<> struct info<T_FN_BATTLE_ATTACK_HIDE_ITEM_W_KIND> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_HIDE_ITEM_W_KIND); using struct_t = MSG_FN_BATTLE_ATTACK_HIDE_ITEM_W_KIND; };
	template<> struct info<T_FN_BATTLE_ATTACK_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_SKILL); using struct_t = MSG_FN_BATTLE_ATTACK_SKILL; };
	template<> struct info<T_FN_BATTLE_ATTACK_SKILL_CANCEL> { static constexpr size_t msg_size = sizeof(MSG_FN_BATTLE_ATTACK_SKILL_CANCEL); using struct_t = MSG_FN_BATTLE_ATTACK_SKILL_CANCEL; };
	template<> struct info<T_FN_CHARACTER_CHANGE_UNITKIND> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_UNITKIND); using struct_t = MSG_FN_CHARACTER_CHANGE_UNITKIND; };
	template<> struct info<T_FN_CHARACTER_CHANGE_BODYCONDITION> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_BODYCONDITION); using struct_t = MSG_FN_CHARACTER_CHANGE_BODYCONDITION; };
	template<> struct info<T_FN_CHARACTER_CHANGE_HPDPSPEP> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_HPDPSPEP); using struct_t = MSG_FN_CHARACTER_CHANGE_HPDPSPEP; };
	template<> struct info<T_FN_CHARACTER_CHANGE_CURRENTHPDPSPEP> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_CURRENTHPDPSPEP); using struct_t = MSG_FN_CHARACTER_CHANGE_CURRENTHPDPSPEP; };
	template<> struct info<T_FN_CHARACTER_CHANGE_MAPNAME> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_MAPNAME); using struct_t = MSG_FN_CHARACTER_CHANGE_MAPNAME; };
	template<> struct info<T_FN_CHARACTER_CHANGE_POSITION> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_POSITION); using struct_t = MSG_FN_CHARACTER_CHANGE_POSITION; };
	template<> struct info<T_FN_CHARACTER_CHANGE_STEALTHSTATE> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_STEALTHSTATE); using struct_t = MSG_FN_CHARACTER_CHANGE_STEALTHSTATE; };
	template<> struct info<T_FN_CHARACTER_CHANGE_CHARACTER_MODE_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_CHARACTER_MODE_OK); using struct_t = MSG_FN_CHARACTER_CHANGE_CHARACTER_MODE_OK; };
	template<> struct info<T_FN_CHARACTER_CHANGE_INFLUENCE_TYPE> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_INFLUENCE_TYPE); using struct_t = MSG_FN_CHARACTER_CHANGE_INFLUENCE_TYPE; };
	template<> struct info<T_FN_CHARACTER_CHANGE_INVISIBLE> { static constexpr size_t msg_size = sizeof(MSG_FN_CHARACTER_CHANGE_INVISIBLE); using struct_t = MSG_FN_CHARACTER_CHANGE_INVISIBLE; };
	template<> struct info<T_FN_EVENT_OTHER_WARPED> { static constexpr size_t msg_size = sizeof(MSG_FN_EVENT_OTHER_WARPED); using struct_t = MSG_FN_EVENT_OTHER_WARPED; };
	template<> struct info<T_FN_MAPPROJECT_START_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_MAPPROJECT_START_OK); using struct_t = MSG_FN_MAPPROJECT_START_OK; };
	template<> struct info<T_FN_MONSTER_CREATE> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_CREATE); using struct_t = MSG_FN_MONSTER_CREATE; };
	template<> struct info<T_FN_MONSTER_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_CREATE_OK); using struct_t = MSG_FN_MONSTER_CREATE_OK; };
	template<> struct info<T_FN_MONSTER_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_DELETE); using struct_t = MSG_FN_MONSTER_DELETE; };
	template<> struct info<T_FN_CLIENT_GAMESTART_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_CLIENT_GAMESTART_OK); using struct_t = MSG_FN_CLIENT_GAMESTART_OK; };
	template<> struct info<T_FN_CLIENT_GAMEEND_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_CLIENT_GAMEEND_OK); using struct_t = MSG_FN_CLIENT_GAMEEND_OK; };
	template<> struct info<T_FN_GET_CHARACTER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FN_GET_CHARACTER_INFO); using struct_t = MSG_FN_GET_CHARACTER_INFO; };
	template<> struct info<T_FN_GET_CHARACTER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_GET_CHARACTER_INFO_OK); using struct_t = MSG_FN_GET_CHARACTER_INFO_OK; };
	template<> struct info<T_FN_ADMIN_SUMMON_MONSTER> { static constexpr size_t msg_size = sizeof(MSG_FN_ADMIN_SUMMON_MONSTER); using struct_t = MSG_FN_ADMIN_SUMMON_MONSTER; };
	template<> struct info<T_FN_MONSTER_CHANGE_HP> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_CHANGE_HP); using struct_t = MSG_FN_MONSTER_CHANGE_HP; };
	template<> struct info<T_FN_MONSTER_CHANGE_BODYCONDITION> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_CHANGE_BODYCONDITION); using struct_t = MSG_FN_MONSTER_CHANGE_BODYCONDITION; };
	template<> struct info<T_FN_MONSTER_SKILL_USE_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_SKILL_USE_SKILL); using struct_t = MSG_FN_MONSTER_SKILL_USE_SKILL; };
	template<> struct info<T_FN_MONSTER_SKILL_END_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_SKILL_END_SKILL); using struct_t = MSG_FN_MONSTER_SKILL_END_SKILL; };
	template<> struct info<T_FN_MONSTER_AUTO_DESTROYED> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_AUTO_DESTROYED); using struct_t = MSG_FN_MONSTER_AUTO_DESTROYED; };
	template<> struct info<T_FN_MONSTER_STRATEGYPOINT_INIT> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_STRATEGYPOINT_INIT); using struct_t = MSG_FN_MONSTER_STRATEGYPOINT_INIT; };
	template<> struct info<T_FN_MONSTER_STRATEGYPOINT_SUMMON> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_STRATEGYPOINT_SUMMON); using struct_t = MSG_FN_MONSTER_STRATEGYPOINT_SUMMON; };
	template<> struct info<T_FN_MONSTER_OUTPOST_INIT> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_OUTPOST_INIT); using struct_t = MSG_FN_MONSTER_OUTPOST_INIT; };
	template<> struct info<T_FN_MONSTER_OUTPOST_RESET_SUMMON> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_OUTPOST_RESET_SUMMON); using struct_t = MSG_FN_MONSTER_OUTPOST_RESET_SUMMON; };
	template<> struct info<T_FN_MONSTER_CREATE_IN_MAPCHANNEL_BYVALUE> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_CREATE_IN_MAPCHANNEL_BYVALUE); using struct_t = MSG_FN_MONSTER_CREATE_IN_MAPCHANNEL_BYVALUE; };
	template<> struct info<T_FN_MONSTER_TELEPORT_SUMMON> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_TELEPORT_SUMMON); using struct_t = MSG_FN_MONSTER_TELEPORT_SUMMON; };
	template<> struct info<T_FN_MONSTER_HPTALK> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_HPTALK); using struct_t = MSG_FN_MONSTER_HPTALK; };
	template<> struct info<T_FN_MONSTER_CHANGE_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_CHANGE_OK); using struct_t = MSG_FN_MONSTER_CHANGE_OK; };
	template<> struct info<T_FN_MONSTER_MOVE> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_MOVE); using struct_t = MSG_FN_MONSTER_MOVE; };
	template<> struct info<T_FN_MOVE_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_MOVE_OK); using struct_t = MSG_FN_MOVE_OK; };
	template<> struct info<T_FN_MISSILE_MOVE> { static constexpr size_t msg_size = sizeof(MSG_FN_MISSILE_MOVE); using struct_t = MSG_FN_MISSILE_MOVE; };
	template<> struct info<T_FN_MONSTER_HPRECOVERY> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_HPRECOVERY); using struct_t = MSG_FN_MONSTER_HPRECOVERY; };
	template<> struct info<T_FN_MONSTER_HIDE> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_HIDE); using struct_t = MSG_FN_MONSTER_HIDE; };
	template<> struct info<T_FN_MONSTER_SHOW> { static constexpr size_t msg_size = sizeof(MSG_FN_MONSTER_SHOW); using struct_t = MSG_FN_MONSTER_SHOW; };
	template<> struct info<T_FN_SKILL_USE_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FN_SKILL_USE_SKILL); using struct_t = MSG_FN_SKILL_USE_SKILL; };
	template<> struct info<T_FN_SKILL_USE_SKILL_OK> { static constexpr size_t msg_size = sizeof(MSG_FN_SKILL_USE_SKILL_OK); using struct_t = MSG_FN_SKILL_USE_SKILL_OK; };
	template<> struct info<T_FN_CITYWAR_START_WAR> { static constexpr size_t msg_size = sizeof(MSG_FN_CITYWAR_START_WAR); using struct_t = MSG_FN_CITYWAR_START_WAR; };
	template<> struct info<T_FN_CITYWAR_END_WAR> { static constexpr size_t msg_size = sizeof(MSG_FN_CITYWAR_END_WAR); using struct_t = MSG_FN_CITYWAR_END_WAR; };
	template<> struct info<T_FN_CITYWAR_CHANGE_OCCUPY_INFO> { static constexpr size_t msg_size = sizeof(MSG_FN_CITYWAR_CHANGE_OCCUPY_INFO); using struct_t = MSG_FN_CITYWAR_CHANGE_OCCUPY_INFO; };
	template<> struct info<T_FN_NPCSERVER_SUMMON_JACO_MONSTER> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_SUMMON_JACO_MONSTER); using struct_t = MSG_FN_NPCSERVER_SUMMON_JACO_MONSTER; };
	template<> struct info<T_FN_NPCSERVER_DELETE_MONSTER_IN_MAPCHANNEL> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_DELETE_MONSTER_IN_MAPCHANNEL); using struct_t = MSG_FN_NPCSERVER_DELETE_MONSTER_IN_MAPCHANNEL; };
	template<> struct info<T_FN_NPCSERVER_CINEMA_MONSTER_CREATE> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_CINEMA_MONSTER_CREATE); using struct_t = MSG_FN_NPCSERVER_CINEMA_MONSTER_CREATE; };
	template<> struct info<T_FN_NPCSERVER_NEW_CHANGE_OBJECT> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_NEW_CHANGE_OBJECT); using struct_t = MSG_FN_NPCSERVER_NEW_CHANGE_OBJECT; };
	template<> struct info<T_FN_NPCSERVER_RESET_CHANGE_OBJECT> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_RESET_CHANGE_OBJECT); using struct_t = MSG_FN_NPCSERVER_RESET_CHANGE_OBJECT; };
	template<> struct info<T_FN_NPCSERVER_CINEMA_MONSTER_DESTROY> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_CINEMA_MONSTER_DESTROY); using struct_t = MSG_FN_NPCSERVER_CINEMA_MONSTER_DESTROY; };
	template<> struct info<T_FN_NPCSERVER_CINEMA_MONSTER_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_CINEMA_MONSTER_CHANGE); using struct_t = MSG_FN_NPCSERVER_CINEMA_MONSTER_CHANGE; };
	template<> struct info<T_FN_NPCSERVER_CINEMA_MONSTER_REGEN> { static constexpr size_t msg_size = sizeof(MSG_FN_NPCSERVER_CINEMA_MONSTER_REGEN); using struct_t = MSG_FN_NPCSERVER_CINEMA_MONSTER_REGEN; };
	template<> struct info<T_FP_EVENT_ENTER_SELECT_SCREEN> { static constexpr size_t msg_size = sizeof(MSG_FP_EVENT_ENTER_SELECT_SCREEN); using struct_t = MSG_FP_EVENT_ENTER_SELECT_SCREEN; };
	template<> struct info<T_FP_EVENT_GAME_STARTED> { static constexpr size_t msg_size = sizeof(MSG_FP_EVENT_GAME_STARTED); using struct_t = MSG_FP_EVENT_GAME_STARTED; };
	template<> struct info<T_FP_EVENT_MAP_CHANGED> { static constexpr size_t msg_size = sizeof(MSG_FP_EVENT_MAP_CHANGED); using struct_t = MSG_FP_EVENT_MAP_CHANGED; };
	template<> struct info<T_FP_CASH_CHANGE_CHARACTERNAME> { static constexpr size_t msg_size = sizeof(MSG_FP_CASH_CHANGE_CHARACTERNAME); using struct_t = MSG_FP_CASH_CHANGE_CHARACTERNAME; };
	template<> struct info<T_FP_ADMIN_BLOCKACCOUNT> { static constexpr size_t msg_size = sizeof(MSG_FP_ADMIN_BLOCKACCOUNT); using struct_t = MSG_FP_ADMIN_BLOCKACCOUNT; };
	template<> struct info<T_FP_ADMIN_BLOCKACCOUNT_OK> { static constexpr size_t msg_size = sizeof(MSG_FP_ADMIN_BLOCKACCOUNT_OK); using struct_t = MSG_FP_ADMIN_BLOCKACCOUNT_OK; };
	template<> struct info<T_FP_ADMIN_UNBLOCKACCOUNT> { static constexpr size_t msg_size = sizeof(MSG_FP_ADMIN_UNBLOCKACCOUNT); using struct_t = MSG_FP_ADMIN_UNBLOCKACCOUNT; };
	template<> struct info<T_FP_ADMIN_UNBLOCKACCOUNT_OK> { static constexpr size_t msg_size = sizeof(MSG_FP_ADMIN_UNBLOCKACCOUNT_OK); using struct_t = MSG_FP_ADMIN_UNBLOCKACCOUNT_OK; };
	template<> struct info<T_FP_ADMIN_STRATRGYPOINT_INFO_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FP_ADMIN_STRATRGYPOINT_INFO_CHANGE); using struct_t = MSG_FP_ADMIN_STRATRGYPOINT_INFO_CHANGE; };
	template<> struct info<T_FP_GLOG_CONNECT_USER_NEW> { static constexpr size_t msg_size = sizeof(MSG_FP_GLOG_CONNECT_USER_NEW); using struct_t = MSG_FP_GLOG_CONNECT_USER_NEW; };
	template<> struct info<T_FP_GLOG_CONNECT_USER_LOGIN> { static constexpr size_t msg_size = sizeof(MSG_FP_GLOG_CONNECT_USER_LOGIN); using struct_t = MSG_FP_GLOG_CONNECT_USER_LOGIN; };
	template<> struct info<T_IC_ADMIN_CALL_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_IC_ADMIN_CALL_CHARACTER); using struct_t = MSG_IC_ADMIN_CALL_CHARACTER; };
	template<> struct info<T_IC_ADMIN_GET_SERVER_STAT_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_ADMIN_GET_SERVER_STAT_OK); using struct_t = MSG_IC_ADMIN_GET_SERVER_STAT_OK; };
	template<> struct info<T_IC_ADMIN_CALL_GUILD> { static constexpr size_t msg_size = sizeof(MSG_IC_ADMIN_CALL_GUILD); using struct_t = MSG_IC_ADMIN_CALL_GUILD; };
	template<> struct info<T_IC_ADMIN_CALLGM_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_ADMIN_CALLGM_INFO_OK); using struct_t = MSG_IC_ADMIN_CALLGM_INFO_OK; };
	template<> struct info<T_IC_ADMIN_CALLGM_VIEW_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_ADMIN_CALLGM_VIEW_OK); using struct_t = MSG_IC_ADMIN_CALLGM_VIEW_OK; };
	template<> struct info<T_IC_ADMIN_CALLGM_BRING_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_ADMIN_CALLGM_BRING_OK); using struct_t = MSG_IC_ADMIN_CALLGM_BRING_OK; };
	template<> struct info<T_IC_CHAT_ALL> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_ALL); using struct_t = MSG_IC_CHAT_ALL; };
	template<> struct info<T_IC_CHAT_MAP> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_MAP); using struct_t = MSG_IC_CHAT_MAP; };
	template<> struct info<T_IC_CHAT_REGION> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_REGION); using struct_t = MSG_IC_CHAT_REGION; };
	template<> struct info<T_IC_CHAT_PTOP> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_PTOP); using struct_t = MSG_IC_CHAT_PTOP; };
	template<> struct info<T_IC_CHAT_PARTY> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_PARTY); using struct_t = MSG_IC_CHAT_PARTY; };
	template<> struct info<T_IC_CHAT_GUILD> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_GUILD); using struct_t = MSG_IC_CHAT_GUILD; };
	template<> struct info<T_IC_CHAT_GET_GUILD> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_GET_GUILD); using struct_t = MSG_IC_CHAT_GET_GUILD; };
	template<> struct info<T_IC_CHAT_GET_GUILD_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_GET_GUILD_OK); using struct_t = MSG_IC_CHAT_GET_GUILD_OK; };
	template<> struct info<T_IC_CHAT_CHANGE_GUILD> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CHANGE_GUILD); using struct_t = MSG_IC_CHAT_CHANGE_GUILD; };
	template<> struct info<T_IC_CHAT_CHANGE_GUILD_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CHANGE_GUILD_OK); using struct_t = MSG_IC_CHAT_CHANGE_GUILD_OK; };
	template<> struct info<T_IC_CHAT_CHANGE_PARTY> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CHANGE_PARTY); using struct_t = MSG_IC_CHAT_CHANGE_PARTY; };
	template<> struct info<T_IC_CHAT_CHANGE_PARTY_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CHANGE_PARTY_OK); using struct_t = MSG_IC_CHAT_CHANGE_PARTY_OK; };
	template<> struct info<T_IC_CHAT_CHANGE_CHAT_FLAG> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CHANGE_CHAT_FLAG); using struct_t = MSG_IC_CHAT_CHANGE_CHAT_FLAG; };
	template<> struct info<T_IC_CHAT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_POSITION); using struct_t = MSG_IC_CHAT_POSITION; };
	template<> struct info<T_IC_CHAT_FRIENDLIST_LOADING_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_FRIENDLIST_LOADING_OK); using struct_t = MSG_IC_CHAT_FRIENDLIST_LOADING_OK; };
	template<> struct info<T_IC_CHAT_FRIENDLIST_INSERT> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_FRIENDLIST_INSERT); using struct_t = MSG_IC_CHAT_FRIENDLIST_INSERT; };
	template<> struct info<T_IC_CHAT_FRIENDLIST_INSERT_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_FRIENDLIST_INSERT_OK); using struct_t = MSG_IC_CHAT_FRIENDLIST_INSERT_OK; };
	template<> struct info<T_IC_CHAT_FRIENDLIST_DELETE> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_FRIENDLIST_DELETE); using struct_t = MSG_IC_CHAT_FRIENDLIST_DELETE; };
	template<> struct info<T_IC_CHAT_FRIENDLIST_DELETE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_FRIENDLIST_DELETE_OK); using struct_t = MSG_IC_CHAT_FRIENDLIST_DELETE_OK; };
	template<> struct info<T_IC_CHAT_FRIENDLIST_REFRESH_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_FRIENDLIST_REFRESH_OK); using struct_t = MSG_IC_CHAT_FRIENDLIST_REFRESH_OK; };
	template<> struct info<T_IC_CHAT_REJECTLIST_LOADING_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_REJECTLIST_LOADING_OK); using struct_t = MSG_IC_CHAT_REJECTLIST_LOADING_OK; };
	template<> struct info<T_IC_CHAT_REJECTLIST_INSERT> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_REJECTLIST_INSERT); using struct_t = MSG_IC_CHAT_REJECTLIST_INSERT; };
	template<> struct info<T_IC_CHAT_REJECTLIST_INSERT_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_REJECTLIST_INSERT_OK); using struct_t = MSG_IC_CHAT_REJECTLIST_INSERT_OK; };
	template<> struct info<T_IC_CHAT_REJECTLIST_DELETE> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_REJECTLIST_DELETE); using struct_t = MSG_IC_CHAT_REJECTLIST_DELETE; };
	template<> struct info<T_IC_CHAT_REJECTLIST_DELETE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_REJECTLIST_DELETE_OK); using struct_t = MSG_IC_CHAT_REJECTLIST_DELETE_OK; };
	template<> struct info<T_IC_CHAT_FRIENDLIST_INSERT_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_FRIENDLIST_INSERT_NOTIFY); using struct_t = MSG_IC_CHAT_FRIENDLIST_INSERT_NOTIFY; };
	template<> struct info<T_IC_CHAT_SELL_ALL> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_SELL_ALL); using struct_t = MSG_IC_CHAT_SELL_ALL; };
	template<> struct info<T_IC_CHAT_CASH_ALL> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CASH_ALL); using struct_t = MSG_IC_CHAT_CASH_ALL; };
	template<> struct info<T_IC_CHAT_INFLUENCE_ALL> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_INFLUENCE_ALL); using struct_t = MSG_IC_CHAT_INFLUENCE_ALL; };
	template<> struct info<T_IC_CHAT_ARENA> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_ARENA); using struct_t = MSG_IC_CHAT_ARENA; };
	template<> struct info<T_IC_CHAT_WAR> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_WAR); using struct_t = MSG_IC_CHAT_WAR; };
	template<> struct info<T_IC_CHAT_CHATROOM> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CHATROOM); using struct_t = MSG_IC_CHAT_CHATROOM; };
	template<> struct info<T_IC_CHAT_INFINITY> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_INFINITY); using struct_t = MSG_IC_CHAT_INFINITY; };
	template<> struct info<T_IC_CHAT_CNC> { static constexpr size_t msg_size = sizeof(MSG_IC_CHAT_CNC); using struct_t = MSG_IC_CHAT_CNC; };
	template<> struct info<T_IC_GUILD_CREATE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CREATE); using struct_t = MSG_IC_GUILD_CREATE; };
	template<> struct info<T_IC_GUILD_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CREATE_OK); using struct_t = MSG_IC_GUILD_CREATE_OK; };
	template<> struct info<T_IC_GUILD_GET_GUILD_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_GUILD_INFO); using struct_t = MSG_IC_GUILD_GET_GUILD_INFO; };
	template<> struct info<T_IC_GUILD_GET_GUILD_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_GUILD_INFO_OK); using struct_t = MSG_IC_GUILD_GET_GUILD_INFO_OK; };
	template<> struct info<T_IC_GUILD_GET_OTHER_GUILD_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_OTHER_GUILD_INFO); using struct_t = MSG_IC_GUILD_GET_OTHER_GUILD_INFO; };
	template<> struct info<T_IC_GUILD_GET_OTHER_GUILD_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_OTHER_GUILD_INFO_OK); using struct_t = MSG_IC_GUILD_GET_OTHER_GUILD_INFO_OK; };
	template<> struct info<T_IC_GUILD_REQUEST_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_REQUEST_INVITE); using struct_t = MSG_IC_GUILD_REQUEST_INVITE; };
	template<> struct info<T_IC_GUILD_REQUEST_INVITE_QUESTION> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_REQUEST_INVITE_QUESTION); using struct_t = MSG_IC_GUILD_REQUEST_INVITE_QUESTION; };
	template<> struct info<T_IC_GUILD_ACCEPT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_ACCEPT_INVITE); using struct_t = MSG_IC_GUILD_ACCEPT_INVITE; };
	template<> struct info<T_IC_GUILD_ACCEPT_INVITE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_ACCEPT_INVITE_OK); using struct_t = MSG_IC_GUILD_ACCEPT_INVITE_OK; };
	template<> struct info<T_IC_GUILD_REJECT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_REJECT_INVITE); using struct_t = MSG_IC_GUILD_REJECT_INVITE; };
	template<> struct info<T_IC_GUILD_REJECT_INVITE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_REJECT_INVITE_OK); using struct_t = MSG_IC_GUILD_REJECT_INVITE_OK; };
	template<> struct info<T_IC_GUILD_BAN_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_BAN_MEMBER); using struct_t = MSG_IC_GUILD_BAN_MEMBER; };
	template<> struct info<T_IC_GUILD_BAN_MEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_BAN_MEMBER_OK); using struct_t = MSG_IC_GUILD_BAN_MEMBER_OK; };
	template<> struct info<T_IC_GUILD_LEAVE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_LEAVE); using struct_t = MSG_IC_GUILD_LEAVE; };
	template<> struct info<T_IC_GUILD_LEAVE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_LEAVE_OK); using struct_t = MSG_IC_GUILD_LEAVE_OK; };
	template<> struct info<T_IC_GUILD_DISMEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_DISMEMBER_OK); using struct_t = MSG_IC_GUILD_DISMEMBER_OK; };
	template<> struct info<T_IC_GUILD_SET_MEMBER_STATE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_SET_MEMBER_STATE); using struct_t = MSG_IC_GUILD_SET_MEMBER_STATE; };
	template<> struct info<T_IC_GUILD_CANCEL_DISMEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CANCEL_DISMEMBER); using struct_t = MSG_IC_GUILD_CANCEL_DISMEMBER; };
	template<> struct info<T_IC_GUILD_CANCEL_DISMEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CANCEL_DISMEMBER_OK); using struct_t = MSG_IC_GUILD_CANCEL_DISMEMBER_OK; };
	template<> struct info<T_IC_GUILD_GET_DISMEMBER_DATE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_DISMEMBER_DATE); using struct_t = MSG_IC_GUILD_GET_DISMEMBER_DATE; };
	template<> struct info<T_IC_GUILD_GET_DISMEMBER_DATE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_DISMEMBER_DATE_OK); using struct_t = MSG_IC_GUILD_GET_DISMEMBER_DATE_OK; };
	template<> struct info<T_IC_GUILD_CHANGE_GUILD_NAME> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CHANGE_GUILD_NAME); using struct_t = MSG_IC_GUILD_CHANGE_GUILD_NAME; };
	template<> struct info<T_IC_GUILD_CHANGE_GUILD_NAME_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CHANGE_GUILD_NAME_OK); using struct_t = MSG_IC_GUILD_CHANGE_GUILD_NAME_OK; };
	template<> struct info<T_IC_GUILD_GET_GUILD_MARK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_GUILD_MARK); using struct_t = MSG_IC_GUILD_GET_GUILD_MARK; };
	template<> struct info<T_IC_GUILD_GET_GUILD_MARK_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_GUILD_MARK_OK); using struct_t = MSG_IC_GUILD_GET_GUILD_MARK_OK; };
	template<> struct info<T_IC_GUILD_SET_GUILD_MARK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_SET_GUILD_MARK); using struct_t = MSG_IC_GUILD_SET_GUILD_MARK; };
	template<> struct info<T_IC_GUILD_SET_GUILD_MARK_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_SET_GUILD_MARK_OK); using struct_t = MSG_IC_GUILD_SET_GUILD_MARK_OK; };
	template<> struct info<T_IC_GUILD_SET_RANK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_SET_RANK); using struct_t = MSG_IC_GUILD_SET_RANK; };
	template<> struct info<T_IC_GUILD_SET_RANK_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_SET_RANK_OK); using struct_t = MSG_IC_GUILD_SET_RANK_OK; };
	template<> struct info<T_IC_GUILD_CHANGE_GUILD_STATE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CHANGE_GUILD_STATE); using struct_t = MSG_IC_GUILD_CHANGE_GUILD_STATE; };
	template<> struct info<T_IC_GUILD_LOADING_GUILD_DONE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_LOADING_GUILD_DONE); using struct_t = MSG_IC_GUILD_LOADING_GUILD_DONE; };
	template<> struct info<T_IC_GUILD_WAR_READY> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_WAR_READY); using struct_t = MSG_IC_GUILD_WAR_READY; };
	template<> struct info<T_IC_GUILD_START_WAR> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_START_WAR); using struct_t = MSG_IC_GUILD_START_WAR; };
	template<> struct info<T_IC_GUILD_END_WAR> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_END_WAR); using struct_t = MSG_IC_GUILD_END_WAR; };
	template<> struct info<T_IC_GUILD_UPDATE_WAR_POINT> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_UPDATE_WAR_POINT); using struct_t = MSG_IC_GUILD_UPDATE_WAR_POINT; };
	template<> struct info<T_IC_GUILD_CHANGE_MEMBER_CAPACITY> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CHANGE_MEMBER_CAPACITY); using struct_t = MSG_IC_GUILD_CHANGE_MEMBER_CAPACITY; };
	template<> struct info<T_IC_GUILD_GET_GUILD_MEMBER_LIST_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_GUILD_MEMBER_LIST_OK); using struct_t = MSG_IC_GUILD_GET_GUILD_MEMBER_LIST_OK; };
	template<> struct info<T_IC_GUILD_END_WAR_ADMIN_NOTIFY> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_END_WAR_ADMIN_NOTIFY); using struct_t = MSG_IC_GUILD_END_WAR_ADMIN_NOTIFY; };
	template<> struct info<T_IC_GUILD_MEMBER_LEVEL_UP> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_MEMBER_LEVEL_UP); using struct_t = MSG_IC_GUILD_MEMBER_LEVEL_UP; };
	template<> struct info<T_IC_GUILD_NEW_COMMANDER> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_NEW_COMMANDER); using struct_t = MSG_IC_GUILD_NEW_COMMANDER; };
	template<> struct info<T_IC_GUILD_NOTICE_WRITE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_NOTICE_WRITE); using struct_t = MSG_IC_GUILD_NOTICE_WRITE; };
	template<> struct info<T_IC_GUILD_NOTICE_WRITE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_NOTICE_WRITE_OK); using struct_t = MSG_IC_GUILD_NOTICE_WRITE_OK; };
	template<> struct info<T_IC_GUILD_GET_APPLICANT_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_APPLICANT_OK); using struct_t = MSG_IC_GUILD_GET_APPLICANT_OK; };
	template<> struct info<T_IC_GUILD_GET_INTRODUCTION_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_INTRODUCTION_OK); using struct_t = MSG_IC_GUILD_GET_INTRODUCTION_OK; };
	template<> struct info<T_IC_GUILD_GET_SELF_INTRODUCTION> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_SELF_INTRODUCTION); using struct_t = MSG_IC_GUILD_GET_SELF_INTRODUCTION; };
	template<> struct info<T_IC_GUILD_GET_SELF_INTRODUCTION_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_GET_SELF_INTRODUCTION_OK); using struct_t = MSG_IC_GUILD_GET_SELF_INTRODUCTION_OK; };
	template<> struct info<T_IC_GUILD_SEARCH_INTRODUCTION_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_SEARCH_INTRODUCTION_OK); using struct_t = MSG_IC_GUILD_SEARCH_INTRODUCTION_OK; };
	template<> struct info<T_IC_GUILD_UPDATE_INTRODUCTION> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_UPDATE_INTRODUCTION); using struct_t = MSG_IC_GUILD_UPDATE_INTRODUCTION; };
	template<> struct info<T_IC_GUILD_UPDATE_SELFINTRODUCTION> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_UPDATE_SELFINTRODUCTION); using struct_t = MSG_IC_GUILD_UPDATE_SELFINTRODUCTION; };
	template<> struct info<T_IC_GUILD_CHANGE_FAME_RANK> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CHANGE_FAME_RANK); using struct_t = MSG_IC_GUILD_CHANGE_FAME_RANK; };
	template<> struct info<T_IC_GUILD_APPLICANT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_APPLICANT_INVITE); using struct_t = MSG_IC_GUILD_APPLICANT_INVITE; };
	template<> struct info<T_IC_GUILD_APPLICANT_REJECT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_APPLICANT_REJECT_INVITE); using struct_t = MSG_IC_GUILD_APPLICANT_REJECT_INVITE; };
	template<> struct info<T_IC_GUILD_CHANGE_MEMBERSHIP> { static constexpr size_t msg_size = sizeof(MSG_IC_GUILD_CHANGE_MEMBERSHIP); using struct_t = MSG_IC_GUILD_CHANGE_MEMBERSHIP; };
	template<> struct info<T_IC_PARTY_CREATE> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_CREATE); using struct_t = MSG_IC_PARTY_CREATE; };
	template<> struct info<T_IC_PARTY_ACCEPT_INVITE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_ACCEPT_INVITE_OK); using struct_t = MSG_IC_PARTY_ACCEPT_INVITE_OK; };
	template<> struct info<T_IC_PARTY_GET_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_GET_MEMBER); using struct_t = MSG_IC_PARTY_GET_MEMBER; };
	template<> struct info<T_IC_PARTY_PUT_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_PUT_MEMBER); using struct_t = MSG_IC_PARTY_PUT_MEMBER; };
	template<> struct info<T_IC_PARTY_GET_ALL_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_GET_ALL_MEMBER); using struct_t = MSG_IC_PARTY_GET_ALL_MEMBER; };
	template<> struct info<T_IC_PARTY_PUT_ALL_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_PUT_ALL_MEMBER); using struct_t = MSG_IC_PARTY_PUT_ALL_MEMBER; };
	template<> struct info<T_IC_PARTY_BAN_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_BAN_MEMBER); using struct_t = MSG_IC_PARTY_BAN_MEMBER; };
	template<> struct info<T_IC_PARTY_BAN_MEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_BAN_MEMBER_OK); using struct_t = MSG_IC_PARTY_BAN_MEMBER_OK; };
	template<> struct info<T_IC_PARTY_LEAVE> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_LEAVE); using struct_t = MSG_IC_PARTY_LEAVE; };
	template<> struct info<T_IC_PARTY_LEAVE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_LEAVE_OK); using struct_t = MSG_IC_PARTY_LEAVE_OK; };
	template<> struct info<T_IC_PARTY_TRANSFER_MASTER> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_TRANSFER_MASTER); using struct_t = MSG_IC_PARTY_TRANSFER_MASTER; };
	template<> struct info<T_IC_PARTY_TRANSFER_MASTER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_TRANSFER_MASTER_OK); using struct_t = MSG_IC_PARTY_TRANSFER_MASTER_OK; };
	template<> struct info<T_IC_PARTY_DISMEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_DISMEMBER); using struct_t = MSG_IC_PARTY_DISMEMBER; };
	template<> struct info<T_IC_PARTY_DISMEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_DISMEMBER_OK); using struct_t = MSG_IC_PARTY_DISMEMBER_OK; };
	template<> struct info<T_IC_PARTY_CHANGE_FLIGHT_FORMATION> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_CHANGE_FLIGHT_FORMATION); using struct_t = MSG_IC_PARTY_CHANGE_FLIGHT_FORMATION; };
	template<> struct info<T_IC_PARTY_CHANGE_FLIGHT_FORMATION_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_CHANGE_FLIGHT_FORMATION_OK); using struct_t = MSG_IC_PARTY_CHANGE_FLIGHT_FORMATION_OK; };
	template<> struct info<T_IC_PARTY_GET_FLIGHT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_GET_FLIGHT_POSITION); using struct_t = MSG_IC_PARTY_GET_FLIGHT_POSITION; };
	template<> struct info<T_IC_PARTY_CHANGE_FLIGHT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_CHANGE_FLIGHT_POSITION); using struct_t = MSG_IC_PARTY_CHANGE_FLIGHT_POSITION; };
	template<> struct info<T_IC_PARTY_CANCEL_FLIGHT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_CANCEL_FLIGHT_POSITION); using struct_t = MSG_IC_PARTY_CANCEL_FLIGHT_POSITION; };
	template<> struct info<T_IC_PARTY_PUT_LAST_PARTY_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_PUT_LAST_PARTY_INFO); using struct_t = MSG_IC_PARTY_PUT_LAST_PARTY_INFO; };
	template<> struct info<T_IC_PARTY_UPDATE_MEMBER_INFO_MAPNAME> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_UPDATE_MEMBER_INFO_MAPNAME); using struct_t = MSG_IC_PARTY_UPDATE_MEMBER_INFO_MAPNAME; };
	template<> struct info<T_IC_PARTY_MEMBER_INVALIDATED> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_MEMBER_INVALIDATED); using struct_t = MSG_IC_PARTY_MEMBER_INVALIDATED; };
	template<> struct info<T_IC_PARTY_MEMBER_REJOINED> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_MEMBER_REJOINED); using struct_t = MSG_IC_PARTY_MEMBER_REJOINED; };
	template<> struct info<T_IC_PARTY_UPDATE_ITEM_POS> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_UPDATE_ITEM_POS); using struct_t = MSG_IC_PARTY_UPDATE_ITEM_POS; };
	template<> struct info<T_IC_PARTY_ALL_FLIGHT_POSITION> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_ALL_FLIGHT_POSITION); using struct_t = MSG_IC_PARTY_ALL_FLIGHT_POSITION; };
	template<> struct info<T_IC_PARTY_LIST_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_LIST_INFO); using struct_t = MSG_IC_PARTY_LIST_INFO; };
	template<> struct info<T_IC_PARTY_LIST_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_LIST_INFO_OK); using struct_t = MSG_IC_PARTY_LIST_INFO_OK; };
	template<> struct info<T_IC_PARTY_JOIN_FREE> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_JOIN_FREE); using struct_t = MSG_IC_PARTY_JOIN_FREE; };
	template<> struct info<T_IC_PARTY_CHANGE_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_CHANGE_INFO); using struct_t = MSG_IC_PARTY_CHANGE_INFO; };
	template<> struct info<T_IC_PARTY_RECOMMENDATION_MEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_RECOMMENDATION_MEMBER_OK); using struct_t = MSG_IC_PARTY_RECOMMENDATION_MEMBER_OK; };
	template<> struct info<T_IC_PARTY_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_INFO); using struct_t = MSG_IC_PARTY_INFO; };
	template<> struct info<T_IC_PARTY_GET_AUTO_PARTY_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_GET_AUTO_PARTY_INFO); using struct_t = MSG_IC_PARTY_GET_AUTO_PARTY_INFO; };
	template<> struct info<T_IC_PARTY_GET_AUTO_PARTY_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_GET_AUTO_PARTY_INFO_OK); using struct_t = MSG_IC_PARTY_GET_AUTO_PARTY_INFO_OK; };
	template<> struct info<T_IC_PARTY_UPDATE_ITEM_TRANSFORMER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_PARTY_UPDATE_ITEM_TRANSFORMER_OK); using struct_t = MSG_IC_PARTY_UPDATE_ITEM_TRANSFORMER_OK; };
	template<> struct info<T_IC_STRING_128> { static constexpr size_t msg_size = sizeof(MSG_IC_STRING_128); using struct_t = MSG_IC_STRING_128; };
	template<> struct info<T_IC_STRING_256> { static constexpr size_t msg_size = sizeof(MSG_IC_STRING_256); using struct_t = MSG_IC_STRING_256; };
	template<> struct info<T_IC_STRING_512> { static constexpr size_t msg_size = sizeof(MSG_IC_STRING_512); using struct_t = MSG_IC_STRING_512; };
	template<> struct info<T_IC_COUNTDOWN_START> { static constexpr size_t msg_size = sizeof(MSG_IC_COUNTDOWN_START); using struct_t = MSG_IC_COUNTDOWN_START; };
	template<> struct info<T_IC_COUNTDOWN_DONE> { static constexpr size_t msg_size = sizeof(MSG_IC_COUNTDOWN_DONE); using struct_t = MSG_IC_COUNTDOWN_DONE; };
	//template<> struct info<T_IC_VOIP_SET> { static constexpr size_t msg_size = sizeof(MSG_IC_VOIP_SET); using struct_t = MSG_IC_VOIP_SET; };
	//template<> struct info<T_IC_VOIP_SET_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_VOIP_SET_OK); using struct_t = MSG_IC_VOIP_SET_OK; };
	template<> struct info<T_IC_CHATROOM_CREATE> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CREATE); using struct_t = MSG_IC_CHATROOM_CREATE; };
	template<> struct info<T_IC_CHATROOM_CREATE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CREATE_OK); using struct_t = MSG_IC_CHATROOM_CREATE_OK; };
	template<> struct info<T_IC_CHATROOM_LIST_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_LIST_INFO); using struct_t = MSG_IC_CHATROOM_LIST_INFO; };
	template<> struct info<T_IC_CHATROOM_LIST_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_LIST_INFO_OK); using struct_t = MSG_IC_CHATROOM_LIST_INFO_OK; };
	template<> struct info<T_IC_CHATROOM_REQUEST_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_REQUEST_INVITE); using struct_t = MSG_IC_CHATROOM_REQUEST_INVITE; };
	template<> struct info<T_IC_CHATROOM_REQUEST_INVITE_QUESTION> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_REQUEST_INVITE_QUESTION); using struct_t = MSG_IC_CHATROOM_REQUEST_INVITE_QUESTION; };
	template<> struct info<T_IC_CHATROOM_JOIN> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_JOIN); using struct_t = MSG_IC_CHATROOM_JOIN; };
	template<> struct info<T_IC_CHATROOM_ACCEPT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_ACCEPT_INVITE); using struct_t = MSG_IC_CHATROOM_ACCEPT_INVITE; };
	template<> struct info<T_IC_CHATROOM_ACCEPT_INVITE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_ACCEPT_INVITE_OK); using struct_t = MSG_IC_CHATROOM_ACCEPT_INVITE_OK; };
	template<> struct info<T_IC_CHATROOM_REJECT_INVITE> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_REJECT_INVITE); using struct_t = MSG_IC_CHATROOM_REJECT_INVITE; };
	template<> struct info<T_IC_CHATROOM_LEAVE> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_LEAVE); using struct_t = MSG_IC_CHATROOM_LEAVE; };
	template<> struct info<T_IC_CHATROOM_LEAVE_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_LEAVE_OK); using struct_t = MSG_IC_CHATROOM_LEAVE_OK; };
	template<> struct info<T_IC_CHATROOM_BAN> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_BAN); using struct_t = MSG_IC_CHATROOM_BAN; };
	template<> struct info<T_IC_CHATROOM_BAN_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_BAN_OK); using struct_t = MSG_IC_CHATROOM_BAN_OK; };
	template<> struct info<T_IC_CHATROOM_CHANGE_NAME> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_NAME); using struct_t = MSG_IC_CHATROOM_CHANGE_NAME; };
	template<> struct info<T_IC_CHATROOM_CHANGE_NAME_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_NAME_OK); using struct_t = MSG_IC_CHATROOM_CHANGE_NAME_OK; };
	template<> struct info<T_IC_CHATROOM_CHANGE_MASTER> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_MASTER); using struct_t = MSG_IC_CHATROOM_CHANGE_MASTER; };
	template<> struct info<T_IC_CHATROOM_CHANGE_MASTER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_MASTER_OK); using struct_t = MSG_IC_CHATROOM_CHANGE_MASTER_OK; };
	template<> struct info<T_IC_CHATROOM_CHANGE_LOCK_PW> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_LOCK_PW); using struct_t = MSG_IC_CHATROOM_CHANGE_LOCK_PW; };
	template<> struct info<T_IC_CHATROOM_CHANGE_LOCK_PW_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_LOCK_PW_OK); using struct_t = MSG_IC_CHATROOM_CHANGE_LOCK_PW_OK; };
	template<> struct info<T_IC_CHATROOM_CHANGE_MAX_MEMBER> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_MAX_MEMBER); using struct_t = MSG_IC_CHATROOM_CHANGE_MAX_MEMBER; };
	template<> struct info<T_IC_CHATROOM_CHANGE_MAX_MEMBER_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_CHANGE_MAX_MEMBER_OK); using struct_t = MSG_IC_CHATROOM_CHANGE_MAX_MEMBER_OK; };
	template<> struct info<T_IC_CHATROOM_MEMBER_INFO> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_MEMBER_INFO); using struct_t = MSG_IC_CHATROOM_MEMBER_INFO; };
	template<> struct info<T_IC_CHATROOM_MEMBER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_CHATROOM_MEMBER_INFO_OK); using struct_t = MSG_IC_CHATROOM_MEMBER_INFO_OK; };
	template<> struct info<T_IC_INFO_DECLARATION_MSWAR_SET_OK> { static constexpr size_t msg_size = sizeof(MSG_IC_INFO_DECLARATION_MSWAR_SET_OK); using struct_t = MSG_IC_INFO_DECLARATION_MSWAR_SET_OK; };
	template<> struct info<T_FL_LOG_LOGIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_LOGIN); using struct_t = MSG_FL_LOG_LOGIN; };
	template<> struct info<T_FL_LOG_LOGOUT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_LOGOUT); using struct_t = MSG_FL_LOG_LOGOUT; };
	template<> struct info<T_FL_LOG_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_LEVEL); using struct_t = MSG_FL_LOG_LEVEL; };
	template<> struct info<T_FL_LOG_EXP> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_EXP); using struct_t = MSG_FL_LOG_EXP; };
	template<> struct info<T_FL_LOG_STAT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_STAT); using struct_t = MSG_FL_LOG_STAT; };
	template<> struct info<T_FL_LOG_GAME_START> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_GAME_START); using struct_t = MSG_FL_LOG_GAME_START; };
	template<> struct info<T_FL_LOG_GAME_END> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_GAME_END); using struct_t = MSG_FL_LOG_GAME_END; };
	template<> struct info<T_FL_LOG_QUEST_COMPLETION> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_QUEST_COMPLETION); using struct_t = MSG_FL_LOG_QUEST_COMPLETION; };
	template<> struct info<T_FL_LOG_PKWIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_PKWIN); using struct_t = MSG_FL_LOG_PKWIN; };
	template<> struct info<T_FL_LOG_PKLOSS> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_PKLOSS); using struct_t = MSG_FL_LOG_PKLOSS; };
	template<> struct info<T_FL_LOG_DEAD> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_DEAD); using struct_t = MSG_FL_LOG_DEAD; };
	template<> struct info<T_FL_LOG_WARP> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_WARP); using struct_t = MSG_FL_LOG_WARP; };
	template<> struct info<T_FL_LOG_SPEED_HACK> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_SPEED_HACK); using struct_t = MSG_FL_LOG_SPEED_HACK; };
	template<> struct info<T_FL_LOG_CREATE_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_CREATE_CHARACTER); using struct_t = MSG_FL_LOG_CREATE_CHARACTER; };
	template<> struct info<T_FL_LOG_DELETE_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_DELETE_CHARACTER); using struct_t = MSG_FL_LOG_DELETE_CHARACTER; };
	template<> struct info<T_FL_LOG_MEMORY_HACK> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_MEMORY_HACK); using struct_t = MSG_FL_LOG_MEMORY_HACK; };
	template<> struct info<T_FL_LOG_PvEWIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_PvEWIN); using struct_t = MSG_FL_LOG_PvEWIN; };
	template<> struct info<T_FL_LOG_PvELOSS> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_PvELOSS); using struct_t = MSG_FL_LOG_PvELOSS; };
	template<> struct info<T_FL_LOG_ITEM_CHARACTER_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_CHARACTER_ITEM); using struct_t = MSG_FL_LOG_ITEM_CHARACTER_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_GET_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_GET_ITEM); using struct_t = MSG_FL_LOG_ITEM_GET_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_TRADE_SEND> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_TRADE_SEND); using struct_t = MSG_FL_LOG_ITEM_TRADE_SEND; };
	template<> struct info<T_FL_LOG_ITEM_TRADE_RECV> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_TRADE_RECV); using struct_t = MSG_FL_LOG_ITEM_TRADE_RECV; };
	template<> struct info<T_FL_LOG_ITEM_THROWAWAY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_THROWAWAY_ITEM); using struct_t = MSG_FL_LOG_ITEM_THROWAWAY_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_BUY_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_BUY_ITEM); using struct_t = MSG_FL_LOG_ITEM_BUY_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_SELL_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_SELL_ITEM); using struct_t = MSG_FL_LOG_ITEM_SELL_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_USE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_USE_ITEM); using struct_t = MSG_FL_LOG_ITEM_USE_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_USE_ENERGY> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_USE_ENERGY); using struct_t = MSG_FL_LOG_ITEM_USE_ENERGY; };
	template<> struct info<T_FL_LOG_ITEM_USE_ENCHANT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_USE_ENCHANT); using struct_t = MSG_FL_LOG_ITEM_USE_ENCHANT; };
	template<> struct info<T_FL_LOG_ITEM_ADD_ITEM_BY_ADMIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_ADD_ITEM_BY_ADMIN); using struct_t = MSG_FL_LOG_ITEM_ADD_ITEM_BY_ADMIN; };
	template<> struct info<T_FL_LOG_ITEM_DEL_ITEM_BY_ADMIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_DEL_ITEM_BY_ADMIN); using struct_t = MSG_FL_LOG_ITEM_DEL_ITEM_BY_ADMIN; };
	template<> struct info<T_FL_LOG_ITEM_ADD_ITEM_BY_COMMAND> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_ADD_ITEM_BY_COMMAND); using struct_t = MSG_FL_LOG_ITEM_ADD_ITEM_BY_COMMAND; };
	template<> struct info<T_FL_LOG_ITEM_INSERT_TO_STORE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_INSERT_TO_STORE); using struct_t = MSG_FL_LOG_ITEM_INSERT_TO_STORE; };
	template<> struct info<T_FL_LOG_ITEM_DRAW_FROM_STORE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_DRAW_FROM_STORE); using struct_t = MSG_FL_LOG_ITEM_DRAW_FROM_STORE; };
	template<> struct info<T_FL_LOG_ITEM_STORE_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_STORE_ITEM); using struct_t = MSG_FL_LOG_ITEM_STORE_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_USE_MIX> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_USE_MIX); using struct_t = MSG_FL_LOG_ITEM_USE_MIX; };
	template<> struct info<T_FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN); using struct_t = MSG_FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN; };
	template<> struct info<T_FL_LOG_ITEM_BAZAAR_SEND> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_BAZAAR_SEND); using struct_t = MSG_FL_LOG_ITEM_BAZAAR_SEND; };
	template<> struct info<T_FL_LOG_ITEM_BAZAAR_RECV> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_BAZAAR_RECV); using struct_t = MSG_FL_LOG_ITEM_BAZAAR_RECV; };
	template<> struct info<T_FL_LOG_ITEM_SPI> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_SPI); using struct_t = MSG_FL_LOG_ITEM_SPI; };
	template<> struct info<T_FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT); using struct_t = MSG_FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT; };
	template<> struct info<T_FL_LOG_QUEST_COMPENSATION> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_QUEST_COMPENSATION); using struct_t = MSG_FL_LOG_QUEST_COMPENSATION; };
	template<> struct info<T_FL_LOG_WARPOINT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_WARPOINT); using struct_t = MSG_FL_LOG_WARPOINT; };
	template<> struct info<T_FL_LOG_ARENA_TEAM_MATCH> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ARENA_TEAM_MATCH); using struct_t = MSG_FL_LOG_ARENA_TEAM_MATCH; };
	template<> struct info<T_FL_LOG_TUTORIAL_COMPLETION> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_TUTORIAL_COMPLETION); using struct_t = MSG_FL_LOG_TUTORIAL_COMPLETION; };
	template<> struct info<T_FL_LOG_OUTPOST_START> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_OUTPOST_START); using struct_t = MSG_FL_LOG_OUTPOST_START; };
	template<> struct info<T_FL_LOG_OUTPOST_END> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_OUTPOST_END); using struct_t = MSG_FL_LOG_OUTPOST_END; };
	template<> struct info<T_FL_LOG_EXPEDIENCYFUND> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_EXPEDIENCYFUND); using struct_t = MSG_FL_LOG_EXPEDIENCYFUND; };
	template<> struct info<T_FL_LOG_SERVER_INFO_MAP> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_SERVER_INFO_MAP); using struct_t = MSG_FL_LOG_SERVER_INFO_MAP; };
	template<> struct info<T_FL_LOG_SERVER_INFO_TOTAL> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_SERVER_INFO_TOTAL); using struct_t = MSG_FL_LOG_SERVER_INFO_TOTAL; };
	template<> struct info<T_FL_LOG_HACKING_LOG> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_HACKING_LOG); using struct_t = MSG_FL_LOG_HACKING_LOG; };
	template<> struct info<T_FL_LOG_EVENT_PARTICIPATION_RATE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_EVENT_PARTICIPATION_RATE); using struct_t = MSG_FL_LOG_EVENT_PARTICIPATION_RATE; };
	template<> struct info<T_FL_LOG_ITEM_BUY_CASH_PRICE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_BUY_CASH_PRICE); using struct_t = MSG_FL_LOG_ITEM_BUY_CASH_PRICE; };
	template<> struct info<T_FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT); using struct_t = MSG_FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT; };
	template<> struct info<T_FL_LOG_ITEM_TRY_ENCHANT_INFO> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_TRY_ENCHANT_INFO); using struct_t = MSG_FL_LOG_ITEM_TRY_ENCHANT_INFO; };
	template<> struct info<T_FL_LOG_ITEM_DISSOLUTION_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_DISSOLUTION_ITEM); using struct_t = MSG_FL_LOG_ITEM_DISSOLUTION_ITEM; };
	template<> struct info<T_FL_LOG_MONSTER_BOSS> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_MONSTER_BOSS); using struct_t = MSG_FL_LOG_MONSTER_BOSS; };
	template<> struct info<T_FL_LOG_MS_WAR> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_MS_WAR); using struct_t = MSG_FL_LOG_MS_WAR; };
	template<> struct info<T_FL_LOG_SP_WAR> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_SP_WAR); using struct_t = MSG_FL_LOG_SP_WAR; };
	template<> struct info<T_FL_LOG_WAR_CONTRIBUTION> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_WAR_CONTRIBUTION); using struct_t = MSG_FL_LOG_WAR_CONTRIBUTION; };
	template<> struct info<T_FL_LOG_WAR_CONTRIBUTION_GEAR> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_WAR_CONTRIBUTION_GEAR); using struct_t = MSG_FL_LOG_WAR_CONTRIBUTION_GEAR; };
	template<> struct info<T_FL_LOG_INFLWAR_START> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFLWAR_START); using struct_t = MSG_FL_LOG_INFLWAR_START; };
	template<> struct info<T_FL_LOG_INFLWAR_END> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFLWAR_END); using struct_t = MSG_FL_LOG_INFLWAR_END; };
	template<> struct info<T_FL_LOG_OUTPOSTWAR_RESET_START> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_OUTPOSTWAR_RESET_START); using struct_t = MSG_FL_LOG_OUTPOSTWAR_RESET_START; };
	template<> struct info<T_FL_LOG_OUTPOSTWAR_RESET_DESTROY> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_OUTPOSTWAR_RESET_DESTROY); using struct_t = MSG_FL_LOG_OUTPOSTWAR_RESET_DESTROY; };
	template<> struct info<T_FL_LOG_OUTPOSTWAR_RESET_COMPLETE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_OUTPOSTWAR_RESET_COMPLETE); using struct_t = MSG_FL_LOG_OUTPOSTWAR_RESET_COMPLETE; };
	template<> struct info<T_FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY); using struct_t = MSG_FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY; };
	template<> struct info<T_FL_LOG_OUTPOSTWAR_SET_NEXTTIME> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_OUTPOSTWAR_SET_NEXTTIME); using struct_t = MSG_FL_LOG_OUTPOSTWAR_SET_NEXTTIME; };
	template<> struct info<T_FL_LOG_POLL_VOTE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_POLL_VOTE); using struct_t = MSG_FL_LOG_POLL_VOTE; };
	template<> struct info<T_FL_LOG_POLL_DELETE_LEADERCANDIDATE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_POLL_DELETE_LEADERCANDIDATE); using struct_t = MSG_FL_LOG_POLL_DELETE_LEADERCANDIDATE; };
	template<> struct info<T_FL_LOG_DISMEMBER_GUILD> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_DISMEMBER_GUILD); using struct_t = MSG_FL_LOG_DISMEMBER_GUILD; };
	template<> struct info<T_FL_LOG_NOTIFY_MSG_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_NOTIFY_MSG_DELETE); using struct_t = MSG_FL_LOG_NOTIFY_MSG_DELETE; };
	template<> struct info<T_FL_LOG_USE_COUPON> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_USE_COUPON); using struct_t = MSG_FL_LOG_USE_COUPON; };
	template<> struct info<T_FL_LOG_ITEM_ATTACH_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_ATTACH_ITEM); using struct_t = MSG_FL_LOG_ITEM_ATTACH_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_DETACH_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_DETACH_ITEM); using struct_t = MSG_FL_LOG_ITEM_DETACH_ITEM; };
	template<> struct info<T_FL_LOG_ITEM_DELETE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_DELETE); using struct_t = MSG_FL_LOG_ITEM_DELETE; };
	template<> struct info<T_FL_LOG_LUCKY_DROP> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_LUCKY_DROP); using struct_t = MSG_FL_LOG_LUCKY_DROP; };
	template<> struct info<T_FL_LOG_INFINITY_START> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFINITY_START); using struct_t = MSG_FL_LOG_INFINITY_START; };
	template<> struct info<T_FL_LOG_INFINITY_START_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFINITY_START_ITEM); using struct_t = MSG_FL_LOG_INFINITY_START_ITEM; };
	template<> struct info<T_FL_LOG_INFINITY_CINEMA> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFINITY_CINEMA); using struct_t = MSG_FL_LOG_INFINITY_CINEMA; };
	template<> struct info<T_FL_LOG_MONSTER_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_MONSTER_SKILL); using struct_t = MSG_FL_LOG_MONSTER_SKILL; };
	template<> struct info<T_FL_LOG_HPACTION_TALK> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_HPACTION_TALK); using struct_t = MSG_FL_LOG_HPACTION_TALK; };
	template<> struct info<T_FL_LOG_INFINITY_FIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFINITY_FIN); using struct_t = MSG_FL_LOG_INFINITY_FIN; };
	template<> struct info<T_FL_LOG_INFINITY_FIN_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFINITY_FIN_ITEM); using struct_t = MSG_FL_LOG_INFINITY_FIN_ITEM; };
	template<> struct info<T_FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER); using struct_t = MSG_FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER; };
	template<> struct info<T_FL_LOG_PET_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_PET_LEVEL); using struct_t = MSG_FL_LOG_PET_LEVEL; };
	template<> struct info<T_FL_LOG_CONNECT_USER_NEW> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_CONNECT_USER_NEW); using struct_t = MSG_FL_LOG_CONNECT_USER_NEW; };
	template<> struct info<T_FL_LOG_CONNECT_USER_LOGIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_CONNECT_USER_LOGIN); using struct_t = MSG_FL_LOG_CONNECT_USER_LOGIN; };
	template<> struct info<T_FL_LOG_STATISTICS_MONEY> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_STATISTICS_MONEY); using struct_t = MSG_FL_LOG_STATISTICS_MONEY; };
	template<> struct info<T_FL_LOG_FIXED_TERM_SHAPE_START> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_FIXED_TERM_SHAPE_START); using struct_t = MSG_FL_LOG_FIXED_TERM_SHAPE_START; };
	template<> struct info<T_FL_LOG_FIXED_TERM_SHAPE_END> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_FIXED_TERM_SHAPE_END); using struct_t = MSG_FL_LOG_FIXED_TERM_SHAPE_END; };
	template<> struct info<T_FL_LOG_ACCOUNTCONNECT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ACCOUNTCONNECT); using struct_t = MSG_FL_LOG_ACCOUNTCONNECT; };
	template<> struct info<T_FL_LOG_CHARDATA> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_CHARDATA); using struct_t = MSG_FL_LOG_CHARDATA; };
	template<> struct info<T_FL_LOG_ITEM> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM); using struct_t = MSG_FL_LOG_ITEM; };
	template<> struct info<T_FL_LOG_ITEMSTATE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEMSTATE); using struct_t = MSG_FL_LOG_ITEMSTATE; };
	template<> struct info<T_FL_LOG_SERVER> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_SERVER); using struct_t = MSG_FL_LOG_SERVER; };
	template<> struct info<T_FL_LOG_ITEM_INITIALIZED_GUILD_STORE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_INITIALIZED_GUILD_STORE); using struct_t = MSG_FL_LOG_ITEM_INITIALIZED_GUILD_STORE; };
	template<> struct info<T_FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT); using struct_t = MSG_FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT; };
	template<> struct info<T_FL_LOG_COLLECTION_STATE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_COLLECTION_STATE); using struct_t = MSG_FL_LOG_COLLECTION_STATE; };
	template<> struct info<T_FL_LOG_COLLECTION_SHAPE_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_COLLECTION_SHAPE_CHANGE); using struct_t = MSG_FL_LOG_COLLECTION_SHAPE_CHANGE; };
	template<> struct info<T_FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN> { static constexpr size_t msg_size = sizeof(MSG_FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN); using struct_t = MSG_FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN; };
	template<> struct info<T_PM_GET_NUM_CLIENTS_OK> { static constexpr size_t msg_size = sizeof(MSG_PM_GET_NUM_CLIENTS_OK); using struct_t = MSG_PM_GET_NUM_CLIENTS_OK; };
	template<> struct info<T_PM_RELOAD_VERSION_INFO> { static constexpr size_t msg_size = sizeof(MSG_PM_RELOAD_VERSION_INFO); using struct_t = MSG_PM_RELOAD_VERSION_INFO; };
	template<> struct info<T_PM_CHANGE_BANDWIDTH_FLAG_OK> { static constexpr size_t msg_size = sizeof(MSG_PM_CHANGE_BANDWIDTH_FLAG_OK); using struct_t = MSG_PM_CHANGE_BANDWIDTH_FLAG_OK; };
	template<> struct info<T_PM_SET_MSG_PRINT_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_PM_SET_MSG_PRINT_LEVEL); using struct_t = MSG_PM_SET_MSG_PRINT_LEVEL; };
	template<> struct info<T_PM_GET_SERVER_GROUP_INFO> { static constexpr size_t msg_size = sizeof(MSG_PM_GET_SERVER_GROUP_INFO); using struct_t = MSG_PM_GET_SERVER_GROUP_INFO; };
	template<> struct info<T_PM_GET_SERVER_GROUP_INFO_ACK> { static constexpr size_t msg_size = sizeof(MSG_PM_GET_SERVER_GROUP_INFO_ACK); using struct_t = MSG_PM_GET_SERVER_GROUP_INFO_ACK; };
	template<> struct info<T_PM_SET_LIMIT_GROUP_USER_COUNTS> { static constexpr size_t msg_size = sizeof(MSG_PM_SET_LIMIT_GROUP_USER_COUNTS); using struct_t = MSG_PM_SET_LIMIT_GROUP_USER_COUNTS; };
	template<> struct info<T_PM_SERVER_THREAD_STATUS> { static constexpr size_t msg_size = sizeof(MSG_PM_SERVER_THREAD_STATUS); using struct_t = MSG_PM_SERVER_THREAD_STATUS; };
	template<> struct info<T_PM_CHANGE_ENABLE_SERVER_GROUP> { static constexpr size_t msg_size = sizeof(MSG_PM_CHANGE_ENABLE_SERVER_GROUP); using struct_t = MSG_PM_CHANGE_ENABLE_SERVER_GROUP; };
	template<> struct info<T_PM_PREPARE_SHUTDOWN> { static constexpr size_t msg_size = sizeof(MSG_PM_PREPARE_SHUTDOWN); using struct_t = MSG_PM_PREPARE_SHUTDOWN; };
	template<> struct info<T_PM_AUTO_UPDATE_HTTP_SERVER_SETTING> { static constexpr size_t msg_size = sizeof(MSG_PM_AUTO_UPDATE_HTTP_SERVER_SETTING); using struct_t = MSG_PM_AUTO_UPDATE_HTTP_SERVER_SETTING; };
	template<> struct info<T_PM_RELOAD_VERSION_INFO_HEADER> { static constexpr size_t msg_size = sizeof(MSG_PM_RELOAD_VERSION_INFO_HEADER); using struct_t = MSG_PM_RELOAD_VERSION_INFO_HEADER; };
	template<> struct info<T_PM_RELOAD_VERSION_INFO_LIST> { static constexpr size_t msg_size = sizeof(MSG_PM_RELOAD_VERSION_INFO_LIST); using struct_t = MSG_PM_RELOAD_VERSION_INFO_LIST; };
	template<> struct info<T_IM_GET_NUM_CLIENTS_OK> { static constexpr size_t msg_size = sizeof(MSG_IM_GET_NUM_CLIENTS_OK); using struct_t = MSG_IM_GET_NUM_CLIENTS_OK; };
	template<> struct info<T_IM_PRINT_DEBUG_MSG> { static constexpr size_t msg_size = sizeof(MSG_IM_PRINT_DEBUG_MSG); using struct_t = MSG_IM_PRINT_DEBUG_MSG; };
	template<> struct info<T_IM_CHANGE_BANDWIDTH_FLAG_OK> { static constexpr size_t msg_size = sizeof(MSG_IM_CHANGE_BANDWIDTH_FLAG_OK); using struct_t = MSG_IM_CHANGE_BANDWIDTH_FLAG_OK; };
	template<> struct info<T_IM_SET_MSG_PRINT_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_IM_SET_MSG_PRINT_LEVEL); using struct_t = MSG_IM_SET_MSG_PRINT_LEVEL; };
	template<> struct info<T_IM_GET_TOTAL_USER_COUNTS_ACK> { static constexpr size_t msg_size = sizeof(MSG_IM_GET_TOTAL_USER_COUNTS_ACK); using struct_t = MSG_IM_GET_TOTAL_USER_COUNTS_ACK; };
	template<> struct info<T_IM_SERVER_THREAD_STATUS> { static constexpr size_t msg_size = sizeof(MSG_IM_SERVER_THREAD_STATUS); using struct_t = MSG_IM_SERVER_THREAD_STATUS; };
	template<> struct info<T_FM_GET_NUM_CLIENTS_OK> { static constexpr size_t msg_size = sizeof(MSG_FM_GET_NUM_CLIENTS_OK); using struct_t = MSG_FM_GET_NUM_CLIENTS_OK; };
	template<> struct info<T_FM_PRINTMAP> { static constexpr size_t msg_size = sizeof(MSG_FM_PRINTMAP); using struct_t = MSG_FM_PRINTMAP; };
	template<> struct info<T_FM_SAVE_MAPBLOCK_INFO> { static constexpr size_t msg_size = sizeof(MSG_FM_SAVE_MAPBLOCK_INFO); using struct_t = MSG_FM_SAVE_MAPBLOCK_INFO; };
	template<> struct info<T_FM_PRINT_DEBUG_MSG> { static constexpr size_t msg_size = sizeof(MSG_FM_PRINT_DEBUG_MSG); using struct_t = MSG_FM_PRINT_DEBUG_MSG; };
#ifndef _ATUM_CLIENT
	template<> struct info<T_FM_SEND_CHANNEL_INFO> { static constexpr size_t msg_size = sizeof(MSG_FM_SEND_CHANNEL_INFO); using struct_t = MSG_FM_SEND_CHANNEL_INFO; };
#endif
	template<> struct info<T_FM_CHANGE_BANDWIDTH_FLAG_OK> { static constexpr size_t msg_size = sizeof(MSG_FM_CHANGE_BANDWIDTH_FLAG_OK); using struct_t = MSG_FM_CHANGE_BANDWIDTH_FLAG_OK; };
	template<> struct info<T_FM_SET_MSG_PRINT_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_FM_SET_MSG_PRINT_LEVEL); using struct_t = MSG_FM_SET_MSG_PRINT_LEVEL; };
	template<> struct info<T_FM_GET_CHARACTER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FM_GET_CHARACTER_INFO); using struct_t = MSG_FM_GET_CHARACTER_INFO; };
	template<> struct info<T_FM_GET_CHARACTER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_FM_GET_CHARACTER_INFO_OK); using struct_t = MSG_FM_GET_CHARACTER_INFO_OK; };
	template<> struct info<T_FM_GET_MAP_USER_COUNTS> { static constexpr size_t msg_size = sizeof(MSG_FM_GET_MAP_USER_COUNTS); using struct_t = MSG_FM_GET_MAP_USER_COUNTS; };
	template<> struct info<T_FM_GET_MAP_USER_COUNTS_ACK> { static constexpr size_t msg_size = sizeof(MSG_FM_GET_MAP_USER_COUNTS_ACK); using struct_t = MSG_FM_GET_MAP_USER_COUNTS_ACK; };
	template<> struct info<T_FM_SERVER_THREAD_STATUS> { static constexpr size_t msg_size = sizeof(MSG_FM_SERVER_THREAD_STATUS); using struct_t = MSG_FM_SERVER_THREAD_STATUS; };
	template<> struct info<T_FM_SET_SERVICE_STATE> { static constexpr size_t msg_size = sizeof(MSG_FM_SET_SERVICE_STATE); using struct_t = MSG_FM_SET_SERVICE_STATE; };
	template<> struct info<T_FM_RELOAD_SERVER_INFO> { static constexpr size_t msg_size = sizeof(MSG_FM_RELOAD_SERVER_INFO); using struct_t = MSG_FM_RELOAD_SERVER_INFO; };
	template<> struct info<T_FM_INCREASE_CHANNEL> { static constexpr size_t msg_size = sizeof(MSG_FM_INCREASE_CHANNEL); using struct_t = MSG_FM_INCREASE_CHANNEL; };
	template<> struct info<T_FM_INCREASE_CHANNEL_OK> { static constexpr size_t msg_size = sizeof(MSG_FM_INCREASE_CHANNEL_OK); using struct_t = MSG_FM_INCREASE_CHANNEL_OK; };
	template<> struct info<T_FM_SET_CHANNEL_STATE> { static constexpr size_t msg_size = sizeof(MSG_FM_SET_CHANNEL_STATE); using struct_t = MSG_FM_SET_CHANNEL_STATE; };
	template<> struct info<T_FM_SET_CHANNEL_STATE_OK> { static constexpr size_t msg_size = sizeof(MSG_FM_SET_CHANNEL_STATE_OK); using struct_t = MSG_FM_SET_CHANNEL_STATE_OK; };
	template<> struct info<T_FM_CITYWAR_CHANGE_WAR_TIME> { static constexpr size_t msg_size = sizeof(MSG_FM_CITYWAR_CHANGE_WAR_TIME); using struct_t = MSG_FM_CITYWAR_CHANGE_WAR_TIME; };
	template<> struct info<T_FM_CITYWAR_CHANGED_OCCUPY_INFO> { static constexpr size_t msg_size = sizeof(MSG_FM_CITYWAR_CHANGED_OCCUPY_INFO); using struct_t = MSG_FM_CITYWAR_CHANGED_OCCUPY_INFO; };
	template<> struct info<T_NM_GET_NUM_MONSTERS_OK> { static constexpr size_t msg_size = sizeof(MSG_NM_GET_NUM_MONSTERS_OK); using struct_t = MSG_NM_GET_NUM_MONSTERS_OK; };
	template<> struct info<T_NM_PRINTMAP> { static constexpr size_t msg_size = sizeof(MSG_NM_PRINTMAP); using struct_t = MSG_NM_PRINTMAP; };
	template<> struct info<T_NM_SAVE_MAPBLOCK_INFO> { static constexpr size_t msg_size = sizeof(MSG_NM_SAVE_MAPBLOCK_INFO); using struct_t = MSG_NM_SAVE_MAPBLOCK_INFO; };
#ifndef _ATUM_CLIENT
	template<> struct info<T_NM_SEND_CHANNEL_INFO> { static constexpr size_t msg_size = sizeof(MSG_NM_SEND_CHANNEL_INFO); using struct_t = MSG_NM_SEND_CHANNEL_INFO; };
#endif
	template<> struct info<T_NM_CHANGE_BANDWIDTH_FLAG_OK> { static constexpr size_t msg_size = sizeof(MSG_NM_CHANGE_BANDWIDTH_FLAG_OK); using struct_t = MSG_NM_CHANGE_BANDWIDTH_FLAG_OK; };
	template<> struct info<T_NM_SET_MSG_PRINT_LEVEL> { static constexpr size_t msg_size = sizeof(MSG_NM_SET_MSG_PRINT_LEVEL); using struct_t = MSG_NM_SET_MSG_PRINT_LEVEL; };
	template<> struct info<T_NM_GET_MAP_USER_COUNTS> { static constexpr size_t msg_size = sizeof(MSG_NM_GET_MAP_USER_COUNTS); using struct_t = MSG_NM_GET_MAP_USER_COUNTS; };
	template<> struct info<T_NM_GET_MAP_USER_COUNTS_ACK> { static constexpr size_t msg_size = sizeof(MSG_NM_GET_MAP_USER_COUNTS_ACK); using struct_t = MSG_NM_GET_MAP_USER_COUNTS_ACK; };
	template<> struct info<T_NM_SET_LIMIT_MONSTER_COUNT> { static constexpr size_t msg_size = sizeof(MSG_NM_SET_LIMIT_MONSTER_COUNT); using struct_t = MSG_NM_SET_LIMIT_MONSTER_COUNT; };
	template<> struct info<T_NM_SET_LIMIT_MONSTER_COUNT_ACK> { static constexpr size_t msg_size = sizeof(MSG_NM_SET_LIMIT_MONSTER_COUNT_ACK); using struct_t = MSG_NM_SET_LIMIT_MONSTER_COUNT_ACK; };
	template<> struct info<T_NM_SERVER_THREAD_STATUS> { static constexpr size_t msg_size = sizeof(MSG_NM_SERVER_THREAD_STATUS); using struct_t = MSG_NM_SERVER_THREAD_STATUS; };
	template<> struct info<T_NM_SET_CHANNEL_STATE_OK> { static constexpr size_t msg_size = sizeof(MSG_NM_SET_CHANNEL_STATE_OK); using struct_t = MSG_NM_SET_CHANNEL_STATE_OK; };
	template<> struct info<T_PA_ADMIN_CONNECT> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_CONNECT); using struct_t = MSG_PA_ADMIN_CONNECT; };
	template<> struct info<T_PA_ADMIN_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_CONNECT_OK); using struct_t = MSG_PA_ADMIN_CONNECT_OK; };
	template<> struct info<T_PA_ADMIN_CHANGE_SERVER_STATE> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_CHANGE_SERVER_STATE); using struct_t = MSG_PA_ADMIN_CHANGE_SERVER_STATE; };
	template<> struct info<T_PA_ADMIN_GET_ACCOUNT_INFO> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_GET_ACCOUNT_INFO); using struct_t = MSG_PA_ADMIN_GET_ACCOUNT_INFO; };
	template<> struct info<T_PA_ADMIN_GET_ACCOUNT_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_GET_ACCOUNT_INFO_OK); using struct_t = MSG_PA_ADMIN_GET_ACCOUNT_INFO_OK; };
	template<> struct info<T_PA_ADMIN_DISCONNECT_USER> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_DISCONNECT_USER); using struct_t = MSG_PA_ADMIN_DISCONNECT_USER; };
	template<> struct info<T_PA_ADMIN_DISCONNECT_USER_OK> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_DISCONNECT_USER_OK); using struct_t = MSG_PA_ADMIN_DISCONNECT_USER_OK; };
	template<> struct info<T_PA_ADMIN_BLOCK_ACCOUNT> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_BLOCK_ACCOUNT); using struct_t = MSG_PA_ADMIN_BLOCK_ACCOUNT; };
	template<> struct info<T_PA_ADMIN_BLOCK_ACCOUNT_OK> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_BLOCK_ACCOUNT_OK); using struct_t = MSG_PA_ADMIN_BLOCK_ACCOUNT_OK; };
	template<> struct info<T_PA_ADMIN_UNBLOCK_ACCOUNT> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_UNBLOCK_ACCOUNT); using struct_t = MSG_PA_ADMIN_UNBLOCK_ACCOUNT; };
	template<> struct info<T_PA_ADMIN_UNBLOCK_ACCOUNT_OK> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_UNBLOCK_ACCOUNT_OK); using struct_t = MSG_PA_ADMIN_UNBLOCK_ACCOUNT_OK; };
	template<> struct info<T_PA_ADMIN_GET_SERVER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_GET_SERVER_INFO_OK); using struct_t = MSG_PA_ADMIN_GET_SERVER_INFO_OK; };
	template<> struct info<T_PA_ADMIN_GET_ACCOUNT_LIST> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_GET_ACCOUNT_LIST); using struct_t = MSG_PA_ADMIN_GET_ACCOUNT_LIST; };

	template<> struct info<T_PA_ADMIN_GET_ACCOUNT_LIST_OK>
	{
		static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_GET_ACCOUNT_LIST_OK);

		using struct_t = MSG_PA_ADMIN_GET_ACCOUNT_LIST_OK;
		using array_t = MEX_SIMPLE_ACCOUNT_INFO_FOR_ADMIN;

		static auto& array_c(struct_t* ptr) { return ptr->NumOfAccounts; }
		static auto& array_c(const struct_t* ptr) { return ptr->NumOfAccounts; }
	};

	template<> struct info<T_PA_ADMIN_PETITION_SET_PERIOD> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_PETITION_SET_PERIOD); using struct_t = MSG_PA_ADMIN_PETITION_SET_PERIOD; };
	template<> struct info<T_PA_ADMIN_SET_DBSERVER_GROUP> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_SET_DBSERVER_GROUP); using struct_t = MSG_PA_ADMIN_SET_DBSERVER_GROUP; };
	template<> struct info<T_PA_ADMIN_SET_DBSERVER_GROUP_OK> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_SET_DBSERVER_GROUP_OK); using struct_t = MSG_PA_ADMIN_SET_DBSERVER_GROUP_OK; };
	template<> struct info<T_PA_ADMIN_RELOAD_INFLUENCERATE> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_RELOAD_INFLUENCERATE); using struct_t = MSG_PA_ADMIN_RELOAD_INFLUENCERATE; };
	template<> struct info<T_PA_ADMIN_LOG_ACCOUNT_ACCOUNTTYPE_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_LOG_ACCOUNT_ACCOUNTTYPE_CHANGE); using struct_t = MSG_PA_ADMIN_LOG_ACCOUNT_ACCOUNTTYPE_CHANGE; };
	template<> struct info<T_PA_ADMIN_LOG_CHARACTER_RACEACCOUNTTYPE_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_LOG_CHARACTER_RACEACCOUNTTYPE_CHANGE); using struct_t = MSG_PA_ADMIN_LOG_CHARACTER_RACEACCOUNTTYPE_CHANGE; };
	template<> struct info<T_PA_ADMIN_STRATRGYPOINT_INFO_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_PA_ADMIN_STRATRGYPOINT_INFO_CHANGE); using struct_t = MSG_PA_ADMIN_STRATRGYPOINT_INFO_CHANGE; };
	template<> struct info<T_IA_ADMIN_CONNECT> { static constexpr size_t msg_size = sizeof(MSG_IA_ADMIN_CONNECT); using struct_t = MSG_IA_ADMIN_CONNECT; };
	template<> struct info<T_IA_ADMIN_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_IA_ADMIN_CONNECT_OK); using struct_t = MSG_IA_ADMIN_CONNECT_OK; };
	template<> struct info<T_IA_ADMIN_CHANGE_SERVER_STATE> { static constexpr size_t msg_size = sizeof(MSG_IA_ADMIN_CHANGE_SERVER_STATE); using struct_t = MSG_IA_ADMIN_CHANGE_SERVER_STATE; };
	template<> struct info<T_IA_ADMIN_GET_CHARACTER> { static constexpr size_t msg_size = sizeof(MSG_IA_ADMIN_GET_CHARACTER); using struct_t = MSG_IA_ADMIN_GET_CHARACTER; };
	template<> struct info<T_IA_ADMIN_GET_CHARACTER_OK> { static constexpr size_t msg_size = sizeof(MSG_IA_ADMIN_GET_CHARACTER_OK); using struct_t = MSG_IA_ADMIN_GET_CHARACTER_OK; };
	template<> struct info<T_IA_ADMIN_CHAT_ALL> { static constexpr size_t msg_size = sizeof(MSG_IA_ADMIN_CHAT_ALL); using struct_t = MSG_IA_ADMIN_CHAT_ALL; };
	template<> struct info<T_IA_ADMIN_GET_SERVER_INFO_OK> { static constexpr size_t msg_size = sizeof(MSG_IA_ADMIN_GET_SERVER_INFO_OK); using struct_t = MSG_IA_ADMIN_GET_SERVER_INFO_OK; };
	template<> struct info<T_FA_ADMIN_CONNECT> { static constexpr size_t msg_size = sizeof(MSG_FA_ADMIN_CONNECT); using struct_t = MSG_FA_ADMIN_CONNECT; };
	template<> struct info<T_FA_ADMIN_CONNECT_OK> { static constexpr size_t msg_size = sizeof(MSG_FA_ADMIN_CONNECT_OK); using struct_t = MSG_FA_ADMIN_CONNECT_OK; };
	template<> struct info<T_FA_ADMIN_CHANGE_SERVER_STATE> { static constexpr size_t msg_size = sizeof(MSG_FA_ADMIN_CHANGE_SERVER_STATE); using struct_t = MSG_FA_ADMIN_CHANGE_SERVER_STATE; };
	template<> struct info<T_FC_TRIGGER_MAP_BUFF_SKILL> { static constexpr size_t msg_size = sizeof(MSG_FC_TRIGGER_MAP_BUFF_SKILL); using struct_t = MSG_FC_TRIGGER_MAP_BUFF_SKILL; };
	template<> struct info<T_FC_SET_LIMITTIME> { static constexpr size_t msg_size = sizeof(MSG_FC_SET_LIMITTIME); using struct_t = MSG_FC_SET_LIMITTIME; };
	template<> struct info<T_FC_COLLECTION_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_COLLECTION_INFO); using struct_t = MSG_FC_COLLECTION_INFO; };
	template<> struct info<T_FC_COLLECTION_SHAPE_CHANGE> { static constexpr size_t msg_size = sizeof(MSG_FC_COLLECTION_SHAPE_CHANGE); using struct_t = MSG_FC_COLLECTION_SHAPE_CHANGE; };
	template<> struct info<T_FC_COLLECTION_MONTHLY_AROMOR_EVENT_INFO> { static constexpr size_t msg_size = sizeof(MSG_FC_COLLECTION_MONTHLY_AROMOR_EVENT_INFO); using struct_t = MSG_FC_COLLECTION_MONTHLY_AROMOR_EVENT_INFO; };
	template<> struct info<T_ERROR> { static constexpr size_t msg_size = sizeof(MSG_ERROR); using struct_t = MSG_ERROR; }; // namespace protocol
} // namespace protocol


constexpr auto T1_FL_LOG_LOGIN = T1<T0::FL_LOG>::FL_LOG_LOGIN;
constexpr auto T1_FL_LOG_LOGOUT = T1<T0::FL_LOG>::FL_LOG_LOGOUT;
constexpr auto T1_FL_LOG_LEVEL = T1<T0::FL_LOG>::FL_LOG_LEVEL;
constexpr auto T1_FL_LOG_EXP = T1<T0::FL_LOG>::FL_LOG_EXP;
constexpr auto T1_FL_LOG_STAT = T1<T0::FL_LOG>::FL_LOG_STAT;
constexpr auto T1_FL_LOG_GAME_START = T1<T0::FL_LOG>::FL_LOG_GAME_START;
constexpr auto T1_FL_LOG_GAME_END = T1<T0::FL_LOG>::FL_LOG_GAME_END;
constexpr auto T1_FL_LOG_QUEST_COMPLETION = T1<T0::FL_LOG>::FL_LOG_QUEST_COMPLETION;
constexpr auto T1_FL_LOG_PKWIN = T1<T0::FL_LOG>::FL_LOG_PKWIN;
constexpr auto T1_FL_LOG_PKLOSS = T1<T0::FL_LOG>::FL_LOG_PKLOSS;
constexpr auto T1_FL_LOG_DEAD = T1<T0::FL_LOG>::FL_LOG_DEAD;
constexpr auto T1_FL_LOG_WARP = T1<T0::FL_LOG>::FL_LOG_WARP;
constexpr auto T1_FL_LOG_SPEED_HACK = T1<T0::FL_LOG>::FL_LOG_SPEED_HACK;
constexpr auto T1_FL_LOG_CREATE_CHARACTER = T1<T0::FL_LOG>::FL_LOG_CREATE_CHARACTER;
constexpr auto T1_FL_LOG_DELETE_CHARACTER = T1<T0::FL_LOG>::FL_LOG_DELETE_CHARACTER;
constexpr auto T1_FL_LOG_MEMORY_HACK = T1<T0::FL_LOG>::FL_LOG_MEMORY_HACK;
constexpr auto T1_FL_LOG_PvEWIN = T1<T0::FL_LOG>::FL_LOG_PvEWIN;
constexpr auto T1_FL_LOG_PvELOSS = T1<T0::FL_LOG>::FL_LOG_PvELOSS;
constexpr auto T1_FL_LOG_ITEM_CHARACTER_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_CHARACTER_ITEM;
constexpr auto T1_FL_LOG_ITEM_GET_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_GET_ITEM;
constexpr auto T1_FL_LOG_ITEM_TRADE_SEND = T1<T0::FL_LOG>::FL_LOG_ITEM_TRADE_SEND;
constexpr auto T1_FL_LOG_ITEM_TRADE_RECV = T1<T0::FL_LOG>::FL_LOG_ITEM_TRADE_RECV;
constexpr auto T1_FL_LOG_ITEM_THROWAWAY_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_THROWAWAY_ITEM;
constexpr auto T1_FL_LOG_ITEM_BUY_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_BUY_ITEM;
constexpr auto T1_FL_LOG_ITEM_SELL_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_SELL_ITEM;
constexpr auto T1_FL_LOG_ITEM_USE_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_USE_ITEM;
constexpr auto T1_FL_LOG_ITEM_USE_ENERGY = T1<T0::FL_LOG>::FL_LOG_ITEM_USE_ENERGY;
constexpr auto T1_FL_LOG_ITEM_USE_ENCHANT = T1<T0::FL_LOG>::FL_LOG_ITEM_USE_ENCHANT;
constexpr auto T1_FL_LOG_ITEM_ADD_ITEM_BY_ADMIN = T1<T0::FL_LOG>::FL_LOG_ITEM_ADD_ITEM_BY_ADMIN;
constexpr auto T1_FL_LOG_ITEM_DEL_ITEM_BY_ADMIN = T1<T0::FL_LOG>::FL_LOG_ITEM_DEL_ITEM_BY_ADMIN;
constexpr auto T1_FL_LOG_ITEM_ADD_ITEM_BY_COMMAND = T1<T0::FL_LOG>::FL_LOG_ITEM_ADD_ITEM_BY_COMMAND;
constexpr auto T1_FL_LOG_ITEM_INSERT_TO_STORE = T1<T0::FL_LOG>::FL_LOG_ITEM_INSERT_TO_STORE;
constexpr auto T1_FL_LOG_ITEM_DRAW_FROM_STORE = T1<T0::FL_LOG>::FL_LOG_ITEM_DRAW_FROM_STORE;
constexpr auto T1_FL_LOG_ITEM_STORE_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_STORE_ITEM;
constexpr auto T1_FL_LOG_ITEM_USE_MIX = T1<T0::FL_LOG>::FL_LOG_ITEM_USE_MIX;
constexpr auto T1_FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN = T1<T0::FL_LOG>::FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_ORIGIN;
constexpr auto T1_FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_NEW = T1<T0::FL_LOG>::FL_LOG_ITEM_USE_CHANGE_CHARACTER_NAME_NEW;
constexpr auto T1_FL_LOG_ITEM_BAZAAR_SEND = T1<T0::FL_LOG>::FL_LOG_ITEM_BAZAAR_SEND;
constexpr auto T1_FL_LOG_ITEM_BAZAAR_RECV = T1<T0::FL_LOG>::FL_LOG_ITEM_BAZAAR_RECV;
constexpr auto T1_FL_LOG_ITEM_INSERT_TO_GUILDSTORE = T1<T0::FL_LOG>::FL_LOG_ITEM_INSERT_TO_GUILDSTORE;
constexpr auto T1_FL_LOG_ITEM_DRAW_FROM_GUILDSTORE = T1<T0::FL_LOG>::FL_LOG_ITEM_DRAW_FROM_GUILDSTORE;
constexpr auto T1_FL_LOG_ITEM_SPI = T1<T0::FL_LOG>::FL_LOG_ITEM_SPI;
constexpr auto T1_FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT = T1<T0::FL_LOG>::FL_LOG_ITEM_GET_ITEM_BY_ITEMEVENT;
constexpr auto T1_FL_LOG_QUEST_COMPENSATION = T1<T0::FL_LOG>::FL_LOG_QUEST_COMPENSATION;
constexpr auto T1_FL_LOG_WARPOINT = T1<T0::FL_LOG>::FL_LOG_WARPOINT;
constexpr auto T1_FL_LOG_ARENA_TEAM_MATCH = T1<T0::FL_LOG>::FL_LOG_ARENA_TEAM_MATCH;
constexpr auto T1_FL_LOG_TUTORIAL_COMPLETION = T1<T0::FL_LOG>::FL_LOG_TUTORIAL_COMPLETION;
constexpr auto T1_FL_LOG_OUTPOST_START = T1<T0::FL_LOG>::FL_LOG_OUTPOST_START;
constexpr auto T1_FL_LOG_OUTPOST_END = T1<T0::FL_LOG>::FL_LOG_OUTPOST_END;
constexpr auto T1_FL_LOG_EXPEDIENCYFUND = T1<T0::FL_LOG>::FL_LOG_EXPEDIENCYFUND;
constexpr auto T1_FL_LOG_SERVER_INFO_MAP = T1<T0::FL_LOG>::FL_LOG_SERVER_INFO_MAP;
constexpr auto T1_FL_LOG_SERVER_INFO_TOTAL = T1<T0::FL_LOG>::FL_LOG_SERVER_INFO_TOTAL;
constexpr auto T1_FL_LOG_HACKING_LOG = T1<T0::FL_LOG>::FL_LOG_HACKING_LOG;
constexpr auto T1_FL_LOG_LIVE_DELETED_CHARACTER = T1<T0::FL_LOG>::FL_LOG_LIVE_DELETED_CHARACTER;
constexpr auto T1_FL_LOG_EVENT_PARTICIPATION_RATE = T1<T0::FL_LOG>::FL_LOG_EVENT_PARTICIPATION_RATE;
constexpr auto T1_FL_LOG_ITEM_BUY_CASH_PRICE = T1<T0::FL_LOG>::FL_LOG_ITEM_BUY_CASH_PRICE;
constexpr auto T1_FL_LOG_ITEM_ENCHANT_BY_ADMIN = T1<T0::FL_LOG>::FL_LOG_ITEM_ENCHANT_BY_ADMIN;
constexpr auto T1_FL_LOG_ITEM_DISENCHANT_BY_ADMIN = T1<T0::FL_LOG>::FL_LOG_ITEM_DISENCHANT_BY_ADMIN;
constexpr auto T1_FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT = T1<T0::FL_LOG>::FL_LOG_ITEM_CHARACTER_ITEM_GUILDSTORE_RESULT;
constexpr auto T1_FL_LOG_ITEM_TRY_ENCHANT_INFO = T1<T0::FL_LOG>::FL_LOG_ITEM_TRY_ENCHANT_INFO;
constexpr auto T1_FL_LOG_ITEM_DISSOLUTION_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_DISSOLUTION_ITEM;
constexpr auto T1_FL_LOG_MONSTER_BOSS = T1<T0::FL_LOG>::FL_LOG_MONSTER_BOSS;
constexpr auto T1_FL_LOG_MS_WAR = T1<T0::FL_LOG>::FL_LOG_MS_WAR;
constexpr auto T1_FL_LOG_SP_WAR = T1<T0::FL_LOG>::FL_LOG_SP_WAR;
constexpr auto T1_FL_LOG_WAR_CONTRIBUTION = T1<T0::FL_LOG>::FL_LOG_WAR_CONTRIBUTION;
constexpr auto T1_FL_LOG_WAR_CONTRIBUTION_GEAR = T1<T0::FL_LOG>::FL_LOG_WAR_CONTRIBUTION_GEAR;
constexpr auto T1_FL_LOG_SERVER_INTEGRAION = T1<T0::FL_LOG>::FL_LOG_SERVER_INTEGRAION;
constexpr auto T1_FL_LOG_SERVER_INTEGRAION_GUILD_STORE_ITEMS = T1<T0::FL_LOG>::FL_LOG_SERVER_INTEGRAION_GUILD_STORE_ITEMS;
constexpr auto T1_FL_LOG_SERVER_INTEGRAION_ONLY_CASH_STORE_ITEMS = T1<T0::FL_LOG>::FL_LOG_SERVER_INTEGRAION_ONLY_CASH_STORE_ITEMS;
constexpr auto T1_FL_LOG_INFLWAR_START = T1<T0::FL_LOG>::FL_LOG_INFLWAR_START;
constexpr auto T1_FL_LOG_INFLWAR_END = T1<T0::FL_LOG>::FL_LOG_INFLWAR_END;
constexpr auto T1_FL_LOG_OUTPOSTWAR_RESET_START = T1<T0::FL_LOG>::FL_LOG_OUTPOSTWAR_RESET_START;
constexpr auto T1_FL_LOG_OUTPOSTWAR_RESET_DESTROY = T1<T0::FL_LOG>::FL_LOG_OUTPOSTWAR_RESET_DESTROY;
constexpr auto T1_FL_LOG_OUTPOSTWAR_RESET_COMPLETE = T1<T0::FL_LOG>::FL_LOG_OUTPOSTWAR_RESET_COMPLETE;
constexpr auto T1_FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY = T1<T0::FL_LOG>::FL_LOG_OUTPOSTWAR_PROTECTOR_DESTROY;
constexpr auto T1_FL_LOG_OUTPOSTWAR_SET_NEXTTIME = T1<T0::FL_LOG>::FL_LOG_OUTPOSTWAR_SET_NEXTTIME;
constexpr auto T1_FL_LOG_POLL_VOTE = T1<T0::FL_LOG>::FL_LOG_POLL_VOTE;
constexpr auto T1_FL_LOG_POLL_DELETE_LEADERCANDIDATE = T1<T0::FL_LOG>::FL_LOG_POLL_DELETE_LEADERCANDIDATE;
constexpr auto T1_FL_LOG_DISMEMBER_GUILD = T1<T0::FL_LOG>::FL_LOG_DISMEMBER_GUILD;
constexpr auto T1_FL_LOG_NOTIFY_MSG_DELETE = T1<T0::FL_LOG>::FL_LOG_NOTIFY_MSG_DELETE;
constexpr auto T1_FL_LOG_USE_COUPON = T1<T0::FL_LOG>::FL_LOG_USE_COUPON;
constexpr auto T1_FL_LOG_ITEM_GIFT_SEND = T1<T0::FL_LOG>::FL_LOG_ITEM_GIFT_SEND;
constexpr auto T1_FL_LOG_ITEM_GIFT_RECV = T1<T0::FL_LOG>::FL_LOG_ITEM_GIFT_RECV;
constexpr auto T1_FL_LOG_ITEM_REARRANGE_DELETE_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_REARRANGE_DELETE_ITEM;
constexpr auto T1_FL_LOG_ITEM_REARRANGE_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_REARRANGE_ITEM;
constexpr auto T1_FL_LOG_ITEM_ATTACH_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_ATTACH_ITEM;
constexpr auto T1_FL_LOG_ITEM_DETACH_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM_DETACH_ITEM;
constexpr auto T1_FL_LOG_ITEM_DELETE = T1<T0::FL_LOG>::FL_LOG_ITEM_DELETE;
constexpr auto T1_FL_LOG_LUCKY_DROP = T1<T0::FL_LOG>::FL_LOG_LUCKY_DROP;
constexpr auto T1_FL_LOG_INFINITY_START = T1<T0::FL_LOG>::FL_LOG_INFINITY_START;
constexpr auto T1_FL_LOG_INFINITY_START_ITEM = T1<T0::FL_LOG>::FL_LOG_INFINITY_START_ITEM;
constexpr auto T1_FL_LOG_INFINITY_CINEMA = T1<T0::FL_LOG>::FL_LOG_INFINITY_CINEMA;
constexpr auto T1_FL_LOG_MONSTER_SKILL = T1<T0::FL_LOG>::FL_LOG_MONSTER_SKILL;
constexpr auto T1_FL_LOG_HPACTION_TALK = T1<T0::FL_LOG>::FL_LOG_HPACTION_TALK;
constexpr auto T1_FL_LOG_INFINITY_FIN = T1<T0::FL_LOG>::FL_LOG_INFINITY_FIN;
constexpr auto T1_FL_LOG_INFINITY_FIN_ITEM = T1<T0::FL_LOG>::FL_LOG_INFINITY_FIN_ITEM;
constexpr auto T1_FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER = T1<T0::FL_LOG>::FL_LOG_INFINITY_FIN_ALIVE_KEY_MONSTER;
constexpr auto T1_FL_LOG_INFINITY_LEAVE_ITEM = T1<T0::FL_LOG>::FL_LOG_INFINITY_LEAVE_ITEM;
constexpr auto T1_FL_LOG_BLOCK_ACCOUNT = T1<T0::FL_LOG>::FL_LOG_BLOCK_ACCOUNT;
constexpr auto T1_FL_LOG_UNBLOCK_ACCOUNT = T1<T0::FL_LOG>::FL_LOG_UNBLOCK_ACCOUNT;
constexpr auto T1_FL_LOG_PET_LEVEL = T1<T0::FL_LOG>::FL_LOG_PET_LEVEL;
constexpr auto T1_FL_LOG_CONNECT_USER_NEW = T1<T0::FL_LOG>::FL_LOG_CONNECT_USER_NEW;
constexpr auto T1_FL_LOG_CONNECT_USER_LOGIN = T1<T0::FL_LOG>::FL_LOG_CONNECT_USER_LOGIN;
constexpr auto T1_FL_LOG_STATISTICS_MONEY = T1<T0::FL_LOG>::FL_LOG_STATISTICS_MONEY;
constexpr auto T1_FL_LOG_FIXED_TERM_SHAPE_START = T1<T0::FL_LOG>::FL_LOG_FIXED_TERM_SHAPE_START;
constexpr auto T1_FL_LOG_FIXED_TERM_SHAPE_END = T1<T0::FL_LOG>::FL_LOG_FIXED_TERM_SHAPE_END;
constexpr auto T1_FL_LOG_ACCOUNTCONNECT = T1<T0::FL_LOG>::FL_LOG_ACCOUNTCONNECT;
constexpr auto T1_FL_LOG_CHARDATA = T1<T0::FL_LOG>::FL_LOG_CHARDATA;
constexpr auto T1_FL_LOG_ITEM = T1<T0::FL_LOG>::FL_LOG_ITEM;
constexpr auto T1_FL_LOG_ITEMSTATE = T1<T0::FL_LOG>::FL_LOG_ITEMSTATE;
constexpr auto T1_FL_LOG_SERVER = T1<T0::FL_LOG>::FL_LOG_SERVER;
constexpr auto T1_FL_LOG_ITEM_INITIALIZED_GUILD_STORE = T1<T0::FL_LOG>::FL_LOG_ITEM_INITIALIZED_GUILD_STORE;
constexpr auto T1_FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT = T1<T0::FL_LOG>::FL_LOG_ITEM_GET_WITH_SAME_ACCOUNT;
constexpr auto T1_FL_LOG_COLLECTION_STATE = T1<T0::FL_LOG>::FL_LOG_COLLECTION_STATE;
constexpr auto T1_FL_LOG_COLLECTION_SHAPE_CHANGE = T1<T0::FL_LOG>::FL_LOG_COLLECTION_SHAPE_CHANGE;
constexpr auto T1_FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN = T1<T0::FL_LOG>::FL_LOG_ACCOUNT_INFL_CHANGE_BY_ADMIN;
constexpr auto T1_FL_LOG_START_FIELD_SERVER = T1<T0::FL_LOG>::FL_LOG_START_FIELD_SERVER;






template<MessageType_t msgtype> class MessageData
{
public:

	using info = protocol::info<msgtype>;

	using struct_t = typename info::struct_t;

private:

	char buffer[sizeof(MessageType_t) + sizeof(struct_t)];

public:

	struct_t* data() { return reinterpret_cast<struct_t*>(buffer + sizeof(MessageType_t)); }
	const struct_t* data() const { return reinterpret_cast<const struct_t*>(buffer + sizeof(MessageType_t)); }

	constexpr MessageData() : buffer { char(msgtype & 0xFF), char(msgtype >> 8) } { }

	// ReSharper disable once CppNonExplicitConvertingConstructor
	MessageData(const struct_t& msg) : MessageData { } { *data() = msg; }

	static constexpr size_t size() { return sizeof(MessageType_t) + sizeof(struct_t); }

	struct_t* operator->() { return data(); }

	MessageData<msgtype>& operator=(const struct_t* msg) { *data() = *msg; return *this; }
};

template<MessageType_t msgtype> class MessageDataArray
{
	using info = protocol::info<msgtype>;

	using struct_t = typename info::struct_t;
	using array_t = typename info::array_t;

	char buffer[SIZE_MAX_PACKET];

public:

	struct_t* data() { return reinterpret_cast<struct_t*>(buffer + sizeof(MessageType_t)); }
	const struct_t* data() const { return reinterpret_cast<const struct_t*>(buffer + sizeof(MessageType_t)); }

	constexpr MessageDataArray() : buffer { char(msgtype & 0xFF), char(msgtype >> 8) } { }

	// ReSharper disable once CppNonExplicitConvertingConstructor
	MessageDataArray(const struct_t& msg) : MessageDataArray { } { *data() = msg; }

	auto& counter() { return info::array_c(data()); }
	const auto& counter() const { return info::array_c(data()); }

	size_t size() const { return sizeof(MessageType_t) + sizeof(struct_t) + counter() * sizeof(array_t); }

	struct_t* operator->() { return data(); }

	MessageDataArray<msgtype>& operator=(const struct_t* msg) { *data() = *msg; return *this; }

	array_t* append()
	{
		auto s = size();

		if (s > SIZE_MAX_PACKET - sizeof(array_t)) return nullptr;

		counter()++;

		return reinterpret_cast<array_t*>(buffer + s);
	}
};


